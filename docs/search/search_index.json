{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Grizzly - <code>/\u02c8\u0261\u0279\u026azli/</code>","text":"<p>Framework:</p> <p> </p> <p>Command Line Interface:</p> <p> </p> <p></p> <p>Grizzly is a framework to be able to easily define load scenarios, and is mainly built on-top of two other frameworks:</p> <p>Locust: Define user behaviour with Python code, and swarm your system with millions of simultaneous users.</p> <p>Behave: Uses tests written in a natural language style, backed up by Python code.</p> <p>Locust are a group of certain species of short-horned grasshoppers in the family Arcididae that have a swarming phase.</p> <p>The name grizzly was chosen based on the grasshopper Melanoplus punctulatus, also known as grizzly spur-throat grasshopper. This species prefers living in trees over grass, which is a hint to Biometria<sup>1</sup>, where <code>grizzly</code> originally was created.</p> <p><sup>1</sup> Biometria is a member owned and central actor within the swedish forestry that performs unbiased measurement of lumber flowing between forest and industry so that all of Swedens forest owners can feel confident selling their lumber.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>More detailed documentation can be found here and the easiest way to get started is to check out the example.</p>"},{"location":"#description","title":"Description","text":"<p><code>behave</code> is abused for being able to define <code>locust</code> load test scenarios using gherkin. A feature can contain more than one scenario and all scenarios will run in parallell.</p> <pre><code>Feature: Rest API endpoint testing\nBackground: Common properties for all scenarios\n    Given \"2\" users\nAnd spawn rate is \"2\" user per second\nAnd stop on first failure\n\nScenario: Authorize\n    Given a user of type \"RestApi\" sending requests to \"https://api.example.com\"\nAnd repeat for \"2\" iterations\nAnd wait time inbetween requests is random between \"0.1\" and \"0.3\" seconds\nAnd value for variable \"AtomicDate.called\" is \"now | format='%Y-%m-%dT%H:%M:%S.00Z', timezone=UTC\"\nAnd value for variable \"callback_endpoint\" is \"none\"\nThen post request with name \"authorize\" from endpoint \"/api/v1/authorize?called={{ AtomicDate.called }} | content_type=json\"\n\"\"\"\n        {\n            \"username\": \"test\",\n            \"password\": \"password123\",\n            \"callback\": \"/api/v1/user/test\"\n        }\n\"\"\"\nThen save response payload \"$.callback\" in variable \"callback_endpoint\"\n\nThen get request with name \"user info\" from endpoint \"{{ callback_endpoint }} | content_type=json\"\nWhen response payload \"$.user.name\" is not \"Test User\" stop user\n</code></pre> <p>This makes it possible to implement load test scenarios without knowing python or how to use <code>locust</code>.</p>"},{"location":"#features","title":"Features","text":"<p>A number of features that we thought <code>locust</code> was missing out-of-the-box has been implemented in <code>grizzly</code>.</p>"},{"location":"#test-data","title":"Test data","text":"<p>Support for synchronous handling of test data (variables). This is extra important when running <code>locust</code> distributed and there is a need for each worker and user to have unique test data, that cannot be re-used.</p> <p>The solution is heavily inspired by Karol Brejnas locust experiments - feeding the locust. A producer is running on the master (or local) node and keeps track of what has been sent to the consumer running on a worker (or local) node. The two communicates over a seperate ZeroMQ session.</p> <p>When the consumer wants new test data, it sends a message to the server that it is available and for which scenario it is going to run. The producer then responds with unique test data that can be used.</p>"},{"location":"#statistics","title":"Statistics","text":"<p>Listeners for both InfluxDB and Azure Application Insights are included. The later is more or less <code>appinsights_listener.py</code>, from the good guys at Svenska Spel, but with typing.</p> <p>They are useful when history of test runs is needed, or when wanting to correlate load tests with other events in the targeted environment.</p>"},{"location":"#load-test-users","title":"Load test users","text":"<p><code>locust</code> comes with a simple user for loading an HTTP(S) endpoint and due to the nature of how the integration between <code>behave</code> and <code>locust</code> works in <code>grizzly</code>, it is not possible to directly use <code>locust.user.users</code> provided users, even for HTTP(S) targets.</p> <ul> <li><code>RestApiUser</code>: send requests to REST API endpoinds, supports authentication with username+password or client secret</li> <li><code>ServiceBusUser</code>: send to and receive from Azure Service Bus queues and topics</li> <li><code>MessageQueueUser</code>: send and receive from IBM MQ queues</li> <li><code>SftpUser</code>: send and receive files from an SFTP-server</li> <li><code>BlobStorageUser</code>: send files to Azure Blob Storage<sup>2</sup></li> <li><code>IotHubUser</code>: send/put files to Azure IoT Hub</li> </ul> <p><sup>2</sup> A pull request for functionality in the other direction is appreciated!</p>"},{"location":"#request-log","title":"Request log","text":"<p>All failed requests are logged to a file which includes both header and body, both for request and response.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip3 install grizzly-loadtester\npip3 install grizzly-loadtester-cli\n</code></pre> <p>Do not forget to try the example which also serves as a boilerplate scenario project, or create a new grizzly project with:</p> <pre><code>grizzly-cli init my-grizzly-project\n</code></pre>"},{"location":"#development","title":"Development","text":"<p>The easiest way to start contributing to this project is to have Visual Studio Code (with \"Remote - Containers\" extension) and docker installed. The project comes with a <code>devcontainer</code>, which encapsulates everything needed for a development environment.</p> <p>It is also possible to use a python virtual environment where <code>requirements-dev.txt</code> is installed.</p>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at opensource@biometria.se. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"example/","title":"Example","text":""},{"location":"example/#example","title":"Example","text":"<p>The directory <code>example/</code> is an working project that sends requests to public REST API endpoints, please do not abuse these.</p>"},{"location":"example/#structure","title":"Structure","text":"<p>The project must have the follwoing structure:</p> <pre><code>.\n\u2514\u2500\u2500 features\n \u00a0\u00a0 \u251c\u2500\u2500 environment.py\n \u00a0\u00a0 \u251c\u2500\u2500 test.feature\n \u00a0\u00a0 \u251c\u2500\u2500 requests\n \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\n \u00a0\u00a0 \u2514\u2500\u2500 steps\n \u00a0\u00a0     \u2514\u2500\u2500 steps.py\n</code></pre> <p>In this example there are two <code>requirements*.txt</code> files. The reason is that <code>requirements.txt</code> will be copied and installed in the container image if <code>grizzly-cli</code> is used. The container image should not contain <code>grizzly-cli</code> and should be installed where scenarios are started from.</p> <p>After installing <code>grizzly-cli</code> the easiest way to get a correct project structure is to use the builtin <code>init</code> subcommand:</p> <pre><code>grizzly-cli init my-grizzly-project\ncd my-grizzly-project/\n</code></pre>"},{"location":"example/#environment","title":"Environment","text":"<p><code>features/environment.py</code> should contain:</p> <pre><code>from grizzly.environment import *\n</code></pre> <p>This file can contain overloading of <code>behave</code> hooks to trigger events that should happen during different stages of running a feature file.</p> <pre><code>from grizzly.environment import before_feature as grizzly_before_feature, after_feature as grizzly_after_feature, before_scenario, after_scenario, before_step\n\ndef before_feature(context: Context, *args: Tuple[Any, ...], **kwargs: Dict[str, Any]) -&gt; None:\n    # custom code that should run before feature file is started, e.g. notify something that a test\n    # is started\n\n    grizzly_before_feature(context, *args, **kwargs)\n\n\ndef after_feature(context: Context, feature: Feature, *args: Tuple[Any, ...], **kwargs: Dict[str, Any]) -&gt; None:\n    grizzly_after_feature(context, feature, *args, **kwargs)\n\n    # custom code that should run before feature file is started, e.g. notify something that a test\n    # is finished\n</code></pre>"},{"location":"example/#steps","title":"Steps","text":"<p><code>features/steps/steps.py</code> should contain:</p> <pre><code>from grizzly.steps import *\n</code></pre> <p>This is where custom step implementation can be added, then should look something like:</p> <pre><code>from behave.runner import Context\nfrom behave import then  # pylint: disable=no-name-in-module\n\nfrom grizzly.steps import *\nfrom grizzly.context import GrizzlyContext\n\n\n@then(u'this custom step should be executed')\ndef step_custom_the_custom_step(context: Context) -&gt; None:\n    grizzly = cast(GrizzlyContext, context.grizzly)\n\n    # custom step implementation\n</code></pre>"},{"location":"example/#request-templates","title":"Request templates","text":"<p><code>features/requests</code> can contain jinja2 templates used in requests. E.g., if the feature file contains the following step:</p> <pre><code>Then send request \"payload.j2.json\"\n</code></pre> <p>Then <code>features/requests/payload.j2.json</code> needs to exist.</p>"},{"location":"example/#get","title":"Get","text":"<p>First do a sparse checkout of the <code>example/</code> directory in the repository.</p> <p>If you have <code>git</code> older than <code>2.25.0</code>, follow these instructions on stackoverflow.com.</p> BashPowerShell <pre><code>mkdir grizzly-example\ncd grizzly-example\ngit init\ngit remote add -f origin https://github.com/Biometria-se/grizzly.git\ngit sparse-checkout init\ngit sparse-checkout set example/\ngit pull origin main\nrm -rf .git/\ncd example/\n</code></pre> <pre><code>mkdir grizzly-example\ncd .\\grizzly-example\\\ngit init\ngit remote add -f origin https://github.com/Biometria-se/grizzly.git\ngit sparse-checkout init\ngit sparse-checkout set example/\ngit pull origin main\nrm -Recurse -Force .\\.git\\\ncd .\\example\\\n</code></pre> <p>Create an python virtual environment and install dependencies:</p> BashPowerShell <pre><code>python3 -m venv .env\nsource .env/bin/activate\npip3 install -r requirements.txt\npip3 install grizzly-loadtester-cli\n</code></pre> <pre><code>python3 -m venv .env\n.\\.env\\Scripts\\activate\npip3 install -r .\\requirements.txt\npip3 install grizzly-loadtester-cli\n</code></pre> <p>If you do not already have an working \"IBM MQ\" client setup and run <code>grizzly-cli</code> in local mode you will not be able to use <code>MessageQueueUser</code>. See <code>grizzly-cli/static/Containerfile</code> on how to get these. When that is done you need to install the extra dependencies:</p> <pre><code>pip3 install grizzly-loadtester[mq]\n</code></pre>"},{"location":"example/#run","title":"Run","text":"<p><code>grizzly</code> has some runtime features which is easiliest handled by using the <code>grizzly-cli</code>. It provides a simple command line interface wrapping the <code>behave</code> command, for providing initial variable values, configuration etc.</p> <p>To run the example, in local mode:</p> BashPowerShell <pre><code>grizzly-cli local run -e environments/example.yaml features/example.feature\n</code></pre> <pre><code>grizzly-cli local run -e .\\environments\\example.yaml .\\features\\example.feature\n</code></pre> <p>And in distributed mode (requires <code>docker</code> and <code>docker-compose</code> in <code>PATH</code>):</p> BashPowerShell <pre><code>grizzly-cli dist run -e environments/example.yaml features/example.feature\n</code></pre> <pre><code>grizzly-cli dist run -e .\\environments\\example.yaml .\\features\\example.feature\n</code></pre>"},{"location":"example/#develop","title":"Develop","text":"<p>If you have Visual Studio Code installed, you can also install the grizzly extension to make your life easier when developing scenarios!</p> <pre><code>pip3 install grizzly-loadtester-ls\ncode --install-extension biometria-se.grizzly-loadtester-vscode\n</code></pre>"},{"location":"command-line-interface/changelog/","title":"Changelog","text":""},{"location":"command-line-interface/changelog/#v321","title":"v3.2.1","text":"<ul> <li> <p><code>42403257</code>: fixed E2E tests</p> </li> <li> <p><code>b01702d9</code>: stateless authenticator \"app\"</p> </li> <li> <p><code>6c0a0b61</code>: add support for sub log directories in <code>requests/logs</code></p> </li> </ul>"},{"location":"command-line-interface/changelog/#v320","title":"v3.2.0","text":"<ul> <li> <p><code>01221bb2</code>: add python 3.11 support (#78)</p> </li> <li> <p><code>ef90eb6d</code>: special case for mac os also in log file</p> </li> <li> <p><code>983cb64e</code>: add run argument to save all output to log file</p> </li> <li> <p><code>c37efac1</code>: fixed node numbering for workers</p> </li> <li> <p><code>ac617717</code>: install wheel package in venv</p> </li> <li> <p><code>12b7747d</code>: prefix missed output with master node name, as it would've been done in the <code>docker compose up</code> output</p> </li> <li> <p><code>e0379bac</code>: do not look for grizzly.returncode= in output</p> </li> <li> <p><code>c0aa586c</code>: wrap results from <code>run_command</code> in a dataclass</p> </li> <li> <p><code>8aa3ea3a</code>: find output that docker compose hide when aborting a dist run</p> </li> <li> <p><code>562ab958</code>: cleaner implementation of handling sig traps</p> </li> <li> <p><code>4f21bf37</code>: add signal handler that terminates process</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v318","title":"v3.1.8","text":"<ul> <li> <p><code>b43f5c6b</code>: added missing e2e test for Biometria-se/grizzly#232 (#75)</p> </li> <li> <p><code>48064a43</code>: fixes Biometria-se/grizzly#232 (#74)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v317","title":"v3.1.7","text":"<ul> <li> <p><code>0ed37c06</code>: do not create a default requirements.txt if it doesn't exist</p> </li> <li> <p><code>633fb212</code>: use compose v2 via <code>docker compose</code> instead of <code>docker-compose</code> (#72)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v316","title":"v3.1.6","text":"<ul> <li> <p><code>f193a1e3</code>: pip-licenses 4.2.0 is broken, exclude (#71)</p> </li> <li> <p><code>89abf922</code>: change constraints for tomli dependency to avoid dependency problems with other dependencies</p> </li> <li> <p><code>6ab6be02</code>: removed duplicated packaging dependency</p> </li> <li> <p><code>ad49973b</code>: colima docker install needs buildx plugin</p> </li> <li> <p><code>c3a65880</code>: fixed mypy errors, due to updated mypy version</p> </li> <li> <p><code>78e0b36b</code>: adaptations for Biometria-se/grizzly#205.</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v315","title":"v3.1.5","text":"<ul> <li> <p><code>08d9fb08</code>: fixes Biometria-se/grizzly#186</p> </li> <li> <p><code>7cbcc531</code>: Update README.md</p> </li> <li> <p><code>81484ea7</code>: updated action versions to get rid of warnings (#66)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v314","title":"v3.1.4","text":"<ul> <li><code>0cfd9e9f</code>: implemented support for <code>--csv*</code> arguments (#65)</li> </ul>"},{"location":"command-line-interface/changelog/#v313","title":"v3.1.3","text":"<ul> <li><code>e211442c</code>: grizzly support templating for user weight</li> </ul>"},{"location":"command-line-interface/changelog/#v312","title":"v3.1.2","text":"<ul> <li><code>8c7b8915</code>: annotate notices in feature metadata (comments) that grizzly-cli will show</li> </ul>"},{"location":"command-line-interface/changelog/#v311","title":"v3.1.1","text":"<ul> <li> <p><code>4df22703</code>: check for return code in command output</p> </li> <li> <p><code>da9c0f0d</code>: add <code>wheel</code> as dev dependency</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v310","title":"v3.1.0","text":"<ul> <li> <p><code>f0a6b13b</code>: fixed copy-paste error in publish package step</p> </li> <li> <p><code>40b83dc5</code>: fixed indentation for inputs in release workflow (#61)</p> </li> <li> <p><code>34235b59</code>: fixed warnings from coverage when running e2e tests (#60)</p> </li> <li> <p><code>771eb3e1</code>: implementation of issue #159</p> </li> <li> <p><code>a9f6982c</code>: ::set-output deprecated (#58)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v3011","title":"v3.0.11","text":"<ul> <li> <p><code>159b313a</code>: v3.0.10 comes after v3.0.1, so latest is v3.0.9 (lexicographic order) -- use <code>sort -r --version-sort</code> (#57)</p> </li> <li> <p><code>5404d7ae</code>: assume a remote branch if git cat-file fails</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v3010","title":"v3.0.10","text":"<ul> <li> <p><code>fb1f2608</code>: set LANG and LC_ALL to C.UTF-8 instead of C</p> </li> <li> <p><code>bdd0f7a3</code>: improved grizzly version crawling</p> </li> <li> <p><code>238a989c</code>: oooh man... encoding on the windows-latest runner :S</p> </li> <li> <p><code>924486e6</code>: make End2EndFixture windows compatible</p> </li> <li> <p><code>35b3b18b</code>: remove user and group in grizzly image, if they exists</p> </li> <li> <p><code>f2f20240</code>: update versions of github actions checkout and setup-python</p> </li> <li> <p><code>bf4050e2</code>: e2e test of grizzly-cli init</p> </li> <li> <p><code>e96ee349</code>: e2e test for grizzly init</p> </li> <li> <p><code>9af2236c</code>: restructure of tests and added e2e tests</p> </li> <li> <p><code>0032002c</code>: fixed unit tests for windows</p> </li> <li> <p><code>086df974</code>: optimization of listing files for bash completion</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v309","title":"v3.0.9","text":"<ul> <li><code>d91ba37e</code>: workdir changed, correct entrypoint script path (#51)</li> </ul>"},{"location":"command-line-interface/changelog/#v308","title":"v3.0.8","text":"<ul> <li> <p><code>61f8699e</code>: simplified format_text for md-help (#50)</p> </li> <li> <p><code>13c3e809</code>: set workdir to /srv/grizzly</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v307","title":"v3.0.7","text":"<ul> <li> <p><code>84590d5c</code>: implementation of grizzly-cli dist clean (#48)</p> </li> <li> <p><code>05c628fb</code>: changes for being able to use in E2E tests (#47)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v306","title":"v3.0.6","text":"<ul> <li> <p><code>215522a1</code>: possibility to inject grizzly-cli command arguments via metadata specified in feature file</p> </li> <li> <p><code>140f7484</code>: argument to increase how long the master will wait for worker report</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v305","title":"v3.0.5","text":"<ul> <li><code>7c3bb2f6</code>: change version of IBM MQ Redist, and allow it to be overriden</li> </ul>"},{"location":"command-line-interface/changelog/#v304","title":"v3.0.4","text":"<ul> <li><code>75690e56</code>: pkg-resources is some kind of meta package, ignore in license table (#44)</li> </ul>"},{"location":"command-line-interface/changelog/#v303","title":"v3.0.3","text":"<ul> <li><code>6df5c857</code>: update script that generates licenses information (#43)</li> </ul>"},{"location":"command-line-interface/changelog/#v302","title":"v3.0.2","text":"<ul> <li><code>bb270a82</code>: changed <code>grizzly_cli.SCENARIOS</code> to a list to get guaranteed insertion order (#42)</li> </ul>"},{"location":"command-line-interface/changelog/#v301","title":"v3.0.1","text":"<ul> <li> <p><code>df5a4902</code>: --yes argument to automagically answer yes on any questions</p> </li> <li> <p><code>0b57d739</code>: subcommand is not set for command <code>init</code></p> </li> <li> <p><code>43ccba6b</code>: do not sort scenarios by name, iterate in the order they are defined</p> </li> <li> <p><code>dd4b5e7b</code>: adaptations for Biometria-se/grizzly#71</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v300","title":"v3.0.0","text":"<ul> <li> <p><code>267ee8df</code>: restructuring commands</p> </li> <li> <p><code>c1170417</code>: step expression for number of users can be singular (#37)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v216","title":"v2.1.6","text":"<ul> <li> <p><code>803b3f3a</code>: users per scenario is calculated incorrectly (#36)</p> </li> <li> <p><code>065b1e5c</code>: documentation of IBM_MQ_LIB_HOST environment variable (#35)</p> </li> <li> <p><code>e73174b2</code>: make sure that it is possible to generate licenses documentation (#34)</p> </li> <li> <p><code>a574b5c4</code>: github action action-push-tag@v1 is broken (#33)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v215","title":"v2.1.5","text":"<ul> <li> <p><code>e3eb9073</code>: no smoothed timeline in test summary</p> </li> <li> <p><code>2d706e0f</code>: --add-host if overridden IBM_MQ_LIB_HOST is using host.docker.internal (#31)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v214","title":"v2.1.4","text":"<ul> <li> <p><code>220924f6</code>: fix failing tests</p> </li> <li> <p><code>45fc7718</code>: possible to override host where IBM MQ lib redist package should be downloaded from</p> </li> <li> <p><code>d34ebbf8</code>: script for generating a license summary (#29)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v213","title":"v2.1.3","text":"<ul> <li> <p><code>49116c42</code>: check if container image should be built with or without mq libraries</p> </li> <li> <p><code>50ec4869</code>: check if grizzly-loadtester is installed with any extras</p> </li> <li> <p><code>447f677e</code>: Containerfile updated to have MQ libraries as optional</p> </li> <li> <p><code>64b2131a</code>: unable to use cache functionality of setup-python@v2</p> </li> <li> <p><code>241bdb22</code>: fix for Biometria-se/grizzly#73</p> </li> <li> <p><code>340cfd18</code>: only run code quality workflow on 3.10 on windows</p> </li> <li> <p><code>e11c1b09</code>: docker-compose v2 and v1 compatible in instructions</p> </li> <li> <p><code>1db75e0b</code>: base on 3.10-slim instead of alpine</p> </li> <li> <p><code>a7dc5ce6</code>: add --no-tty argument to run dist</p> </li> <li> <p><code>8d3d83ee</code>: more dynamic creation of sub command parsers</p> </li> <li> <p><code>03652ae8</code>: build package based on metadata only</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v212","title":"v2.1.2","text":"<ul> <li><code>344bc53b</code>: remove debug prints that fell through quality control</li> </ul>"},{"location":"command-line-interface/changelog/#v211","title":"v2.1.1","text":"<ul> <li><code>d41cde5c</code>: added missing dependency (#24)</li> </ul>"},{"location":"command-line-interface/changelog/#v210","title":"v2.1.0","text":"<ul> <li> <p><code>4feb4ec5</code>: build grizzly container image based on locust container image version that the project depends on</p> </li> <li> <p><code>4e3ec441</code>: implementation of getting dependencies version</p> </li> <li> <p><code>4ffc4535</code>: WIP: get grizzly and locust version from project</p> </li> <li> <p><code>64b5eaef</code>: Feature/spring 2022 cleanup (#22)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v204","title":"v2.0.4","text":"<ul> <li><code>c9c0c24b</code>: fix tty size in container (#20)</li> </ul>"},{"location":"command-line-interface/changelog/#v203","title":"v2.0.3","text":"<ul> <li><code>234e9c05</code>: getattr retrives value of registry in args, but if it is None (#19)</li> </ul>"},{"location":"command-line-interface/changelog/#v202","title":"v2.0.2","text":"<ul> <li> <p><code>37da0e73</code>: Feature/build parser (#18)</p> </li> <li> <p><code>7c64bd0b</code>: added arguments for controlling compose health checks (#17)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v201","title":"v2.0.1","text":"<ul> <li><code>83b08112</code>: build broken for 2.0.0 (#16)</li> </ul>"},{"location":"command-line-interface/changelog/#v200","title":"v2.0.0","text":"<ul> <li> <p><code>d624baa7</code>: Feature/run windows 57 (#15)</p> </li> <li> <p><code>f20dccfa</code>: too greedy gitignore rule resulted in missing new workflow (#14)</p> </li> <li> <p><code>724bd70e</code>: Feature/argument refactor (#13)</p> </li> <li> <p><code>97ab0e45</code>: refreshed devcontainer (#12)</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v111","title":"v1.1.1","text":"<ul> <li><code>ae46c7a6</code>: do not expose locust webui port (8089) in compose file (#11)</li> </ul>"},{"location":"command-line-interface/changelog/#v110","title":"v1.1.0","text":"<ul> <li><code>9be8b64b</code>: Feature/validate iterations prompt (#10)</li> </ul>"},{"location":"command-line-interface/changelog/#v109","title":"v1.0.9","text":"<ul> <li><code>2cd470ae</code>: remove locust user (uid 1000) when building grizzly container image (#9)</li> </ul>"},{"location":"command-line-interface/changelog/#v108","title":"v1.0.8","text":"<ul> <li><code>cca24c6b</code>: create a user with uid/gid matching user that executes grizzly-cli (#8)</li> </ul>"},{"location":"command-line-interface/changelog/#v107","title":"v1.0.7","text":"<ul> <li><code>4bee4c7b</code>: get IBM MQ client logs when running distributed (#7)</li> </ul>"},{"location":"command-line-interface/changelog/#v106","title":"v1.0.6","text":"<ul> <li><code>746d7219</code>: expose internal environment variables in execution context (#6)</li> </ul>"},{"location":"command-line-interface/changelog/#v105","title":"v1.0.5","text":"<ul> <li><code>824f163d</code>: lock locust image version to version of locust used by grizzly</li> </ul>"},{"location":"command-line-interface/changelog/#v104","title":"v1.0.4","text":"<ul> <li><code>f8fd5c9d</code>: ask for value expression can have more than one keyword (#5)</li> </ul>"},{"location":"command-line-interface/changelog/#v103","title":"v1.0.3","text":"<ul> <li> <p><code>c0eacc1a</code>: set MTU in docker-compose network to the same value as the default bridge has</p> </li> <li> <p><code>964e6993</code>: updated pylint configuration</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v102","title":"v1.0.2","text":"<ul> <li> <p><code>0d5ec1ba</code>: also get tags</p> </li> <li> <p><code>ffd52159</code>: change development version to 0.0.0</p> </li> </ul>"},{"location":"command-line-interface/changelog/#v101","title":"v1.0.1","text":"<ul> <li><code>7fc1fa1b</code>: set ulimit nofile to min recommended value for locust</li> </ul>"},{"location":"command-line-interface/licenses/","title":"Licenses","text":""},{"location":"command-line-interface/licenses/#the-mit-license-mit","title":"The MIT License (MIT)","text":"<p>Copyright \u00a9 2021 Biometria Ekonomiska F\u00f6rening</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"command-line-interface/licenses/#third-party-licenses","title":"Third party licenses","text":""},{"location":"command-line-interface/licenses/#python-dependencies","title":"Python dependencies","text":"Name Version License coverage 6.5.0 Apache Software License requests 2.31.0 Apache Software License requests-mock 1.11.0 Apache Software License tornado 6.3.3 Apache Software License types-PyYAML 6.0.12.11 Apache Software License types-requests 2.31.0.2 Apache Software License types-urllib3 1.26.25.14 Apache Software License packaging 23.1 Apache Software License; BSD License python-dateutil 2.8.2 Apache Software License; BSD License Flask 2.0.3 BSD License Jinja2 3.1.2 BSD License MarkupSafe 2.1.3 BSD License Werkzeug 2.3.7 BSD License behave 1.2.6 BSD License click 8.1.7 BSD License dill 0.3.7 BSD License idna 3.4 BSD License itsdangerous 2.1.2 BSD License lazy-object-proxy 1.9.0 BSD License line-profiler 4.1.1 BSD License snakeviz 2.2.0 BSD License wrapt 1.15.0 BSD License pytest-timeout 2.1.0 DFSG approved; MIT License pylint 2.17.5 GNU General Public License v2 (GPLv2) astroid 2.15.6 GNU Lesser General Public License v2 (LGPLv2) chardet 4.0.0 GNU Library or Lesser General Public License (LGPL) DataProperty 1.0.1 MIT License Flake8-pyproject 1.2.3 MIT License PyYAML 6.0.1 MIT License atomicwrites 1.4.1 MIT License charset-normalizer 3.2.0 MIT License flake8 6.1.0 MIT License gevent 23.9.1 MIT License greenlet 3.0.0rc3 MIT License iniconfig 2.0.0 MIT License isort 5.12.0 MIT License mbstrdecoder 1.1.3 MIT License mccabe 0.7.0 MIT License mypy 1.0.0 MIT License mypy-extensions 1.0.0 MIT License parse 1.19.1 MIT License parse-type 0.6.2 MIT License pathvalidate 3.1.0 MIT License platformdirs 3.10.0 MIT License pluggy 1.3.0 MIT License pycodestyle 2.11.0 MIT License pyflakes 3.1.0 MIT License pyotp 2.9.0 MIT License pytablewriter 1.0.0 MIT License pytest 7.4.2 MIT License pytest-cov 4.1.0 MIT License pytest-mock 3.11.1 MIT License pytz 2023.3.post1 MIT License setuptools-scm 7.1.0 MIT License six 1.16.0 MIT License tabledata 1.3.1 MIT License tcolorpy 0.1.3 MIT License tomli 2.0.1 MIT License tomlkit 0.12.1 MIT License typepy 1.3.1 MIT License urllib3 2.0.4 MIT License certifi 2023.7.22 Mozilla Public License 2.0 (MPL 2.0) typing_extensions 4.7.1 Python Software Foundation License zope.event 5.0 Zope Public License"},{"location":"command-line-interface/usage/","title":"Usage","text":""},{"location":"command-line-interface/usage/#grizzly-cli","title":"<code>grizzly-cli</code>","text":"<p>the command line interface for grizzly, which makes it easer to start a test with all features of grizzly wrapped up nicely.</p> <p>installing it is a matter of:</p> <pre><code>pip install grizzly-loadtester-cli\n</code></pre> <p>enable bash completion by adding the following to your shell profile:</p> <pre><code>eval \"$(grizzly-cli --bash-completion)\"\n</code></pre>"},{"location":"command-line-interface/usage/#usage","title":"Usage","text":"<pre><code>grizzly-cli [-h] [--version [{all}]] {init,local,dist,auth} ...\n</code></pre>"},{"location":"command-line-interface/usage/#positional-arguments","title":"Positional arguments","text":"argument default help <code>command</code>"},{"location":"command-line-interface/usage/#optional-arguments","title":"Optional arguments","text":"argument default help <code>--version</code> print version of command line interface, and exit. add argument <code>all</code> to getversions of dependencies"},{"location":"command-line-interface/usage/#grizzly-cli-init","title":"<code>grizzly-cli init</code>","text":"<p>create a skeleton project with required structure and files.</p>"},{"location":"command-line-interface/usage/#usage_1","title":"Usage","text":"<pre><code>grizzly-cli init [-h] [--grizzly-version GRIZZLY_VERSION] [--with-mq] [-y]\nproject\n</code></pre>"},{"location":"command-line-interface/usage/#positional-arguments_1","title":"Positional arguments","text":"argument default help <code>project</code> project name, a directory will be created with this name"},{"location":"command-line-interface/usage/#optional-arguments_1","title":"Optional arguments","text":"argument default help <code>--grizzly-version</code> specify which grizzly version to use for project, default is latest <code>--with-mq</code> <code>False</code> if grizzly should be installed with IBM MQ support (external dependenciesexcluded) <code>-y, --yes</code> <code>False</code> automagically answer yes on any questions"},{"location":"command-line-interface/usage/#grizzly-cli-local","title":"<code>grizzly-cli local</code>","text":"<p>commands for running grizzly in local mode.</p>"},{"location":"command-line-interface/usage/#usage_2","title":"Usage","text":"<pre><code>grizzly-cli local [-h] {run} ...\n</code></pre>"},{"location":"command-line-interface/usage/#positional-arguments_2","title":"Positional arguments","text":"argument default help <code>subcommand</code>"},{"location":"command-line-interface/usage/#grizzly-cli-local-run","title":"<code>grizzly-cli local run</code>","text":"<p>execute load test scenarios specified in a feature file.</p>"},{"location":"command-line-interface/usage/#usage_3","title":"Usage","text":"<pre><code>grizzly-cli local run [-h] [--verbose] [-T TESTDATA_VARIABLE] [-y]\n[-e ENVIRONMENT_FILE] [--csv-prefix [CSV_PREFIX]]\n[--csv-interval CSV_INTERVAL]\n[--csv-flush-interval CSV_FLUSH_INTERVAL] [-l LOG_FILE]\n[--log-dir LOG_DIR]\nfile [file ...]\n</code></pre>"},{"location":"command-line-interface/usage/#positional-arguments_3","title":"Positional arguments","text":"argument default help <code>file</code> path to feature file with one or more scenarios"},{"location":"command-line-interface/usage/#optional-arguments_2","title":"Optional arguments","text":"argument default help <code>--verbose</code> <code>False</code> changes the log level to <code>DEBUG</code>, regardless of what it says in the featurefile. gives more verbose logging that can be useful when troubleshooting aproblem with a scenario. <code>-T, --testdata-variable</code> specified in the format <code>&lt;name&gt;=&lt;value&gt;</code>. avoids being asked for an initialvalue for a scenario variable. <code>-y, --yes</code> <code>False</code> answer yes on any questions that would require confirmation <code>-e, --environment-file</code> configuration file with environment specificinformation <code>--csv-prefix</code> write log statistics to CSV files with specified prefix, if no value isspecified the description of the gherkin Feature tag will be used, suffixed withtimestamp <code>--csv-interval</code> interval that statistics is collected for CSV files, can only be used incombination with <code>--csv-prefix</code> <code>--csv-flush-interval</code> interval that CSV statistics is flushed to disk, can only be used in combinationwith <code>--csv-prefix</code> <code>-l, --log-file</code> save all <code>grizzly-cli</code> run output in specified log file <code>--log-dir</code> log directory suffix (relative to <code>requests/logs</code>) to save log files generatedin a scenario"},{"location":"command-line-interface/usage/#grizzly-cli-dist","title":"<code>grizzly-cli dist</code>","text":"<p>commands for running grizzly i distributed mode.</p>"},{"location":"command-line-interface/usage/#usage_4","title":"Usage","text":"<pre><code>grizzly-cli dist [-h] [--workers WORKERS] [--id ID]\n[--limit-nofile LIMIT_NOFILE]\n[--health-retries HEALTH_RETRIES]\n[--health-timeout HEALTH_TIMEOUT]\n[--health-interval HEALTH_INTERVAL] [--registry REGISTRY]\n[--tty] [--wait-for-worker WAIT_FOR_WORKER]\n[--project-name PROJECT_NAME]\n[--force-build | --build | --validate-config]\n{build,clean,run} ...\n</code></pre>"},{"location":"command-line-interface/usage/#positional-arguments_4","title":"Positional arguments","text":"argument default help <code>subcommand</code>"},{"location":"command-line-interface/usage/#optional-arguments_3","title":"Optional arguments","text":"argument default help <code>--workers</code> <code>1</code> how many instances of the <code>workers</code> container that should be created <code>--id</code> unique identifier suffixed to compose project, should be used when the same userneeds to run more than one instance of <code>grizzly-cli</code> <code>--limit-nofile</code> <code>10001</code> set system limit \"number of open files\" <code>--health-retries</code> <code>3</code> set number of retries for health check of master container <code>--health-timeout</code> <code>3</code> set timeout in seconds for health check of master container <code>--health-interval</code> <code>5</code> set interval in seconds between health checks of master container <code>--registry</code> push built image to this registry, if the registry has authentication you needto login first <code>--tty</code> <code>False</code> start containers with a TTY enabled <code>--wait-for-worker</code> sets enviroment variable LOCUST_WAIT_FOR_WORKERS_REPORT_AFTER_RAMP_UP, whichtells master to wait this amount of time for worker report <code>--project-name</code> override project name, which otherwise would be the name of the directory wherecommand is executed in <code>--force-build</code> <code>False</code> force rebuild the grizzly projects container image (no cache) <code>--build</code> <code>False</code> rebuild the grizzly projects container images (with cache) <code>--validate-config</code> <code>False</code> validate and print compose project file"},{"location":"command-line-interface/usage/#grizzly-cli-dist-build","title":"<code>grizzly-cli dist build</code>","text":"<p>build grizzly compose project container image before running test. if worker nodes runs on different physical computers, it is mandatory to build the images before hand and push to a registry.</p> <p>if image includes IBM MQ native dependencies, the build time increases due to download times. it is possible to self- host the archive and override the download host with environment variable <code>IBM_MQ_LIB_HOST</code>.</p>"},{"location":"command-line-interface/usage/#usage_5","title":"Usage","text":"<pre><code>grizzly-cli dist build [-h] [--no-cache] [--registry REGISTRY]\n</code></pre>"},{"location":"command-line-interface/usage/#optional-arguments_4","title":"Optional arguments","text":"argument default help <code>--no-cache</code> <code>False</code> build container image with out cache (full build) <code>--registry</code> push built image to this registry, if the registry has authentication you needto login first"},{"location":"command-line-interface/usage/#grizzly-cli-dist-clean","title":"<code>grizzly-cli dist clean</code>","text":"<p>clean all grizzly compose project resources; containers, images, networks and volumes</p>"},{"location":"command-line-interface/usage/#usage_6","title":"Usage","text":"<pre><code>grizzly-cli dist clean [-h] [--no-images] [--no-networks]\n</code></pre>"},{"location":"command-line-interface/usage/#optional-arguments_5","title":"Optional arguments","text":"argument default help <code>--no-images</code> <code>True</code> do not remove images <code>--no-networks</code> <code>True</code> do not remove networks"},{"location":"command-line-interface/usage/#grizzly-cli-dist-run","title":"<code>grizzly-cli dist run</code>","text":"<p>execute load test scenarios specified in a feature file.</p>"},{"location":"command-line-interface/usage/#usage_7","title":"Usage","text":"<pre><code>grizzly-cli dist run [-h] [--verbose] [-T TESTDATA_VARIABLE] [-y]\n[-e ENVIRONMENT_FILE] [--csv-prefix [CSV_PREFIX]]\n[--csv-interval CSV_INTERVAL]\n[--csv-flush-interval CSV_FLUSH_INTERVAL] [-l LOG_FILE]\n[--log-dir LOG_DIR]\nfile [file ...]\n</code></pre>"},{"location":"command-line-interface/usage/#positional-arguments_5","title":"Positional arguments","text":"argument default help <code>file</code> path to feature file with one or more scenarios"},{"location":"command-line-interface/usage/#optional-arguments_6","title":"Optional arguments","text":"argument default help <code>--verbose</code> <code>False</code> changes the log level to <code>DEBUG</code>, regardless of what it says in the featurefile. gives more verbose logging that can be useful when troubleshooting aproblem with a scenario. <code>-T, --testdata-variable</code> specified in the format <code>&lt;name&gt;=&lt;value&gt;</code>. avoids being asked for an initialvalue for a scenario variable. <code>-y, --yes</code> <code>False</code> answer yes on any questions that would require confirmation <code>-e, --environment-file</code> configuration file with environment specificinformation <code>--csv-prefix</code> write log statistics to CSV files with specified prefix, if no value isspecified the description of the gherkin Feature tag will be used, suffixed withtimestamp <code>--csv-interval</code> interval that statistics is collected for CSV files, can only be used incombination with <code>--csv-prefix</code> <code>--csv-flush-interval</code> interval that CSV statistics is flushed to disk, can only be used in combinationwith <code>--csv-prefix</code> <code>-l, --log-file</code> save all <code>grizzly-cli</code> run output in specified log file <code>--log-dir</code> log directory suffix (relative to <code>requests/logs</code>) to save log files generatedin a scenario"},{"location":"command-line-interface/usage/#grizzly-cli-auth","title":"<code>grizzly-cli auth</code>","text":"<p>grizzly stateless authenticator application</p>"},{"location":"command-line-interface/usage/#usage_8","title":"Usage","text":"<pre><code>grizzly-cli auth [-h] [input]\n</code></pre>"},{"location":"command-line-interface/usage/#positional-arguments_6","title":"Positional arguments","text":"argument default help <code>input</code> where to read OTP secret, nothing specified means environment variableOTP_SECRET, <code>-</code> means stdin and anything else is considered a file"},{"location":"command-line-interface/usage/metadata/","title":"Metadata","text":""},{"location":"command-line-interface/usage/metadata/#metadata","title":"Metadata","text":"<p>It is possible to add metadata in feature files that <code>grizzly-cli</code> will use. Metadata comments can be added anywhere in the feature file, but it is recommended to add them in the top for readability.</p>"},{"location":"command-line-interface/usage/metadata/#arguments","title":"Arguments","text":"<p>Inject <code>grizzly-cli</code> arguments via metadata comments. When executing a feature file, <code>grizzly-cli</code> will add the specified arguments automagically, if they match the command being executed.</p> <p>This makes it possible to add arguments needed for a specific feature file to be documented in the feature file itself, and one does not have to remember all combinations in memory.</p>"},{"location":"command-line-interface/usage/metadata/#format","title":"Format","text":"<pre><code># grizzly-cli &lt;[sub]parser&gt; &lt;argument&gt;\n</code></pre> <p>No validation is done that an argument actually exists in the subparser, other than that <code>grizzly-cli</code> will fail with an argument error. Which is solved by checking Usage and correct the metadata comments.</p>"},{"location":"command-line-interface/usage/metadata/#examples","title":"Examples","text":"<p>E.g., the <code>run</code> subparser is used by both <code>dist</code> and <code>local</code>, so when specifying an metadata comment for <code>run</code> arguments it should be:</p> example.feature<pre><code># grizzly-cli run --verbose\nFeature: Example Feature\nScenario: Example Scenario\n    ...\n</code></pre> <p>This means that executing <code>example.feature</code> either in mode <code>local</code> or <code>dist</code>, the argument <code>--verbose</code> will be injected unless already manually specified.</p> <pre><code>grizzly-cli local run example.feature -&gt; grizzly-cli local run example.feature --verbose\ngrizzly-cli dist run example.feature -&gt; grizzly-cli dist run example.feature --verbose\n</code></pre> <p>If metadata comments adds arguments for a subparser that is not used when executing the feature file the following message will be seen when executing <code>grizzly-cli</code>:</p> <pre><code>?? ignoring &lt;arguments&gt;\n</code></pre> <p>Given the following feature file:</p> example-dist.feature<pre><code># grizzly-cli dist --health-retries 999\n# grizzly-cli dist --workers 6\n# grizzly-cli run --verbose\nFeature: Example Feature\nScenario: Example Scenario\n    ...\n</code></pre> <p>When executed with <code>grizzly-cli local run example-dist.feature</code>, the output will contain:</p> <pre><code>?? ignoring dist --health-retries 999\n?? ignoring dist --workers 6\n</code></pre> <p>And the command that is actually executed is <code>grizzly local run example-dist.feature --verbose</code>.</p>"},{"location":"command-line-interface/usage/metadata/#notices","title":"Notices","text":"<p>It is possible to tell <code>grizzly-cli</code> show confirmation notices with metadata in a a feature file.</p> <p>This is useful to remind the user about manual steps och checks that should be done before running the feature.</p>"},{"location":"command-line-interface/usage/metadata/#format_1","title":"Format","text":"<pre><code># grizzly-cli:notice &lt;message&gt;\n</code></pre> <p>Everything after <code># grizzly-cli:notice</code> (notice the space) will be displayed in the confirmation prompt.</p>"},{"location":"command-line-interface/usage/metadata/#examples_1","title":"Examples","text":"example.feature<pre><code># grizzly-cli:notice have you piped the fork in a loop?\nFeature: Example Feature\nScenario: Example Scenario\n    ...\n</code></pre> <p>Running <code>example.feature</code> will in additional to the normal <code>grizzly-cli</code> input/output also trigger the following prompt:</p> <pre><code>have you piped the fork in a loop? [y/n]\n</code></pre> <p>If <code>run</code> argument <code>-y/--yes</code> is provided, it will only print the message and not ask for confirmation.</p>"},{"location":"editor-support/","title":"Editor support","text":"<p>It can be hard to remember all the step expressions by heart; that's why <code>grizzly-ls</code> exists! Which is a server implementation of LSP<sup>1</sup>, providing auto-complete of step expressions.</p> <p>The server does not do much by itself, you have to install a client/extension that speaks LSP for your editor.</p> <ol> <li> <p>The Language Server Protocol (LSP) defines the protocol used between an editor or IDE and a language server that provides language features like auto complete, go to definition, find all references etc. The goal of the Language Server Index Format (LSIF, pronounced like \"else if\") is to support rich code navigation in development tools or a Web UI without needing a local copy of the source code. Read more \u21a9</p> </li> </ol>"},{"location":"editor-support/changelog/","title":"Changelog","text":""},{"location":"editor-support/changelog/#v101","title":"v1.0.1","text":"<ul> <li> <p><code>47629704</code>: Bump json5 from 1.0.1 to 1.0.2 in /client/vscode (#29)</p> </li> <li> <p><code>d0293d8a</code>: pip-licenses 4.2.0 is broken, exclude (#32)</p> </li> <li> <p><code>24018074</code>: fixes Biometria-se/grizzly#220 (#31)</p> </li> <li> <p><code>85e7a37b</code>: refreshed devcontainer, so it builds (#30)</p> </li> </ul>"},{"location":"editor-support/changelog/#v100","title":"v1.0.0","text":"<ul> <li><code>e174a6d7</code>: upgrade to pygls 1.0.0 (#28)</li> </ul>"},{"location":"editor-support/changelog/#v009","title":"v0.0.9","text":"<ul> <li><code>08f3a4f6</code>: updated action versions to get rid of warnings (#27)</li> </ul>"},{"location":"editor-support/changelog/#v008","title":"v0.0.8","text":"<ul> <li> <p><code>1ca7171d</code>: return snippet strings for step expressions containing variables (#26)</p> </li> <li> <p><code>29c03082</code>: step completion improvements (#25)</p> </li> </ul>"},{"location":"editor-support/changelog/#v007","title":"v0.0.7","text":"<ul> <li> <p><code>b082f8af</code>: fix hover help for alias step keywords (#24)</p> </li> <li> <p><code>abb3c607</code>: provide <code>name</code> and <code>version</code> in <code>LanguageServer</code> constructor (#23)</p> </li> </ul>"},{"location":"editor-support/changelog/#v006","title":"v0.0.6","text":"<ul> <li><code>a4f553ed</code>: only try to find help text if keyword is valid (#22)</li> </ul>"},{"location":"editor-support/changelog/#v005","title":"v0.0.5","text":"<ul> <li> <p><code>0b734bc1</code>: map step implementation docs to correct normalized step expression (#21)</p> </li> <li> <p><code>71e5773c</code>: add link to vscode marketplace in extension readme (#20)</p> </li> </ul>"},{"location":"editor-support/changelog/#v004","title":"v0.0.4","text":"<ul> <li> <p><code>b658074b</code>: help on hover (#19)</p> </li> <li> <p><code>82fbd485</code>: packages metadata (#18)</p> </li> </ul>"},{"location":"editor-support/changelog/#v003","title":"v0.0.3","text":"<ul> <li> <p><code>375eb605</code>: client vscode icon (#17)</p> </li> <li> <p><code>5d3e3da8</code>: documentation and bugs (#16)</p> </li> <li> <p><code>1c913841</code>: added missing project description (#15)</p> </li> </ul>"},{"location":"editor-support/changelog/#v002","title":"v0.0.2","text":"<ul> <li> <p><code>38ada912</code>: metadata update (#14)</p> </li> <li> <p><code>1de67efc</code>: action-push-tag@v1 is broken (#13)</p> </li> </ul>"},{"location":"editor-support/language-server/","title":"grizzly-ls","text":"<p>This is the LSP server implementation for Visual Studio Code extension <code>biometria-se.grizzly-loadtester-vscode</code>.</p> <p>It provides the logic for auto-completion of step expressions for your <code>grizzly-loadtester</code> project.</p> <p>Big shout out to <code>pygls</code> for making the implementation of a LSP server easy!</p>"},{"location":"editor-support/licenses/","title":"Licenses","text":""},{"location":"editor-support/licenses/#the-mit-license-mit","title":"The MIT License (MIT)","text":"<p>Copyright \u00a9 2021 Biometria Ekonomiska F\u00f6rening</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"editor-support/licenses/#third-party-licenses","title":"Third party licenses","text":""},{"location":"editor-support/licenses/#server","title":"Server","text":"Name Version License protobuf 4.24.3 3-Clause BSD License PyNaCl 1.5.0 Apache License 2.0 bcrypt 4.0.1 Apache Software License coverage 7.3.1 Apache Software License deprecation 2.1.0 Apache Software License google-api-core 2.11.1 Apache Software License google-auth 2.23.0 Apache Software License googleapis-common-protos 1.60.0 Apache Software License janus 1.0.0 Apache Software License jsonpath-ng 1.6.0 Apache Software License msgpack 1.0.5 Apache Software License opencensus 0.11.2 Apache Software License opencensus-context 0.1.3 Apache Software License opencensus-ext-azure 1.1.9 Apache Software License pygls 1.0.2 Apache Software License requests 2.31.0 Apache Software License requests-unixsocket 0.3.0 Apache Software License rsa 4.9 Apache Software License types-requests 2.31.0.2 Apache Software License types-urllib3 1.26.25.14 Apache Software License tzdata 2023.3 Apache Software License cryptography 41.0.3 Apache Software License; BSD License packaging 23.1 Apache Software License; BSD License python-dateutil 2.8.2 Apache Software License; BSD License PySocks 1.7.1 BSD ply 3.11 BSD Flask 2.3.3 BSD License Flask-BasicAuth 0.2.0 BSD License Jinja2 3.1.2 BSD License MarkupSafe 2.1.3 BSD License Werkzeug 2.3.7 BSD License behave 1.2.6 BSD License click 8.1.7 BSD License dill 0.3.7 BSD License idna 3.4 BSD License isodate 0.6.1 BSD License itsdangerous 2.1.2 BSD License lazy-object-proxy 1.9.0 BSD License lxml 4.9.3 BSD License psutil 5.9.5 BSD License pyasn1 0.5.0 BSD License pyasn1-modules 0.3.0 BSD License pycparser 2.21 BSD License setproctitle 1.3.2 BSD License wrapt 1.15.0 BSD License pyzmq 25.1.1 BSD License; GNU Library or Lesser General Public License (LGPL) portalocker 2.7.0 BSD-3-Clause pytest-timeout 2.1.0 DFSG approved; MIT License paho-mqtt 1.6.1 Eclipse Public License v2.0 / Eclipse Distribution License v1.0 pylint 2.17.5 GNU General Public License v2 (GPLv2) astroid 2.15.6 GNU Lesser General Public License v2 (LGPLv2) chardet 5.2.0 GNU Lesser General Public License v2 or later (LGPLv2+) paramiko 3.3.1 GNU Library or Lesser General Public License (LGPL) geventhttpclient 2.0.10 MIT Brotli 1.1.0 MIT License ConfigArgParse 1.7 MIT License DataProperty 1.0.1 MIT License Flake8-pyproject 1.2.3 MIT License Flask-Cors 4.0.0 MIT License PyJWT 2.8.0 MIT License PyYAML 6.0.1 MIT License attrs 23.1.0 MIT License azure-core 1.29.4 MIT License azure-identity 1.14.0 MIT License azure-iot-device 2.12.0 MIT License azure-servicebus 7.9.0 MIT License azure-storage-blob 12.18.1 MIT License black 23.9.1 MIT License blinker 1.6.2 MIT License cachetools 5.3.1 MIT License cattrs 23.1.2 MIT License cffi 1.15.1 MIT License charset-normalizer 3.2.0 MIT License flake8 6.1.0 MIT License gevent 23.9.1 MIT License greenlet 3.0.0rc3 MIT License influxdb 5.3.1 MIT License iniconfig 2.0.0 MIT License isort 5.12.0 MIT License locust 2.16.1 MIT License lsprotocol 2023.0.0a3 MIT License mbstrdecoder 1.1.3 MIT License mccabe 0.7.0 MIT License msal 1.24.0 MIT License msal-extensions 1.0.0 MIT License mypy 1.5.1 MIT License mypy-extensions 1.0.0 MIT License parse 1.19.1 MIT License parse-type 0.6.2 MIT License pathvalidate 3.1.0 MIT License platformdirs 3.10.0 MIT License pluggy 1.3.0 MIT License pycodestyle 2.11.0 MIT License pyflakes 3.1.0 MIT License pyotp 2.9.0 MIT License pytablewriter 1.0.0 MIT License pytest 7.4.2 MIT License pytest-cov 4.1.0 MIT License pytest-mock 3.11.1 MIT License pytz 2023.3.post1 MIT License roundrobin 0.0.4 MIT License six 1.16.0 MIT License tabledata 1.3.1 MIT License tcolorpy 0.1.3 MIT License tomlkit 0.12.1 MIT License typeguard 3.0.2 MIT License typepy 1.3.1 MIT License uamqp 1.6.5 MIT License urllib3 1.26.16 MIT License certifi 2023.7.22 Mozilla Public License 2.0 (MPL 2.0) pathspec 0.11.2 Mozilla Public License 2.0 (MPL 2.0) typing_extensions 4.7.1 Python Software Foundation License zope.event 5.0 Zope Public License"},{"location":"editor-support/licenses/#client","title":"Client","text":""},{"location":"editor-support/licenses/#visual-studio-code","title":"Visual Studio Code","text":"Name Parents Version License @eslint/eslintrc grizzly-loadtester-vscode 1.3.0 MIT @humanwhocodes/config-array grizzly-loadtester-vscode 0.10.4 Apache-2.0 @humanwhocodes/gitignore-to-minimatch grizzly-loadtester-vscode 1.0.2 Apache-2.0 @humanwhocodes/object-schema grizzly-loadtester-vscode 1.2.1 BSD-3-Clause @nodelib/fs.scandir grizzly-loadtester-vscode 2.1.5 MIT @nodelib/fs.stat grizzly-loadtester-vscode 2.0.5 MIT @nodelib/fs.walk grizzly-loadtester-vscode 1.2.8 MIT @tootallnate/once grizzly-loadtester-vscode 1.1.2 MIT @types/chai grizzly-loadtester-vscode 4.3.3 MIT @types/glob grizzly-loadtester-vscode 8.0.0 MIT @types/json-schema grizzly-loadtester-vscode 7.0.11 MIT @types/json5 grizzly-loadtester-vscode 0.0.29 MIT @types/minimatch grizzly-loadtester-vscode 5.1.2 MIT @types/mocha grizzly-loadtester-vscode 9.1.1 MIT @types/node grizzly-loadtester-vscode 16.11.58 MIT @types/vscode grizzly-loadtester-vscode 1.64.0 MIT @typescript-eslint/eslint-plugin grizzly-loadtester-vscode 5.33.1 MIT @typescript-eslint/parser grizzly-loadtester-vscode 5.33.1 BSD-2-Clause @typescript-eslint/scope-manager grizzly-loadtester-vscode 5.33.1 MIT @typescript-eslint/type-utils grizzly-loadtester-vscode 5.33.1 MIT @typescript-eslint/types grizzly-loadtester-vscode 5.33.1 MIT @typescript-eslint/typescript-estree grizzly-loadtester-vscode 5.33.1 BSD-2-Clause @typescript-eslint/utils grizzly-loadtester-vscode 5.33.1 MIT @typescript-eslint/visitor-keys grizzly-loadtester-vscode 5.33.1 MIT @ungap/promise-all-settled grizzly-loadtester-vscode 1.1.2 ISC @vscode/test-electron grizzly-loadtester-vscode 2.1.2 MIT abbrev grizzly-loadtester-vscode 1.1.1 ISC acorn-jsx grizzly-loadtester-vscode 5.3.2 MIT acorn grizzly-loadtester-vscode 8.8.0 MIT agent-base @vscode/test-electron:grizzly-loadtester-vscode 6.0.2 MIT ajv grizzly-loadtester-vscode 6.12.6 MIT ansi-colors grizzly-loadtester-vscode 4.1.1 MIT ansi-regex has-ansi:grizzly-loadtester-vscode 0.2.1 MIT ansi-regex grizzly-loadtester-vscode 5.0.1 MIT ansi-styles license-checker:grizzly-loadtester-vscode 1.1.0 MIT ansi-styles npm-license-crawler:grizzly-loadtester-vscode 3.2.1 MIT ansi-styles grizzly-loadtester-vscode 4.3.0 MIT anymatch grizzly-loadtester-vscode 3.1.2 ISC argparse grizzly-loadtester-vscode 2.0.1 Python-2.0 array-includes grizzly-loadtester-vscode 3.1.5 MIT array-union grizzly-loadtester-vscode 2.1.0 MIT array.prototype.flat grizzly-loadtester-vscode 1.3.0 MIT asap grizzly-loadtester-vscode 2.0.6 MIT assertion-error grizzly-loadtester-vscode 1.1.0 MIT async grizzly-loadtester-vscode 2.6.4 MIT balanced-match grizzly-loadtester-vscode 1.0.0 MIT big-integer grizzly-loadtester-vscode 1.6.48 Unlicense binary-extensions grizzly-loadtester-vscode 2.2.0 MIT binary grizzly-loadtester-vscode 0.3.0 MIT bluebird grizzly-loadtester-vscode 3.4.7 MIT brace-expansion grizzly-loadtester-vscode 1.1.11 MIT braces grizzly-loadtester-vscode 3.0.2 MIT browser-stdout grizzly-loadtester-vscode 1.3.1 ISC buffer-indexof-polyfill grizzly-loadtester-vscode 1.0.2 MIT buffers grizzly-loadtester-vscode 0.1.1 UNKNOWN builtins grizzly-loadtester-vscode 5.0.1 MIT call-bind grizzly-loadtester-vscode 1.0.2 MIT callsites grizzly-loadtester-vscode 3.1.0 MIT camelcase grizzly-loadtester-vscode 6.3.0 MIT chai grizzly-loadtester-vscode 4.3.6 MIT chainsaw grizzly-loadtester-vscode 0.1.0 MIT/X11 chalk license-checker:grizzly-loadtester-vscode 0.5.1 MIT chalk npm-license-crawler:grizzly-loadtester-vscode 2.4.2 MIT chalk grizzly-loadtester-vscode 4.1.2 MIT check-error grizzly-loadtester-vscode 1.0.2 MIT chokidar grizzly-loadtester-vscode 3.5.3 MIT cliui grizzly-loadtester-vscode 7.0.4 ISC color-convert npm-license-crawler:grizzly-loadtester-vscode 1.9.3 MIT color-convert grizzly-loadtester-vscode 2.0.1 MIT color-name npm-license-crawler:grizzly-loadtester-vscode 1.1.3 MIT color-name grizzly-loadtester-vscode 1.1.4 MIT concat-map grizzly-loadtester-vscode 0.0.1 MIT core-util-is grizzly-loadtester-vscode 1.0.2 MIT cross-spawn grizzly-loadtester-vscode 7.0.3 MIT debug eslint-plugin-import:grizzly-loadtester-vscode 2.6.9 MIT debug eslint-module-utils:grizzly-loadtester-vscode 3.2.7 MIT debug mocha:grizzly-loadtester-vscode 4.3.3 MIT debug grizzly-loadtester-vscode 4.3.4 MIT debuglog grizzly-loadtester-vscode 1.0.1 MIT decamelize grizzly-loadtester-vscode 4.0.0 MIT deep-eql grizzly-loadtester-vscode 3.0.1 MIT deep-is grizzly-loadtester-vscode 0.1.4 MIT define-properties grizzly-loadtester-vscode 1.1.4 MIT dezalgo grizzly-loadtester-vscode 1.0.4 ISC diff grizzly-loadtester-vscode 5.0.0 BSD-3-Clause dir-glob grizzly-loadtester-vscode 3.0.1 MIT doctrine eslint-plugin-import:grizzly-loadtester-vscode 2.1.0 Apache-2.0 doctrine grizzly-loadtester-vscode 3.0.0 Apache-2.0 duplexer2 grizzly-loadtester-vscode 0.1.4 BSD-3-Clause emoji-regex grizzly-loadtester-vscode 8.0.0 MIT es-abstract grizzly-loadtester-vscode 1.20.1 MIT es-shim-unscopables grizzly-loadtester-vscode 1.0.0 MIT es-to-primitive grizzly-loadtester-vscode 1.2.1 MIT esbuild-linux-64 grizzly-loadtester-vscode 0.15.7 MIT esbuild grizzly-loadtester-vscode 0.15.7 MIT escalade grizzly-loadtester-vscode 3.1.1 MIT escape-string-regexp npm-license-crawler:grizzly-loadtester-vscode 1.0.5 MIT escape-string-regexp grizzly-loadtester-vscode 4.0.0 MIT eslint-config-standard-with-typescript grizzly-loadtester-vscode 22.0.0 MIT eslint-config-standard grizzly-loadtester-vscode 17.0.0 MIT eslint-import-resolver-node grizzly-loadtester-vscode 0.3.6 MIT eslint-module-utils grizzly-loadtester-vscode 2.7.4 MIT eslint-plugin-es grizzly-loadtester-vscode 4.1.0 MIT eslint-plugin-import grizzly-loadtester-vscode 2.26.0 MIT eslint-plugin-n grizzly-loadtester-vscode 15.2.4 MIT eslint-plugin-promise grizzly-loadtester-vscode 6.0.0 ISC eslint-scope grizzly-loadtester-vscode 5.1.1 BSD-2-Clause eslint-scope eslint:grizzly-loadtester-vscode 7.1.1 BSD-2-Clause eslint-utils eslint-plugin-es:grizzly-loadtester-vscode 2.1.0 MIT eslint-utils grizzly-loadtester-vscode 3.0.0 MIT eslint-visitor-keys eslint-plugin-es:grizzly-loadtester-vscode 1.3.0 Apache-2.0 eslint-visitor-keys eslint-utils:grizzly-loadtester-vscode 2.1.0 Apache-2.0 eslint-visitor-keys grizzly-loadtester-vscode 3.3.0 Apache-2.0 eslint grizzly-loadtester-vscode 8.22.0 MIT espree grizzly-loadtester-vscode 9.3.3 BSD-2-Clause esquery grizzly-loadtester-vscode 1.4.0 BSD-3-Clause esrecurse grizzly-loadtester-vscode 4.3.0 BSD-2-Clause estraverse grizzly-loadtester-vscode 4.3.0 BSD-2-Clause estraverse esrecurse:grizzly-loadtester-vscode 5.3.0 BSD-2-Clause esutils grizzly-loadtester-vscode 2.0.3 BSD-2-Clause fast-deep-equal grizzly-loadtester-vscode 3.1.3 MIT fast-glob grizzly-loadtester-vscode 3.2.11 MIT fast-json-stable-stringify grizzly-loadtester-vscode 2.1.0 MIT fast-levenshtein grizzly-loadtester-vscode 2.0.6 MIT fastq grizzly-loadtester-vscode 1.13.0 ISC file-entry-cache grizzly-loadtester-vscode 6.0.1 MIT fill-range grizzly-loadtester-vscode 7.0.1 MIT find-up grizzly-loadtester-vscode 5.0.0 MIT flat-cache grizzly-loadtester-vscode 3.0.4 MIT flat grizzly-loadtester-vscode 5.0.2 BSD-3-Clause flatted grizzly-loadtester-vscode 3.2.5 ISC fs.realpath grizzly-loadtester-vscode 1.0.0 ISC fstream grizzly-loadtester-vscode 1.0.12 ISC function-bind grizzly-loadtester-vscode 1.1.1 MIT function.prototype.name grizzly-loadtester-vscode 1.1.5 MIT functional-red-black-tree grizzly-loadtester-vscode 1.0.1 MIT functions-have-names grizzly-loadtester-vscode 1.2.3 MIT get-caller-file grizzly-loadtester-vscode 2.0.5 ISC get-func-name grizzly-loadtester-vscode 2.0.0 MIT get-intrinsic grizzly-loadtester-vscode 1.1.2 MIT get-symbol-description grizzly-loadtester-vscode 1.0.0 MIT github-url-from-git grizzly-loadtester-vscode 1.5.0 MIT github-url-from-username-repo grizzly-loadtester-vscode 1.0.2 BSD-2-Clause glob-parent fast-glob:grizzly-loadtester-vscode 5.1.2 ISC glob-parent grizzly-loadtester-vscode 6.0.2 ISC glob read-package-json:grizzly-loadtester-vscode 5.0.15 ISC glob grizzly-loadtester-vscode 7.2.0 ISC globals grizzly-loadtester-vscode 13.15.0 MIT globby grizzly-loadtester-vscode 11.1.0 MIT graceful-fs read-package-json:grizzly-loadtester-vscode 3.0.12 ISC graceful-fs grizzly-loadtester-vscode 4.2.6 ISC grapheme-splitter grizzly-loadtester-vscode 1.0.4 MIT grizzly-loadtester-vscode 0.0.0 MIT growl grizzly-loadtester-vscode 1.10.5 MIT has-ansi grizzly-loadtester-vscode 0.1.0 MIT has-bigints grizzly-loadtester-vscode 1.0.2 MIT has-flag npm-license-crawler:grizzly-loadtester-vscode 3.0.0 MIT has-flag grizzly-loadtester-vscode 4.0.0 MIT has-property-descriptors grizzly-loadtester-vscode 1.0.0 MIT has-symbols grizzly-loadtester-vscode 1.0.3 MIT has-tostringtag grizzly-loadtester-vscode 1.0.0 MIT has grizzly-loadtester-vscode 1.0.3 MIT he grizzly-loadtester-vscode 1.2.0 MIT http-proxy-agent @vscode/test-electron:grizzly-loadtester-vscode 4.0.1 MIT https-proxy-agent @vscode/test-electron:grizzly-loadtester-vscode 5.0.0 MIT ignore grizzly-loadtester-vscode 5.2.0 MIT import-fresh grizzly-loadtester-vscode 3.3.0 MIT imurmurhash grizzly-loadtester-vscode 0.1.4 MIT inflight grizzly-loadtester-vscode 1.0.6 ISC inherits grizzly-loadtester-vscode 2.0.4 ISC internal-slot grizzly-loadtester-vscode 1.0.3 MIT is-bigint grizzly-loadtester-vscode 1.0.4 MIT is-binary-path grizzly-loadtester-vscode 2.1.0 MIT is-boolean-object grizzly-loadtester-vscode 1.1.2 MIT is-callable grizzly-loadtester-vscode 1.2.4 MIT is-core-module grizzly-loadtester-vscode 2.10.0 MIT is-date-object grizzly-loadtester-vscode 1.0.5 MIT is-extglob grizzly-loadtester-vscode 2.1.1 MIT is-fullwidth-code-point grizzly-loadtester-vscode 3.0.0 MIT is-glob grizzly-loadtester-vscode 4.0.3 MIT is-negative-zero grizzly-loadtester-vscode 2.0.2 MIT is-number-object grizzly-loadtester-vscode 1.0.7 MIT is-number grizzly-loadtester-vscode 7.0.0 MIT is-plain-obj grizzly-loadtester-vscode 2.1.0 MIT is-regex grizzly-loadtester-vscode 1.1.4 MIT is-shared-array-buffer grizzly-loadtester-vscode 1.0.2 MIT is-string grizzly-loadtester-vscode 1.0.7 MIT is-symbol grizzly-loadtester-vscode 1.0.4 MIT is-unicode-supported grizzly-loadtester-vscode 0.1.0 MIT is-weakref grizzly-loadtester-vscode 1.0.2 MIT isarray grizzly-loadtester-vscode 1.0.0 MIT isexe grizzly-loadtester-vscode 2.0.0 ISC jju grizzly-loadtester-vscode 1.4.0 MIT jquery-extend grizzly-loadtester-vscode 2.0.3 MIT js-yaml grizzly-loadtester-vscode 4.1.0 MIT json-parse-helpfulerror grizzly-loadtester-vscode 1.0.3 MIT json-schema-traverse grizzly-loadtester-vscode 0.4.1 MIT json-stable-stringify-without-jsonify grizzly-loadtester-vscode 1.0.1 MIT json5 grizzly-loadtester-vscode 1.0.2 MIT levn grizzly-loadtester-vscode 0.4.1 MIT license-checker grizzly-loadtester-vscode 1.0.0 BSD-3-Clause listenercount grizzly-loadtester-vscode 1.0.1 ISC locate-path grizzly-loadtester-vscode 6.0.0 MIT lodash.merge grizzly-loadtester-vscode 4.6.2 MIT lodash grizzly-loadtester-vscode 4.17.21 MIT log-symbols grizzly-loadtester-vscode 4.1.0 MIT loupe grizzly-loadtester-vscode 2.3.4 MIT lru-cache grizzly-loadtester-vscode 6.0.0 ISC merge2 grizzly-loadtester-vscode 1.4.1 MIT micromatch grizzly-loadtester-vscode 4.0.5 MIT minimatch grizzly-loadtester-vscode 3.1.2 ISC minimatch mocha:grizzly-loadtester-vscode 4.2.1 ISC minimist grizzly-loadtester-vscode 1.2.6 MIT mkdirp license-checker:grizzly-loadtester-vscode 0.3.5 MIT mkdirp grizzly-loadtester-vscode 0.5.5 MIT mocha grizzly-loadtester-vscode 9.2.2 MIT ms eslint-plugin-import:grizzly-loadtester-vscode 2.0.0 MIT ms grizzly-loadtester-vscode 2.1.2 MIT ms mocha:grizzly-loadtester-vscode 2.1.3 MIT nanoid grizzly-loadtester-vscode 3.3.1 MIT natives grizzly-loadtester-vscode 1.1.6 ISC natural-compare grizzly-loadtester-vscode 1.4.0 MIT nopt-defaults grizzly-loadtester-vscode 0.0.1 BSD-3-Clause nopt-usage grizzly-loadtester-vscode 0.1.0 MIT nopt license-checker:grizzly-loadtester-vscode 2.2.1 MIT nopt grizzly-loadtester-vscode 3.0.6 ISC normalize-package-data grizzly-loadtester-vscode 1.0.3 MIT* normalize-path grizzly-loadtester-vscode 3.0.0 MIT npm-license-crawler grizzly-loadtester-vscode 0.2.1 BSD-3-Clause object-inspect grizzly-loadtester-vscode 1.12.2 MIT object-keys grizzly-loadtester-vscode 1.1.1 MIT object.assign grizzly-loadtester-vscode 4.1.4 MIT object.values grizzly-loadtester-vscode 1.1.5 MIT once grizzly-loadtester-vscode 1.4.0 ISC optionator grizzly-loadtester-vscode 0.9.1 MIT p-limit grizzly-loadtester-vscode 3.1.0 MIT p-locate grizzly-loadtester-vscode 5.0.0 MIT parent-module grizzly-loadtester-vscode 1.0.1 MIT path-exists grizzly-loadtester-vscode 4.0.0 MIT path-is-absolute grizzly-loadtester-vscode 1.0.1 MIT path-key grizzly-loadtester-vscode 3.1.1 MIT path-parse grizzly-loadtester-vscode 1.0.7 MIT path-type grizzly-loadtester-vscode 4.0.0 MIT pathval grizzly-loadtester-vscode 1.1.1 MIT picomatch grizzly-loadtester-vscode 2.3.1 MIT prelude-ls grizzly-loadtester-vscode 1.2.1 MIT process-nextick-args grizzly-loadtester-vscode 2.0.1 MIT punycode grizzly-loadtester-vscode 2.1.1 MIT queue-microtask grizzly-loadtester-vscode 1.2.3 MIT randombytes grizzly-loadtester-vscode 2.1.0 MIT read-installed grizzly-loadtester-vscode 3.1.5 ISC read-package-json grizzly-loadtester-vscode 1.3.3 ISC readable-stream grizzly-loadtester-vscode 2.3.7 MIT readdir-scoped-modules grizzly-loadtester-vscode 1.1.0 ISC readdirp grizzly-loadtester-vscode 3.6.0 MIT regexp.prototype.flags grizzly-loadtester-vscode 1.4.3 MIT regexpp grizzly-loadtester-vscode 3.2.0 MIT require-directory grizzly-loadtester-vscode 2.1.1 MIT resolve-from grizzly-loadtester-vscode 4.0.0 MIT resolve grizzly-loadtester-vscode 1.22.1 MIT reusify grizzly-loadtester-vscode 1.0.4 MIT rimraf grizzly-loadtester-vscode 2.7.1 ISC rimraf flat-cache:grizzly-loadtester-vscode 3.0.2 ISC run-parallel grizzly-loadtester-vscode 1.2.0 MIT safe-buffer grizzly-loadtester-vscode 5.1.2 MIT semver normalize-package-data:grizzly-loadtester-vscode 4.3.6 ISC semver grizzly-loadtester-vscode 7.3.7 ISC serialize-javascript grizzly-loadtester-vscode 6.0.0 BSD-3-Clause setimmediate grizzly-loadtester-vscode 1.0.5 MIT shebang-command grizzly-loadtester-vscode 2.0.0 MIT shebang-regex grizzly-loadtester-vscode 3.0.0 MIT side-channel grizzly-loadtester-vscode 1.0.4 MIT slash grizzly-loadtester-vscode 3.0.0 MIT slide grizzly-loadtester-vscode 1.1.6 ISC string-width grizzly-loadtester-vscode 4.2.3 MIT string.prototype.trimend grizzly-loadtester-vscode 1.0.5 MIT string.prototype.trimstart grizzly-loadtester-vscode 1.0.5 MIT string_decoder grizzly-loadtester-vscode 1.1.1 MIT strip-ansi license-checker:grizzly-loadtester-vscode 0.3.0 MIT strip-ansi grizzly-loadtester-vscode 6.0.1 MIT strip-bom grizzly-loadtester-vscode 3.0.0 MIT strip-json-comments grizzly-loadtester-vscode 3.1.1 MIT supports-color license-checker:grizzly-loadtester-vscode 0.2.0 MIT supports-color npm-license-crawler:grizzly-loadtester-vscode 5.5.0 MIT supports-color grizzly-loadtester-vscode 7.2.0 MIT supports-color mocha:grizzly-loadtester-vscode 8.1.1 MIT supports-preserve-symlinks-flag grizzly-loadtester-vscode 1.0.0 MIT text-table grizzly-loadtester-vscode 0.2.0 MIT to-regex-range grizzly-loadtester-vscode 5.0.1 MIT traverse grizzly-loadtester-vscode 0.3.9 MIT/X11 treeify grizzly-loadtester-vscode 1.1.0 MIT tsconfig-paths grizzly-loadtester-vscode 3.14.1 MIT tslib grizzly-loadtester-vscode 1.14.1 0BSD tsutils grizzly-loadtester-vscode 3.21.0 MIT type-check grizzly-loadtester-vscode 0.4.0 MIT type-detect grizzly-loadtester-vscode 4.0.8 MIT type-fest grizzly-loadtester-vscode 0.20.2 (MIT OR CC0-1.0) typescript grizzly-loadtester-vscode 4.7.4 Apache-2.0 unbox-primitive grizzly-loadtester-vscode 1.0.2 MIT unzipper grizzly-loadtester-vscode 0.10.11 MIT uri-js grizzly-loadtester-vscode 4.4.1 BSD-2-Clause util-deprecate grizzly-loadtester-vscode 1.0.2 MIT util-extend grizzly-loadtester-vscode 1.0.3 MIT v8-compile-cache grizzly-loadtester-vscode 2.3.0 MIT vscode-jsonrpc grizzly-loadtester-vscode 6.0.0 MIT vscode-languageclient grizzly-loadtester-vscode 7.0.0 MIT vscode-languageserver-protocol grizzly-loadtester-vscode 3.16.0 MIT vscode-languageserver-types grizzly-loadtester-vscode 3.16.0 MIT which-boxed-primitive grizzly-loadtester-vscode 1.0.2 MIT which grizzly-loadtester-vscode 2.0.2 ISC word-wrap grizzly-loadtester-vscode 1.2.3 MIT workerpool grizzly-loadtester-vscode 6.2.0 Apache-2.0 wrap-ansi grizzly-loadtester-vscode 7.0.0 MIT wrappy grizzly-loadtester-vscode 1.0.2 ISC y18n grizzly-loadtester-vscode 5.0.8 ISC yallist grizzly-loadtester-vscode 4.0.0 ISC yargs-parser grizzly-loadtester-vscode 20.2.4 ISC yargs-unparser grizzly-loadtester-vscode 2.0.0 MIT yargs grizzly-loadtester-vscode 16.2.0 MIT yocto-queue grizzly-loadtester-vscode 0.1.0 MIT"},{"location":"editor-support/editors/","title":"Editors","text":"<p>Implementations for your favorite editor is always welcome!</p>"},{"location":"editor-support/editors/vscode/","title":"grizzly-vscode","text":"<p>This is the <code>grizzly-loadtester</code> Visual Studio Code extension that makes it easier to develop load test scenarios by providing auto-complete of step expressions!</p> <p></p> <p></p> <p></p> <p>Download the extension from Visual Studio Marketplace.</p> <p>For the extension to work, you have to install the language server <code>grizzly-loadtester-ls</code> which is published on pypi.org.</p> <p>Install it with:</p> <pre><code>python -m pip install grizzly-loadtester-ls\n</code></pre> <p>And make sure it's in a directory that is part of your <code>PATH</code> environment variable.</p>"},{"location":"framework/changelog/","title":"Changelog","text":""},{"location":"framework/changelog/#v272","title":"v2.7.2","text":"<ul> <li> <p><code>fe4d1d9c</code>: software based TOTP for AAD user authentication (#262)</p> </li> <li> <p><code>37c021c5</code>: keystore -- share testdata between scenarios (#261)</p> </li> <li> <p><code>b97fe65a</code>: do not fire ResponseEvent for exceptions that are <code>StopUser</code> or <code>RestartScenario</code> (#258)</p> </li> <li> <p><code>5e7f4b45</code>: include code of conduct in generated documentation (#257)</p> </li> <li> <p><code>74cd98a8</code>: Create code of conduct (#255)</p> </li> <li> <p><code>7a8d79df</code>: async-messaged: reconnect to MQ queue manager if connection is broken (#253)</p> </li> <li> <p><code>6ac36e6e</code>: add support for ISO 8601-ish format in DateTask (no separators) :( (#254)</p> </li> <li> <p><code>aa91d5dd</code>: add support for sub log directories in <code>requests/logs</code> (#252)</p> </li> </ul>"},{"location":"framework/changelog/#v271","title":"v2.7.1","text":"<ul> <li><code>3e508501</code>: grizzly.auth.aad: flow token in step 2 now changes (#251)</li> </ul>"},{"location":"framework/changelog/#v270","title":"v2.7.0","text":"<ul> <li> <p><code>9a3ca4e4</code>: bump versions (#249)</p> </li> <li> <p><code>47a1201a</code>: Update issue templates (#245)</p> </li> <li> <p><code>15779776</code>: persist flagged variables when test is stopping (#247)</p> </li> <li> <p><code>b40cfcb2</code>: refactoring of handling RequestTask (#246)</p> </li> <li> <p><code>0c2cbab4</code>: do not log <code>scenario.failure_exception</code> in <code>LoopTask</code> (#244)</p> </li> <li> <p><code>52c72d1d</code>: update novella (#243)</p> </li> <li> <p><code>34b30626</code>: refactoring regarding <code>GrizzlyContextScenario</code> references for users (#241)</p> </li> <li> <p><code>a2ea8941</code>: response handlers should execute even though payload/metadata is empty (#242)</p> </li> <li> <p><code>7edebccb</code>: custom jinja2/templating filters (#240)</p> </li> <li> <p><code>c624dcb7</code>: handling of SIGINT/SIGTERM to gracefully stop test (#238)</p> </li> </ul>"},{"location":"framework/changelog/#v265","title":"v2.6.5","text":"<ul> <li> <p><code>10942c9d</code>: only allow writing a complete row at a time in AtomicCsvWriter (#237)</p> </li> <li> <p><code>79a6f3f5</code>: rewrite grizzly.tasks.clients.servicebus to support more than one parent (#236)</p> </li> </ul>"},{"location":"framework/changelog/#v264","title":"v2.6.4","text":"<ul> <li> <p><code>d41a2b15</code>: catch exceptions from task <code>on_stop</code> and log as errors (#235)</p> </li> <li> <p><code>b8bf9e65</code>: AAD authentication improvements (#234)</p> </li> <li> <p><code>df73fdcd</code>: HTTP authentication support outside of <code>RestApiUser</code> (#231)</p> </li> <li> <p><code>e9e62d42</code>: correct handling of return code from behave (#233)</p> </li> <li> <p><code>56dc7531</code>: use docker composer v2 in code-quality workflow (#230)</p> </li> </ul>"},{"location":"framework/changelog/#v263","title":"v2.6.3","text":"<ul> <li> <p><code>a52cfc5c</code>: async messaged improvments (#228)</p> </li> <li> <p><code>fa51b3ce</code>: wrapper tasks implements on_start/stop (#227)</p> </li> <li> <p><code>fd245ca6</code>: support for jsonpath expression filter on \"flat\" objects (#225)</p> </li> <li> <p><code>f289d6d3</code>: prefix subscription name with id of user instance (#224)</p> </li> <li> <p><code>c4e8acf2</code>: docs generate sort version (#223)</p> </li> <li> <p><code>c79b5927</code>: E2E distributed tests takes too long time (#222)</p> </li> <li> <p><code>55fb7060</code>: backing out PR #200, since interfere with logging of other tasks. (#221)</p> </li> <li> <p><code>61db0889</code>: abort if <code>async-messaged</code> process is gone (#219)</p> </li> <li> <p><code>9dbac3e5</code>: metadata is a dict, but when saved in a variable it should be a (json) string (#218)</p> </li> <li> <p><code>c557a6eb</code>: client task implementation for saving response metadata in variable (#217)</p> </li> </ul>"},{"location":"framework/changelog/#v262","title":"v2.6.2","text":"<ul> <li> <p><code>5a00f706</code>: fixed documentation for missing path and fragment variables (#215)</p> </li> <li> <p><code>7d653c53</code>: get current tasks the right way (#214)</p> </li> <li> <p><code>1ac1c4d1</code>: RestApiUser, oauth2 token v2.0 flow (#213)</p> </li> </ul>"},{"location":"framework/changelog/#v261","title":"v2.6.1","text":"<ul> <li><code>d541500e</code>: servicebus client task (#212)</li> </ul>"},{"location":"framework/changelog/#v260","title":"v2.6.0","text":"<ul> <li> <p><code>c01805fb</code>: implementation of AtomicCsvWriter (#211)</p> </li> <li> <p><code>1c2b824d</code>: code maintenance 2023-03 (#209)</p> </li> <li> <p><code>b0e3a68b</code>: task <code>on_start</code> and <code>on_stop</code> functionality (#208)</p> </li> <li> <p><code>16efa80a</code>: grizzly.user implementation of on_start and on_stop (#207)</p> </li> <li> <p><code>8906711a</code>: use packaging.version instead of distutils.version (#206)</p> </li> <li> <p><code>9e6eeec1</code>: rename <code>grizzly.environment</code> to <code>grizzly.behave</code> (#205)</p> </li> <li> <p><code>47a61445</code>: updated locust version (#204)</p> </li> <li> <p><code>69938441</code>: suppress error procuded in wrapped tasks to be logged to the error summary (#203)</p> </li> </ul>"},{"location":"framework/changelog/#v2511","title":"v2.5.11","text":"<ul> <li> <p><code>85650a55</code>: set a fixed time for one iteration of a scenario (#201)</p> </li> <li> <p><code>30c9eadb</code>: do not log internal flow exceptions as errors in conditionals (#200)</p> </li> <li> <p><code>a7e13f04</code>: improvements of information printed when grizzly is running locust (#198)</p> </li> <li> <p><code>5f09a9dc</code>: fixed tags sorted incorrectly (#191)</p> </li> <li> <p><code>8594a4fa</code>: improved UntilTask traceability (#194)</p> </li> </ul>"},{"location":"framework/changelog/#v2510","title":"v2.5.10","text":"<ul> <li><code>da7eb36b</code>: async-messaged: gracefully close handler connections when terminating\u2026 (#190)</li> </ul>"},{"location":"framework/changelog/#v259","title":"v2.5.9","text":"<ul> <li><code>32414118</code>: AtomicServiceBus: add argument <code>consume</code> (#189)</li> </ul>"},{"location":"framework/changelog/#v258","title":"v2.5.8","text":"<ul> <li> <p><code>1334c917</code>: updated shield.io url for github workflow status (#188)</p> </li> <li> <p><code>59560193</code>: IoT hub, error handling (#187)</p> </li> </ul>"},{"location":"framework/changelog/#v257","title":"v2.5.7","text":"<ul> <li> <p><code>fc436358</code>: tag measurements with scenario they belong to (#185)</p> </li> <li> <p><code>67abbb50</code>: write user count per user class name to influx every 5 seconds (#184)</p> </li> </ul>"},{"location":"framework/changelog/#v256","title":"v2.5.6","text":"<ul> <li> <p><code>516b119f</code>: background variable declaration (#183)</p> </li> <li> <p><code>2ae0c0b2</code>: updated workflow actions to remove warnings (#182)</p> </li> </ul>"},{"location":"framework/changelog/#v255","title":"v2.5.5","text":"<ul> <li><code>2a4041eb</code>: csv logging (#181)</li> </ul>"},{"location":"framework/changelog/#v254","title":"v2.5.4","text":"<ul> <li><code>65de8865</code>: concurrency fixes in MQ and SB related code (#180)</li> </ul>"},{"location":"framework/changelog/#v253","title":"v2.5.3","text":"<ul> <li> <p><code>d9c89199</code>: get messages from MQ with SYNCPOINT and configuration of max message size (#179)</p> </li> <li> <p><code>784f6b89</code>: IotHubUser, for uploading files to Azure IoT Hub (#177)</p> </li> <li> <p><code>1a4a826f</code>: improved support for jinja2 expressions (#176)</p> </li> <li> <p><code>c28e52d8</code>: <code>grizzly.tasks.client.messagequeue</code> needs unique worker for each instance of a scenario (#175)</p> </li> <li> <p><code>5cceb577</code>: print returncode of locust to stdout (#174)</p> </li> </ul>"},{"location":"framework/changelog/#v252","title":"v2.5.2","text":"<ul> <li> <p><code>70d1d245</code>: azure.servicebus receiver sometimes returns no message, even if there... (#173)</p> </li> <li> <p><code>7b63d1b6</code>: better handling of arthmetic when parsing out variables from templates (#172)</p> </li> <li> <p><code>caf9693d</code>: on_consumer testdata variables needs information about current scenario (#171)</p> </li> </ul>"},{"location":"framework/changelog/#v251","title":"v2.5.1","text":"<ul> <li> <p><code>599db8eb</code>: instructions in example docs on how to install vscode extension (#169)</p> </li> <li> <p><code>e57eea5d</code>: corrected grizzly-cli run commands in example (#167)</p> </li> <li> <p><code>161af067</code>: async-messaged returns un-encoded RFH2 payload after PUT (#165)</p> </li> <li> <p><code>7d034b26</code>: removed deprecated set-output commands in workflow (#164)</p> </li> <li> <p><code>5a35ffef</code>: more MQ information (#162)</p> </li> </ul>"},{"location":"framework/changelog/#v250","title":"v2.5.0","text":"<ul> <li> <p><code>ef6a4675</code>: move out <code>docs</code> extras from pyproject.toml (#158)</p> </li> <li> <p><code>d4880ee2</code>: env conf inline resolving and \"generic\" <code>UntilRequestTask</code> (#157)</p> </li> <li> <p><code>7285294b</code>: refactoring of get_templates (#156)</p> </li> <li> <p><code>b694acaa</code>: implementation of %g (GUID/UUID) formatter for AtomicRandomString (#152)</p> </li> <li> <p><code>a3854842</code>: Post XML, multipart/form-data and metadata per request (#151)</p> </li> <li> <p><code>10883c87</code>: dependency update 2209 (#150)</p> </li> <li> <p><code>1ce3a43c</code>: persist variable values between runs (override initial value based on previous runs) (#149)</p> </li> <li> <p><code>b39247e8</code>: declared and found variable cross-check (#148)</p> </li> <li> <p><code>e4e353de</code>: fixed broken release workflow (#147)</p> </li> </ul>"},{"location":"framework/changelog/#v246","title":"v2.4.6","text":"<ul> <li> <p><code>1a6e07da</code>: fix missing variables due to filter (pipe) in templates (#145)</p> </li> <li> <p><code>e7e606b7</code>: checkout release tag correctly so edit url in docs is correct (#146)</p> </li> <li> <p><code>cc5bf649</code>: added documentation for editor support (#144)</p> </li> <li> <p><code>c37140aa</code>: correct typings for release workflow inputs (#143)</p> </li> <li> <p><code>c3ed2eb7</code>: document response handler expression arguments (#142)</p> </li> <li> <p><code>3d2aa051</code>: documentation of metadata comments in feature files (#141)</p> </li> <li> <p><code>5db8bfe3</code>: allow templating strings as input to WaitTask (#140)</p> </li> <li> <p><code>e297da03</code>: e2e dist (#139)</p> </li> <li> <p><code>7a491161</code>: run e2e tests distributed (#138)</p> </li> <li> <p><code>b24db98b</code>: create zmq socket for each request (#136)</p> </li> <li> <p><code>9777db82</code>: fix for last task not being executed when user is stopping (#135)</p> </li> </ul>"},{"location":"framework/changelog/#v245","title":"v2.4.5","text":"<ul> <li> <p><code>eba5ba1d</code>: no testdata address, when running distributed (#134)</p> </li> <li> <p><code>606c7a80</code>: changed mq version (#132)</p> </li> </ul>"},{"location":"framework/changelog/#v244","title":"v2.4.4","text":"<ul> <li> <p><code>501b5960</code>: allow an arbritary number of matches (#130)</p> </li> <li> <p><code>d8406a55</code>: loop task (#129)</p> </li> <li> <p><code>a7928eea</code>: TransformerContentType should be permutated in y direction (#128)</p> </li> <li> <p><code>2bb8c045</code>: updated dependencies due to lxml security fix (#127)</p> </li> <li> <p><code>aea3d97b</code>: grizzly implementation of print_percentile_stats (#125)</p> </li> <li> <p><code>4ba8066d</code>: annotate non-enum custom types with <code>__vector__</code> (#124)</p> </li> <li> <p><code>fa4a2b16</code>: annotations for enums used in step expressions (#123)</p> </li> </ul>"},{"location":"framework/changelog/#v243","title":"v2.4.3","text":"<ul> <li> <p><code>27ebe108</code>: mq rfh2 support (#122)</p> </li> <li> <p><code>8b794ad1</code>: create list of tasks for pointer when switching (#121)</p> </li> <li> <p><code>3e16160c</code>: fixed examples for conditional task (#120)</p> </li> </ul>"},{"location":"framework/changelog/#v242","title":"v2.4.2","text":"<ul> <li> <p><code>da3c335d</code>: conditional tasks task (#119)</p> </li> <li> <p><code>cbcb1b8b</code>: new location for logo in repo (#118)</p> </li> </ul>"},{"location":"framework/changelog/#v241","title":"v2.4.1","text":"<ul> <li> <p><code>1ce7f0ad</code>: fix for documentation build and deploy (#117)</p> </li> <li> <p><code>484f8010</code>: changed to novella build backend and improved documentation (#116)</p> </li> </ul>"},{"location":"framework/changelog/#v240","title":"v2.4.0","text":"<ul> <li> <p><code>8e026ad8</code>: updated dependencies (#115)</p> </li> <li> <p><code>5c747f53</code>: request wait task (#114)</p> </li> <li> <p><code>6684c357</code>: <code>TimerTask</code> to measure \"response time\" for a group of tasks (#113)</p> </li> <li> <p><code>5ceca1e2</code>: bug fixes in <code>BlobStorageClient.put</code> and scenario iterator (#112)</p> </li> <li> <p><code>53ed0ad5</code>: remove debug print statement (#111)</p> </li> <li> <p><code>4f0f01f7</code>: sort request statistics per scenario (#110)</p> </li> <li> <p><code>35091c96</code>: <code>grizzly.tasks.client</code> must have a name (#109)</p> </li> </ul>"},{"location":"framework/changelog/#v231","title":"v2.3.1","text":"<ul> <li> <p><code>c754a8aa</code>: support ISO 8601 formated DateTime and Time (#107)</p> </li> <li> <p><code>e33cd941</code>: client task ibm messagequeue (#103)</p> </li> <li> <p><code>eabe7b8f</code>: possibility to implement custom (non-grizzly) atomic variables (#102)</p> </li> <li> <p><code>e4193dd4</code>: possibility to register custom locust message types and handlers (#101)</p> </li> <li> <p><code>13b6c444</code>: scenario statistics (#98)</p> </li> <li> <p><code>ba37b60a</code>: validating response step expression updated (#97)</p> </li> <li> <p><code>89149d9d</code>: \"end to end\" (E2E) test cases (#95)</p> </li> </ul>"},{"location":"framework/changelog/#v230","title":"v2.3.0","text":"<ul> <li> <p><code>b4fc150f</code>: Change scenario hash to numerical index (#94)</p> </li> <li> <p><code>6ecc7ab3</code>: support for parallell tasks (#92)</p> </li> <li> <p><code>2f7025d9</code>: make tests runnable on windows (#91)</p> </li> </ul>"},{"location":"framework/changelog/#v221","title":"v2.2.1","text":"<ul> <li> <p><code>0ae1b373</code>: automagically check pypi for package url if unknown (#90)</p> </li> <li> <p><code>e6ef9d8f</code>: install additional script dependencies correct (#89)</p> </li> <li> <p><code>c0a53532</code>: add support for requirements-script.txt to pip-sync wrapper (#88)</p> </li> <li> <p><code>67f3d269</code>: install and cache script requirements (#87)</p> </li> <li> <p><code>ddd9929c</code>: restructuring of code-quality workflow (#86)</p> </li> </ul>"},{"location":"framework/changelog/#v220","title":"v2.2.0","text":"<ul> <li> <p><code>d45b62d1</code>: github action action-push-tag@v1 is broken (#85)</p> </li> <li> <p><code>283fe3fe</code>: bug fix for iterations to stop when not finishing (#84)</p> </li> <li> <p><code>0ed596f2</code>: Feature/clients tasks (#81)</p> </li> <li> <p><code>6e6496ed</code>: create docs/licenses if it does not exist, before trying to write md file (#79)</p> </li> <li> <p><code>0dd489a3</code>: restructure of documentation (#78)</p> </li> </ul>"},{"location":"framework/changelog/#v210","title":"v2.1.0","text":"<ul> <li> <p><code>c4260a9e</code>: Feature/response handlers (#77)</p> </li> <li> <p><code>8278d17a</code>: step to set user metadata/header key values (#75)</p> </li> <li> <p><code>11de9b7f</code>: clearer job name in code-quality workflow (#70)</p> </li> <li> <p><code>b6845b79</code>: Feature/issue 64 pep518 (#69)</p> </li> <li> <p><code>fbd96cfa</code>: Feature/issue 61 pytz (#68)</p> </li> </ul>"},{"location":"framework/changelog/#v200","title":"v2.0.0","text":"<ul> <li> <p><code>af5e639b</code>: twine: command not found (#67)</p> </li> <li> <p><code>052a5ab9</code>: Feature/dependency update round 2 (#66)</p> </li> <li> <p><code>d4a3b935</code>: Feature/mq heartbeat (#65)</p> </li> <li> <p><code>884b6761</code>: Feature/dependencies update (#63)</p> </li> <li> <p><code>02c88045</code>: Plain text transformer fix, plus added rendering of date offset value (#62)</p> </li> <li> <p><code>001cc5e5</code>: Bug/until task aborts (#60)</p> </li> </ul>"},{"location":"framework/changelog/#v153","title":"v1.5.3","text":"<ul> <li> <p><code>7c2b7a91</code>: Feature/cli docs (#59)</p> </li> <li> <p><code>a53f9159</code>: Bug/until stops too soon (#58)</p> </li> <li> <p><code>f53bb8b8</code>: removed debug print statements (#56)</p> </li> <li> <p><code>fb9f4933</code>: removed debug print statements (#56)</p> </li> </ul>"},{"location":"framework/changelog/#v152","title":"v1.5.2","text":"<ul> <li><code>fb9f4933</code>: removed debug print statements (#56)</li> </ul>"},{"location":"framework/changelog/#v151","title":"v1.5.1","text":"<ul> <li><code>a2857569</code>: verify_certificates bug fixed (#55)</li> </ul>"},{"location":"framework/changelog/#v150","title":"v1.5.0","text":"<ul> <li> <p><code>1c57c7f0</code>: Feature/restart scenario (#54)</p> </li> <li> <p><code>9326218f</code>: MQ concurrency fix (#53)</p> </li> <li> <p><code>cc178860</code>: renamed grizzly.tasks to grizzly.scenarios (#52)</p> </li> <li> <p><code>281e9beb</code>: fixed bug in parse_arguments if an argument value contained comma (#51)</p> </li> </ul>"},{"location":"framework/changelog/#v144","title":"v1.4.4","text":"<ul> <li> <p><code>e13ff471</code>: Feature/date parse task (#50)</p> </li> <li> <p><code>d16ef8e1</code>: handle exceptions during until retries (#49)</p> </li> <li> <p><code>0994f9af</code>: increased test coverage (#48)</p> </li> <li> <p><code>eaaeab22</code>: Fix for doing retry upon receiving MQRC_TRUNCATED_MSG_FAILED while browsing messages (#47)</p> </li> <li> <p><code>88202428</code>: support for templating in arguments in condition (#46)</p> </li> </ul>"},{"location":"framework/changelog/#v143","title":"v1.4.3","text":"<ul> <li><code>3e47adbd</code>: fixed alignment i scenario summary (#45)</li> </ul>"},{"location":"framework/changelog/#v142","title":"v1.4.2","text":"<ul> <li> <p><code>e976144b</code>: Bug/async messaged logging (#44)</p> </li> <li> <p><code>b4b0be63</code>: Feature/request until (#42)</p> </li> </ul>"},{"location":"framework/changelog/#v141","title":"v1.4.1","text":"<ul> <li><code>e6d8fb3f</code>: fix for ensuring correct data type in metric written to influx (#41)</li> </ul>"},{"location":"framework/changelog/#v140","title":"v1.4.0","text":"<ul> <li> <p><code>26b81305</code>: print start and stop date and time when finished (#40)</p> </li> <li> <p><code>4aef0eef</code>: request response_time fixes (#39)</p> </li> <li> <p><code>fb95268f</code>: updated dependencies and devcontainer (#38)</p> </li> <li> <p><code>f98d904d</code>: Feature/scenario info (#37)</p> </li> </ul>"},{"location":"framework/changelog/#v131","title":"v1.3.1","text":"<ul> <li> <p><code>73827bf4</code>: error logging in transformer class (#35)</p> </li> <li> <p><code>3e5e03aa</code>: init racecondition (#36)</p> </li> <li> <p><code>dd0c75a5</code>: support for request template files in combination with data tables (#34)</p> </li> <li> <p><code>8d56f4fe</code>: Feature/parameterize more (#33)</p> </li> </ul>"},{"location":"framework/changelog/#v130","title":"v1.3.0","text":"<ul> <li> <p><code>60f39988</code>: transparent support for setting content type in endpoint (#32)</p> </li> <li> <p><code>423bc994</code>: expression support for service bus functionality (#31)</p> </li> <li> <p><code>2e2695df</code>: support for offset in AtomicDate (#30)</p> </li> <li> <p><code>41b78e89</code>: AtomicMessageQueue content type support (#29)</p> </li> <li> <p><code>979d4bbb</code>: unified arguments handling through out grizzly (#28)</p> </li> <li> <p><code>6fad96e4</code>: simplified AtomicMessageQueue and AtomicServiceBus (#27)</p> </li> <li> <p><code>64888c05</code>: implementation of getter tasks (http) (#26)</p> </li> <li> <p><code>2d6862d7</code>: Restored dummy_pymqi.py, the added stuff wasn't needed</p> </li> <li> <p><code>4f21a8d3</code>: MessageQueueUser: get messages that matches expression</p> </li> <li> <p><code>1e1edc44</code>: run code quality workflow when PR is updated</p> </li> <li> <p><code>6dc839c9</code>: corrected sentence in documentation for SleepTask</p> </li> </ul>"},{"location":"framework/changelog/#v120","title":"v1.2.0","text":"<ul> <li> <p><code>6ee5fffe</code>: added documentation for the different task types</p> </li> <li> <p><code>1b91d79b</code>: implementation of AtomicServiceBus variable</p> </li> <li> <p><code>b867d471</code>: ServiceBus support in async-messaged</p> </li> <li> <p><code>83c0ac9c</code>: refactoring of grizzly_extras.messagequeue</p> </li> <li> <p><code>9b9953e6</code>: included mypy extension in devcontainer</p> </li> <li> <p><code>aea0c288</code>: implemented RECEIVE for ServiceBusUser</p> </li> <li> <p><code>b046b60c</code>: Changed spawn_rate to float and fixed tests</p> </li> <li> <p><code>3ce0b102</code>: Changed spawn rate from int to float</p> </li> <li> <p><code>a789a71d</code>: Added support for user weight</p> </li> <li> <p><code>29f7d047</code>: updated atomic variables getting value and arguments</p> </li> <li> <p><code>81ccbed1</code>: change log level for grizzly_extras if started with verbose</p> </li> </ul>"},{"location":"framework/changelog/#v110","title":"v1.1.0","text":"<ul> <li> <p><code>b78be958</code>: new task to parse data</p> </li> <li> <p><code>b2ed98a1</code>: XmlTransformer: match parts of a document, and dump it to string</p> </li> <li> <p><code>9c55e5a3</code>: move testdata production if variable has on_consumer = True</p> </li> <li> <p><code>cfe9875b</code>: specify external dependencies for users and variables in the objects themself</p> </li> <li> <p><code>2140fe79</code>: new variable AtomicMessageQueue</p> </li> <li> <p><code>1f6dba03</code>: refactoring for clearer distinction between utils and step helpers.</p> </li> <li> <p><code>99fab953</code>: fixing empty changelog in workflow@github</p> </li> <li> <p><code>c5ddeeb9</code>: generate changelog when building documentation</p> </li> <li> <p><code>5e595637</code>: fixed missed float -&gt; SleepTask change in test</p> </li> <li> <p><code>2c688554</code>: improved base for adding different types of tasks</p> </li> <li> <p><code>cb8db862</code>: reafactor LocustContext* to GrizzlyContext*</p> </li> <li> <p><code>3f1137b9</code>: refactoring of grizzly.tasks</p> </li> <li> <p><code>bd3382e0</code>: refactoring RequestContext to RequestTask</p> </li> <li> <p><code>031a9595</code>: handle edge cases with Getitem nodes</p> </li> <li> <p><code>ca7c17d7</code>: handle Getitem nodes when parsing templates for variables</p> </li> <li> <p><code>a1cabb31</code>: only try to remove secrets from dicts</p> </li> <li> <p><code>1145a651</code>: possibility to store json objects/list in variables</p> </li> </ul>"},{"location":"framework/changelog/#v101","title":"v1.0.1","text":"<ul> <li> <p><code>dae7be58</code>: Corrected string comparison operator</p> </li> <li> <p><code>4b8a8470</code>: Adjusted test for messagequeue</p> </li> <li> <p><code>bd9bb977</code>: Fix for being able to log MQ request payload</p> </li> <li> <p><code>cc5dfff6</code>: updated mkdocs to 1.2.3 due to CVE-2021-40978</p> </li> <li> <p><code>604f5704</code>: fixed url</p> </li> </ul>"},{"location":"framework/licenses/","title":"Licenses","text":""},{"location":"framework/licenses/#the-mit-license-mit","title":"The MIT License (MIT)","text":"<p>Copyright \u00a9 2021 Biometria Ekonomiska F\u00f6rening</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"framework/licenses/#third-party-licenses","title":"Third party licenses","text":""},{"location":"framework/licenses/#python-dependencies","title":"Python dependencies","text":"Name Version License protobuf 4.24.3 3-Clause BSD License PyNaCl 1.5.0 Apache License 2.0 bcrypt 4.0.1 Apache Software License deprecation 2.1.0 Apache Software License ghp-import 2.1.0 Apache Software License google-api-core 2.11.1 Apache Software License google-auth 2.23.0 Apache Software License googleapis-common-protos 1.60.0 Apache Software License importlib-metadata 6.8.0 Apache Software License janus 1.0.0 Apache Software License jsonpath-ng 1.6.0 Apache Software License msgpack 1.0.5 Apache Software License opencensus 0.11.2 Apache Software License opencensus-context 0.1.3 Apache Software License opencensus-ext-azure 1.1.9 Apache Software License readme-renderer 42.0 Apache Software License regex 2023.8.8 Apache Software License requests 2.31.0 Apache Software License requests-toolbelt 1.0.0 Apache Software License requests-unixsocket 0.3.0 Apache Software License rfc3986 2.0.0 Apache Software License rsa 4.9 Apache Software License twine 3.8.0 Apache Software License tzdata 2023.3 Apache Software License watchdog 2.3.1 Apache Software License yapf 0.40.1 Apache Software License cryptography 41.0.3 Apache Software License; BSD License packaging 23.1 Apache Software License; BSD License python-dateutil 2.8.2 Apache Software License; BSD License PySocks 1.7.1 BSD ply 3.11 BSD Babel 2.12.1 BSD License Flask 2.3.3 BSD License Flask-BasicAuth 0.2.0 BSD License Jinja2 3.1.2 BSD License Markdown 3.4.4 BSD License MarkupSafe 2.1.3 BSD License Pygments 2.16.1 BSD License SecretStorage 3.3.3 BSD License Werkzeug 2.3.7 BSD License astor 0.8.1 BSD License behave 1.2.6 BSD License click 8.1.7 BSD License colorama 0.4.6 BSD License idna 3.4 BSD License isodate 0.6.1 BSD License itsdangerous 2.1.2 BSD License lxml 4.9.3 BSD License mkdocs 1.5.2 BSD License psutil 5.9.5 BSD License pyasn1 0.5.0 BSD License pyasn1-modules 0.3.0 BSD License pycparser 2.21 BSD License setproctitle 1.3.2 BSD License wrapt 1.15.0 BSD License docutils 0.20.1 BSD License; GNU General Public License (GPL); Public Domain; Python Software Foundation License pyzmq 25.1.1 BSD License; GNU Library or Lesser General Public License (LGPL) portalocker 2.7.0 BSD-3-Clause paho-mqtt 1.6.1 Eclipse Public License v2.0 / Eclipse Distribution License v1.0 chardet 4.0.0 GNU Library or Lesser General Public License (LGPL) paramiko 3.3.1 GNU Library or Lesser General Public License (LGPL) geventhttpclient 2.0.10 MIT nh3 0.2.14 MIT Brotli 1.1.0 MIT License ConfigArgParse 1.7 MIT License DataProperty 1.0.1 MIT License Deprecated 1.2.14 MIT License Flask-Cors 4.0.0 MIT License PyJWT 2.8.0 MIT License PyYAML 6.0.1 MIT License azure-core 1.29.4 MIT License azure-identity 1.14.0 MIT License azure-iot-device 2.12.0 MIT License azure-servicebus 7.9.0 MIT License azure-storage-blob 12.18.1 MIT License black 23.9.1 MIT License blinker 1.6.2 MIT License build 1.0.3 MIT License cachetools 5.3.1 MIT License cffi 1.15.1 MIT License charset-normalizer 3.2.0 MIT License craftr-dsl 0.7.7 MIT License databind.core 4.4.1 MIT License databind.json 4.4.1 MIT License docspec 2.2.1 MIT License docspec-python 2.2.1 MIT License docstring-parser 0.11 MIT License gevent 23.9.1 MIT License greenlet 3.0.0rc3 MIT License influxdb 5.3.1 MIT License jaraco.classes 3.3.0 MIT License jeepney 0.8.0 MIT License keyring 24.2.0 MIT License locust 2.16.1 MIT License mbstrdecoder 1.1.3 MIT License mergedeep 1.3.4 MIT License mkdocs-material 9.3.1 MIT License mkdocs-material-extensions 1.1.1 MIT License more-itertools 10.1.0 MIT License msal 1.24.0 MIT License msal-extensions 1.0.0 MIT License mypy-extensions 1.0.0 MIT License novella 0.2.6 MIT License nr-date 2.1.0 MIT License nr-stream 1.1.5 MIT License nr.util 0.8.12 MIT License paginate 0.5.6 MIT License parse 1.19.1 MIT License parse-type 0.6.2 MIT License pathvalidate 3.1.0 MIT License pkginfo 1.9.6 MIT License platformdirs 3.10.0 MIT License pydoc-markdown 4.8.2 MIT License pymdown-extensions 10.3 MIT License pyotp 2.9.0 MIT License pyproject_hooks 1.0.0 MIT License pytablewriter 1.0.0 MIT License pytz 2023.3.post1 MIT License pyyaml_env_tag 0.1 MIT License roundrobin 0.0.4 MIT License six 1.16.0 MIT License tabledata 1.3.1 MIT License tcolorpy 0.1.3 MIT License termcolor 1.1.0 MIT License tomli 2.0.1 MIT License tomli_w 1.0.0 MIT License typeapi 2.1.1 MIT License typepy 1.3.1 MIT License uamqp 1.6.5 MIT License urllib3 1.26.16 MIT License zipp 3.16.2 MIT License tqdm 4.66.1 MIT License; Mozilla Public License 2.0 (MPL 2.0) certifi 2023.7.22 Mozilla Public License 2.0 (MPL 2.0) pathspec 0.11.2 Mozilla Public License 2.0 (MPL 2.0) typing_extensions 4.6.3 Python Software Foundation License zope.event 5.0 Zope Public License zope.interface 6.0 Zope Public License"},{"location":"framework/licenses/#native-dependencies","title":"Native dependencies","text":"<p>Container images (both grizzly runtime and Microsoft Visual Code devcontainer) contains dependencies from IBM MQ Redistributable Components.</p> <p>The redistributable license terms may be found in the relevant IBM MQ Program license agreement, which may be found at the IBM Software License Agreements website, or in <code>licenses/</code> directory in the archive.</p>"},{"location":"framework/usage/auth/aad/","title":"Azure Active Directory","text":"<p> Grizzly provides a way to get tokens via Azure Active Directory (AAD), in the framework this is implemented by RestAPI load user and HTTP client task, via the <code>@refresh_token</code> decorator.</p> <p>It is possible to use it in custom code as well, by implementing a custom class that inherits <code>grizzly.auth.GrizzlyHttpAuthClient</code>.</p> <p>For information about how to set context variables:</p> <ul> <li> <p>step_setup_set_global_context_variable</p> </li> <li> <p>step_setup_set_context_variable</p> </li> </ul> <p>Context variable values supports Templating.</p> <p>There are two ways to get an token, see below.</p>"},{"location":"framework/usage/auth/aad/#client-secret","title":"Client secret","text":"<p>Using client secret for an app registration.</p> <pre><code>Given a user of type \"RestApi\" load testing \"https://api.example.com\"\nAnd set context variable \"auth.provider\" to \"&lt;provider&gt;\"\nAnd set context variable \"auth.client.id\" to \"&lt;client id&gt;\"\nAnd set context variable \"auth.client.secret\" to \"&lt;client secret&gt;\"\nAnd set context variable \"auth.client.resource\" to \"&lt;resource url/guid&gt;\"\n</code></pre>"},{"location":"framework/usage/auth/aad/#username-and-password","title":"Username and password","text":"<p>Using a username and password, with optional MFA authentication.</p> <p><code>auth.user.redirect_uri</code> needs to correspond to the endpoint that the client secret is registrered for.</p> <pre><code>Given a user of type \"RestApi\" load testing \"https://api.example.com\"\nAnd set context variable \"auth.provider\" to \"&lt;provider&gt;\"\nAnd set context variable \"auth.client.id\" to \"&lt;client id&gt;\"\nAnd set context variable \"auth.user.username\" to \"alice@example.onmicrosoft.com\"\nAnd set context variable \"auth.user.password\" to \"HemL1gaArn3!\"\nAnd set context variable \"auth.user.redirect_uri\" to \"/app-registrered-redirect-uri\"\n</code></pre>"},{"location":"framework/usage/auth/aad/#mfa-totp","title":"MFA / TOTP","text":"<p>If the user is required to have a MFA method, support for software based TOTP tokens are supported. The user must first have this method configured.</p>"},{"location":"framework/usage/auth/aad/#configure-totp","title":"Configure TOTP","text":"<ol> <li> <p>Login to the accounts My signins</p> </li> <li> <p>Click on <code>Security info</code></p> </li> <li> <p>Click on <code>Add sign-in method</code></p> </li> <li> <p>Choose <code>Authenticator app</code></p> </li> <li> <p>Click on <code>I want to use another authenticator app</code></p> </li> <li> <p>Click on <code>Next</code></p> </li> <li> <p>Click on <code>Can't scan image?</code></p> </li> <li> <p>Copy <code>Secret key</code> and save it some where safe</p> </li> <li> <p>Click on <code>Next</code></p> </li> <li> <p>Open a terminal and run the following command:</p> BashPowerShell <pre><code>OTP_SECRET=\"&lt;secret key from step 8&gt;\" grizzly-cli auth\n</code></pre> <pre><code>$Env:OTP_SECRET = \"&lt;secret key from step 8&gt;\"\ngrizzly-cli auth\n</code></pre> </li> <li> <p>Copy the code generate from above command and click <code>Next</code></p> </li> <li> <p>Finish the wizard</p> </li> </ol> <p>The user now have software based TOTP tokens as MFA method.</p>"},{"location":"framework/usage/auth/aad/#example","title":"Example","text":"<p>In addition to the \"Username and password\" example, the context variable <code>auth.user.otp_secret</code> must also be set.</p> <pre><code>Given a user of type \"RestApi\" load testing \"https://api.example.com\"\nAnd set context variable \"auth.provider\" to \"&lt;provider&gt;\"\nAnd set context variable \"auth.client.id\" to \"&lt;client id&gt;\"\nAnd set context variable \"auth.user.username\" to \"alice@example.onmicrosoft.com\"\nAnd set context variable \"auth.user.password\" to \"HemL1gaArn3!\"\nAnd set context variable \"auth.user.redirect_uri\" to \"/app-registrered-redirect-uri\"\nAnd set context variable \"auth.user.otp_secret\" to \"asdfasdf\"  # &lt;-- !!\n</code></pre>"},{"location":"framework/usage/load-users/","title":"Load Users","text":"<p> This package contains implementation for different type of endpoints and protocols.</p> <p>These implementations are the basis for how to communicate with the system under test.</p>"},{"location":"framework/usage/load-users/#custom","title":"Custom","text":"<p>It is possible to implement custom users, the only requirement is that they inherit <code>grizzly.users.base.GrizzlyUser</code>. To get them to be executed by <code>grizzly</code> the full namespace has to be specified as <code>user_class_name</code> in the scenarios User step.</p> <p>There are examples of this in the Example.</p>"},{"location":"framework/usage/load-users/blobstorage/","title":"Blobstorage","text":"<p>Put files to Azure Blob Storage.</p>"},{"location":"framework/usage/load-users/blobstorage/#request-methods","title":"Request methods","text":"<p>Supports the following request methods:</p> <ul> <li>send</li> <li>put</li> </ul>"},{"location":"framework/usage/load-users/blobstorage/#format","title":"Format","text":"<p>Format of <code>host</code> is the following:</p> <pre><code>[DefaultEndpointsProtocol=]https;EndpointSuffix=&lt;hostname&gt;;AccountName=&lt;account name&gt;;AccountKey=&lt;account key&gt;\n</code></pre> <p><code>endpoint</code> in the request is the name of the blob storage container. Name of the targeted file in the container is either <code>name</code> or based on the file name of <code>source</code>.</p>"},{"location":"framework/usage/load-users/blobstorage/#examples","title":"Examples","text":"<p>Example of how to use it in a scenario:</p> <pre><code>Given a user of type \"BlobStorage\" load testing \"DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=examplestorage;AccountKey=xxxyyyyzzz==\"\nThen send request \"test/blob.file\" to endpoint \"azure-blobstorage-container-name\"\n</code></pre>"},{"location":"framework/usage/load-users/dummy/","title":"Dummy","text":"<p>Does nothing.</p> <p>Can be used with any tasks except Request.</p>"},{"location":"framework/usage/load-users/dummy/#format","title":"Format","text":"<p>Format of <code>host</code> can be anything.</p>"},{"location":"framework/usage/load-users/dummy/#examples","title":"Examples","text":"<p>Example of how to use it in a scenario:</p> <pre><code>Given a user of type \"Dummy\" load testing \"/dev/null\"\n</code></pre>"},{"location":"framework/usage/load-users/iothub/","title":"Iothub","text":"<p>Put files to Azure IoT hub.</p>"},{"location":"framework/usage/load-users/iothub/#request-methods","title":"Request methods","text":"<p>Supports the following request methods:</p> <ul> <li>send</li> <li>put</li> </ul>"},{"location":"framework/usage/load-users/iothub/#format","title":"Format","text":"<p>Format of <code>host</code> is the following:</p> <pre><code>HostName=&lt;hostname&gt;;DeviceId=&lt;device key&gt;;SharedAccessKey=&lt;access key&gt;\n</code></pre> <p><code>endpoint</code> in the request is the desired filename for the uploaded file.</p>"},{"location":"framework/usage/load-users/iothub/#examples","title":"Examples","text":"<p>Example of how to use it in a scenario:</p> <pre><code>Given a user of type \"IotHub\" load testing \"HostName=my_iot_host_name;DeviceId=my_device;SharedAccessKey=xxxyyyyzzz==\"\nThen send request \"test/blob.file\" to endpoint \"uploaded_blob_filename\"\n</code></pre>"},{"location":"framework/usage/load-users/messagequeue/","title":"Messagequeue","text":"<p>Get and put messages on with IBM MQ queues.</p> <p>User is based on <code>pymqi</code> for communicating with IBM MQ. However <code>pymqi</code> uses native libraries which <code>gevent</code> (used by <code>locust</code>) cannot patch, which causes any calls in <code>pymqi</code> to block the rest of <code>locust</code>. To get around this, the user implementation communicates with a stand-alone process via zmq, which in turn communicates with IBM MQ.</p> <p><code>async-messaged</code> starts automagically when a scenario uses <code>MessageQueueUser</code> and <code>pymqi</code> dependencies are installed.</p>"},{"location":"framework/usage/load-users/messagequeue/#request-methods","title":"Request methods","text":"<p>Supports the following request methods:</p> <ul> <li>send</li> <li>put</li> <li>get</li> <li>receive</li> </ul>"},{"location":"framework/usage/load-users/messagequeue/#format","title":"Format","text":"<p>Format of <code>host</code> is the following:</p> <pre><code>mq://&lt;hostname&gt;:&lt;port&gt;/?QueueManager=&lt;queue manager name&gt;&amp;Channel=&lt;channel name&gt;\n</code></pre> <p><code>endpoint</code> in the request is the name of an MQ queue. This can also be combined with an expression, if a specific message is to be retrieved from the queue. The format of endpoint is:</p> <pre><code>queue:&lt;queue_name&gt;[, expression:&lt;expression&gt;][, max_message_size:&lt;max_message_size&gt;]\n</code></pre> <p>Where <code>&lt;expression&gt;</code> can be a XPath or jsonpath expression, depending on the specified content type. See example below. Where <code>&lt;max_message_size&gt;</code> is the maximum number of bytes a message can be for being able to accept it. If not set, the client will reject the message with <code>MQRC_TRUNCATED_MSG_FAILED</code>, adjust the message buffer and try again. If set, and the message is bigger than the specified size, the message will be rejected by the client and will eventually fail.</p>"},{"location":"framework/usage/load-users/messagequeue/#examples","title":"Examples","text":"<p>Example of how to use it in a scenario:</p> <pre><code>Given a user of type \"MessageQueue\" load testing \"mq://mq.example.com/?QueueManager=QM01&amp;Channel=SRVCONN01\"\nThen put request \"test/queue-message.j2.json\" with name \"queue-message\" to endpoint \"queue:INCOMING.MESSAGES\"\n</code></pre>"},{"location":"framework/usage/load-users/messagequeue/#get-message","title":"Get message","text":"<p>Default behavior is to fail directly if there is no message on the queue. If the request should wait until a message is available, set the time it should wait with <code>message.wait</code> (seconds) context variable.</p> <p>To keep the connection alive during longer waiting periods, a heartbeat interval can be configured using the <code>connection.heartbeat_interval</code> (seconds) context variable (default 300).</p> <pre><code>Given a user of type \"MessageQueue\" load testing \"mq://mq.example.com/?QueueManager=QM01&amp;Channel=SRVCONN01\"\nAnd set context variable \"message.wait\" to \"5\"\nThen get request with name \"get-queue-message\" from endpoint \"queue:INCOMING.MESSAGES\"\n</code></pre> <p>In this example, the request will not fail if there is a message on queue within 5 seconds.</p>"},{"location":"framework/usage/load-users/messagequeue/#get-message-with-expression","title":"Get message with expression","text":"<p>When specifying an expression, the messages on the queue are first browsed. If any message matches the expression, it is later consumed from the queue. If no matching message was found during browsing, it is repeated again after a slight delay, up until the specified <code>message.wait</code> seconds has elapsed. To use expressions, a content type must be specified for the get request, e.g. <code>application/xml</code>:</p> <pre><code>Given a user of type \"MessageQueue\" load testing \"mq://mq.example.com/?QueueManager=QM01&amp;Channel=SRVCONN01\"\nAnd set context variable \"message.wait\" to \"5\"\nThen get request with name \"get-specific-queue-message\" from endpoint \"queue:INCOMING.MESSAGES, expression: //document[@id='abc123']\"\nAnd set response content type to \"application/xml\"\n</code></pre>"},{"location":"framework/usage/load-users/messagequeue/#authentication","title":"Authentication","text":""},{"location":"framework/usage/load-users/messagequeue/#username-and-password","title":"Username and password","text":"<pre><code>Given a user of type \"MessageQueue\" load testing \"mq://mqm:admin@mq.example.com/?QueueManager=QM01&amp;Channel=SRVCONN01\"\nAnd set context variable \"auth.username\" to \"&lt;username&gt;\"\nAnd set context variable \"auth.password\" to \"&lt;password&gt;\"\n</code></pre>"},{"location":"framework/usage/load-users/messagequeue/#with-tls","title":"With TLS","text":"<p>A key repository (3 files; <code>.kdb</code>, <code>.rdb</code> and <code>.sth</code>) for the user is needed, and is specified with <code>auth.key_file</code> excluding the file extension.</p> <pre><code>Given a user of type \"MessageQueue\" load testing \"mq://mqm:admin@mq.example.com/?QueueManager=QM01&amp;Channel=SRVCONN01\"\nAnd set context variable \"auth.username\" to \"&lt;username&gt;\"\nAnd set context variable \"auth.password\" to \"&lt;password&gt;\"\nAnd set context variable \"auth.key_file\" to \"&lt;path to key file, excl. file extension&gt;\"\n</code></pre> <p>Default SSL cipher is <code>ECDHE_RSA_AES_256_GCM_SHA384</code>, change it by setting <code>auth.ssl_cipher</code> context variable.</p> <p>Default certificate label is set to <code>auth.username</code>, change it by setting <code>auth.cert_label</code> context variable.</p>"},{"location":"framework/usage/load-users/messagequeue/#header-type","title":"Header type","text":"<p>Basic support exist for RFH2, and communicating with MQ using gzip compressed messages. When receiving messages, the RFH2 is automatically detected and (somewhat) supported. If RFH2 should be added when sending messages, with gzip compression, the context variable <code>message.header_type</code> should be set to <code>RFH2</code>:</p> <pre><code>Given a user of type \"MessageQueue\" load testing \"mq://mq.example.com/?QueueManager=QM01&amp;Channel=SRVCONN01\"\nAnd set context variable \"message.header_type\" to \"rfh2\"\nThen put request \"test/queue-message.j2.json\" with name \"gzipped-message\" to endpoint \"queue:GZIPPED.MESSAGES\"\n</code></pre> <p>Default header type is none, i.e. no header is added to the sent messages. To use no header, either set <code>message.header_type</code> to <code>None</code> or omit setting the context variable at all.</p> <p>To set a user value in the RFH2 header of the message, set <code>metadata</code> after the request, e.g.:</p> <pre><code>Then put request \"test/queue-message.j2.json\" with name \"gzipped-message\" to endpoint \"queue:GZIPPED.MESSAGES\"\nAnd metadata \"filename\" is \"my_filename\"\n</code></pre>"},{"location":"framework/usage/load-users/restapi/","title":"RestAPI","text":"<p> Communicates with HTTP and HTTPS, with built-in support for Azure authenticated endpoints.</p>"},{"location":"framework/usage/load-users/restapi/#request-methods","title":"Request methods","text":"<p>Supports the following request methods:</p> <ul> <li>get</li> <li>put</li> <li>post</li> </ul>"},{"location":"framework/usage/load-users/restapi/#format","title":"Format","text":"<p>Format of <code>host</code> is the following:</p>"},{"location":"framework/usage/load-users/restapi/#examples","title":"Examples","text":"<p>Example on how to use it in a scenario:</p> <p>To change how often the token should be refreshed, default is 3000 seconds:</p>"},{"location":"framework/usage/load-users/restapi/#authentication","title":"Authentication","text":"<p>See Azure Active Directory.</p>"},{"location":"framework/usage/load-users/restapi/#multipartform-data","title":"Multipart/form-data","text":"<p>RestApi supports posting of multipart/form-data content-type, and in that case additional arguments needs to be passed with the request:</p> <ul> <li> <p><code>multipart_form_data_name</code> str - the name of the input form</p> </li> <li> <p><code>multipart_form_data_filename</code> str - the filename</p> </li> </ul> <p><pre><code>http[s]://&lt;hostname&gt;\n</code></pre> <pre><code>Given a user of type \"RestApi\" load testing \"https://api.example.com\"\nThen post request \"test/request.j2.json\" to endpoint \"/api/test\"\nThen get request from endpoint \"/api/test\"\n</code></pre> <pre><code>And set context variable \"auth.refresh_time\" to \"3500\"\n</code></pre></p> <p>Example:</p> <pre><code>Then post request \"path/my_template.j2.xml\" with name \"FormPost\" to endpoint \"example.url.com | content_type=multipart/form-data, multipart_form_data_filename=my_filename, multipart_form_data_name=form_name\"\n</code></pre>"},{"location":"framework/usage/load-users/servicebus/","title":"Servicebus","text":"<p>Send and receive messages on Azure Service Bus queues and topics.</p> <p>Note</p> <p>If <code>message.wait</code> is not set, <code>azure.servicebus</code> will wait until there is a message available, and hence block the scenario.</p> <p>Attention</p> <p>Do not use <code>expression</code> to filter messages unless you do not care about the messages that does not match the expression. If you do care about them, you should setup a subscription to do the filtering in Azure.</p> <p>User is based on <code>azure.servicebus</code> for communicating with Azure Service Bus. But creating a connection and session towards a queue or a topic is a costly operation, and caching of the session was causing problems with <code>gevent</code> due to the sockets blocking and hence grizzly was blocking when finished. To get around this, the user implementation communicates with a stand-alone process via <code>zmq</code>, which in turn communicates with Azure Service Bus.</p> <p><code>async-messaged</code> starts automagically when a scenario uses the <code>ServiceBusUser</code>.</p>"},{"location":"framework/usage/load-users/servicebus/#request-methods","title":"Request methods","text":"<p>Supports the following request methods:</p> <ul> <li>send</li> <li>receive</li> </ul>"},{"location":"framework/usage/load-users/servicebus/#format","title":"Format","text":"<p>Format of <code>host</code> is the following:</p> <pre><code>[Endpoint=]sb://&lt;hostname&gt;/;SharedAccessKeyName=&lt;shared key name&gt;;SharedAccessKey=&lt;shared key&gt;\n</code></pre> <p><code>endpoint</code> in the request must have the prefix <code>queue:</code> or <code>topic:</code> followed by the name of the targeted type. When receiving messages from a topic, the argument <code>subscription:</code> is mandatory. The format of endpoint is:</p> <pre><code>[queue|topic]:&lt;endpoint name&gt;[, subscription:&lt;subscription name&gt;][, expression:&lt;expression&gt;]\n</code></pre> <p>Where <code>&lt;expression&gt;</code> can be a XPath or jsonpath expression, depending on the specified content type. This argument is only allowed when receiving messages. See example below.</p>"},{"location":"framework/usage/load-users/servicebus/#examples","title":"Examples","text":"<p>Example of how to use it in a scenario:</p> <pre><code>Given a user of type \"ServiceBus\" load testing \"sb://sb.example.com/;SharedAccessKeyName=authorization-key;SharedAccessKey=c2VjcmV0LXN0dWZm\"\nAnd set context variable \"message.wait\" to \"5\"\nThen send request \"queue-send\" to endpoint \"queue:shared-queue\"\nThen send request \"topic-send\" to endpoint \"topic:shared-topic\"\nThen receive request \"queue-recv\" from endpoint \"queue:shared-queue\"\nThen receive request \"topic-recv\" from endpoint \"topic:shared-topic, subscription:my-subscription\"\n</code></pre>"},{"location":"framework/usage/load-users/servicebus/#get-message-with-expression","title":"Get message with expression","text":"<p>When specifying an expression, the messages on the endpoint is first peeked on. If any message matches the expression, it is later consumed from the endpoint. If no matching messages was found when peeking, it is repeated again after a slight delay, up until the specified <code>message.wait</code> seconds has elapsed. To use expressions, a content type must be specified for the request, e.g. <code>application/xml</code>.</p> <pre><code>Given a user of type \"ServiceBus\" load testing \"sb://sb.example.com/;SharedAccessKeyName=authorization-key;SharedAccessKey=c2VjcmV0LXN0dWZm\"\nAnd set context variable \"message.wait\" to \"5\"\nThen receive request \"queue-recv\" from endpoint \"queue:shared-queue, expression:$.document[?(@.name=='TPM report')].id\"\nAnd set response content type to \"application/json\"\nThen receive request \"topic-recv\" from endpoint \"topic:shared-topic, subscription:my-subscription, expression:/documents/document[@name='TPM Report']/id/text()\"\nAnd set response content type to \"application/xml\"\n</code></pre>"},{"location":"framework/usage/load-users/sftp/","title":"SFTP","text":"<p>Communicates with Secure File Transport Protocol.</p> <p>Attention</p> <p>Both local and remote files will be overwritten if they already exists. Downloaded files will be stored in <code>requests/download</code>.</p>"},{"location":"framework/usage/load-users/sftp/#request-methods","title":"Request methods","text":"<p>Supports the following request methods:</p> <ul> <li>put</li> <li>get</li> </ul>"},{"location":"framework/usage/load-users/sftp/#format","title":"Format","text":"<p>Format of <code>host</code> is the following:</p> <pre><code>sftp://&lt;host&gt;[:&lt;port&gt;]\n</code></pre>"},{"location":"framework/usage/load-users/sftp/#examples","title":"Examples","text":"<p>Example of how to use it in a scenario:</p> <pre><code>Given a user of type \"Sftp\" load testing \"sftp://sftp.example.com\"\nAnd set context variable \"auth.username\" to \"bob\"\nAnd set context variable \"auth.password\" to \"great-scott-42-file-bar\"\nThen put request \"test/blob.file\" to endpoint \"/pub/blobs\"\nThen get request from endpoint \"/pub/blobs/blob.file\"\n</code></pre>"},{"location":"framework/usage/steps/","title":"Steps","text":"<p> This package contains all step implementations needed to write a feature file that describes a <code>locust</code> load test scenario for <code>grizzly</code>.</p> <p>A feature is described by using Gherkin. These expressions is then used by <code>grizzly</code> to configure and start <code>locust</code>, which takes care of generating the load.</p> <pre><code>Feature: description of the test\nBackground: steps that are common for all (if there is multiple) scenarios\n        Given ...\nAnd ...\nScenario: steps for a specific flow through a component in the target environment\n        Given ...\nAnd ...\nThen ...\nWhen ...\n</code></pre> <p>In this package there are modules with step implementations that can be used in both <code>Background</code> and <code>Scenario</code> sections in a feature file.</p> <p></p>"},{"location":"framework/usage/steps/#custom","title":"Custom","text":"<p>Custom steps are implemented in your <code>grizzly</code> project <code>features/steps/steps.py</code> file. This is also the file that imports all <code>grizzly</code>-defined step implementations.</p> <p>There are examples of this in the Example.</p>"},{"location":"framework/usage/steps/#considerations","title":"Considerations","text":"<p>When writing step expressions, the following should be taken into consideration. </p> <p></p>"},{"location":"framework/usage/steps/#class-permutationenum","title":"Class PermutationEnum","text":"<pre><code>class PermutationEnum(Enum, metaclass=PermutationMeta)\n</code></pre> <p>[view_source]</p> <p>Interface class for getting <code>__vector__</code> value from the class that inherits it.</p> <p>All objects used to represent possible values in step expressions and that has a registered custom <code>parse</code> type should inherit this class and set appropiate <code>__vector__</code> values and make an implementation of <code>from_string</code>. This is so <code>grizzly-ls</code> can make educated suggestions on possible step expressions.</p> <p></p> <p></p>"},{"location":"framework/usage/steps/#__vector__","title":"__vector__","text":"<p>This class variable represents <code>(x, y)</code> dimensions on how the values can expand in a step expression.</p> <p>Consider the following <code>Enum</code>, being mapped to a custom <code>parse</code> type named <code>FruitType</code>:</p> <pre><code>from behave import register_type\n\n\nclass Fruit(PermutationEnum):\n    __vector__ = None  # see examples below\n\n    BANANA = 0\n    APPLE = 1\n    ORANGE = 2\n\n    @classmethod\n    def from_string(cls, value: str) -&gt; Fruit:\n        return cls[value.upper()]\n\nregister_type(\n    FruitType=Fruit.from_string,\n)\n</code></pre>"},{"location":"framework/usage/steps/#none","title":"<code>None</code>","text":"<p>Variable occurs <code>1..N</code> times in the expression</p> <p>When permutated, it will only produce one step expression and all instances of the variable in the expression will have been replaced with nothing.</p> <pre><code>Then I want to eat a \"{fruit:FruitType}\"  # --&gt;\n\nThen I want to eat a \"\"\n\nThen I want to eat a \"{fruit1:FruitType}\" and a \"{fruit2:FruitType}\"  # --&gt;\n\nThen I want to eat a \"\" and a \"\"\n</code></pre>"},{"location":"framework/usage/steps/#false-true","title":"<code>(False, True,)</code>","text":"<p>Variable occurs <code>1</code> time in the expression.</p> <p>When permutated, it will produce the number of step expressions as values in the enum.</p> <pre><code>Then I want to eat a {fruit:FruitType}  # --&gt;\n\nThen I want to eat a banana\nThen I want to eat a apple\nThen I want to eat a orange\n</code></pre>"},{"location":"framework/usage/steps/#true-false","title":"<code>(True, False,)</code>","text":"<p>Variable occurs <code>2..N</code> times in the expression.</p> <p>When permutated, combination of all enum values will be produced, if the variable type occurs the same number of times as values in the enum.</p> <pre><code>Then I want to eat a {fruit1:FruitType}, a {fruit2:FruitType} and a {fruit3:FruitType}  # --&gt;\n\nThen I want to eat a banana, a apple and a orange\n</code></pre>"},{"location":"framework/usage/steps/#true-true","title":"<code>(True, True,)</code>","text":"<p>Variable occurs <code>2..N</code> times in the expression, and should produce more than one combination of the step expression.</p> <pre><code>Then I want to eat a {fruit1:FruitType}, a {fruit2:FruitType} and a {fruit3:FruitType}  # --&gt;\n\nThen I want to eat a banana, a apple and a orange\nThen I want to eat a apple, a banana and a orange\nThen I want to eat a orange, a banana and a apple\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/#class-permutation","title":"Class permutation","text":"<pre><code>class permutation()\n</code></pre> <p>[view_source]</p> <p>Decorator used to annotate <code>parse</code> methods that are not using Class PermutationEnum as a base. This could be for example parse methods that uses regular expressions via <code>parse.with_pattern</code>.</p> <pre><code>import parse\n\nfrom behave import register_type\nfrom grizzly_extras.text import permutation\n\n@parse.with_pattern(r'(hello|world)')\n@permutation(vector=(True, True,))\ndef parse_hello_world(text: str) -&gt; str:\n    return text.strip()\n\nregister_type(\n    HelloWorldType=parse_hello_world,\n)\n</code></pre> <p>See __vector__ for an explanation of possible values and their meaning.</p>"},{"location":"framework/usage/steps/setup/","title":"Setup","text":""},{"location":"framework/usage/steps/setup/#step_setup_variable_value_ask","title":"step_setup_variable_value_ask","text":"<pre><code>@then(u'ask for value of variable \"{name}\"')\n@given(u'ask for value of variable \"{name}\"')\ndef step_setup_variable_value_ask(context: Context, name: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>This step is used to indicate for <code>grizzly-cli</code> that it should ask for an initial value for the variable. It will then inject the value into the locust runtime environment, and in this step read it and insert it into the locust context which grizzly will use to setup locust.</p> <p>If <code>grizzly-cli</code> is not used, one has to manually set the environment variable, which requires a prefix of <code>TESTDATA_VARIABLE_</code> and the suffix should match the variable name in question.</p> <p>Use this step for variables that should have different initial values for each run of the feature.</p> <pre><code>And ask for value for variable \"AtomicIntegerIncrementer.messageID\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>name</code> str - variable name used in templates</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/setup/#step_setup_variable_value","title":"step_setup_variable_value","text":"<pre><code>@given(u'value for variable \"{name}\" is \"{value}\"')\ndef step_setup_variable_value(context: Context, name: str, value: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Use this step to initialize a variable that should have the same [start] value for every run of the scenario. If this step is used for a variable that has already been initialized, it is assumed that the value will change during runtime so instead a Set variable task will be added instead. The Variables must have implemented support for being settable.</p> <p>Data type for the value of the variable is based on the type of variable. If the variable is an testdata Variables then the value needs to match the format and type that the variable has implemented. If it is not a testdata variable <code>grizzly</code> will try to guess the data type. E.g.:</p> <ul> <li> <p><code>\"10\"</code> becomes <code>int</code></p> </li> <li> <p><code>\"1.0\"</code> becomes <code>float</code></p> </li> <li> <p><code>\"True\"</code> becomes <code>bool</code></p> </li> <li> <p>everything else becomes <code>str</code></p> </li> </ul> <p>It is also possible to set the value of a variable based on another variable, which can be usable if you have a variable in multiple scenarios which all should have the same initial value.</p> <p>Example:</p> example.feature<pre><code>Feature:\nBackground:\n        And ask for value of variable \"messageID\"\nAnd value for variable \"HelloWorld\" is \"default\"\nScenario:\n        And value for variable \"AtomicIntegerIncrementer.mid1\" is \"{{ messageID }}\"\nAnd value for variable \"AtomicIntegerIncrementer.persistent\" is \"1 | step=10, persist=True\"\nAnd value for variable \"AtomicCsvWriter.output\" is \"output.csv | headers='foo,bar'\"\n        ...\nAnd value for variable \"AtomicCsvWriter.output.foo\" is \"{{ value }}\"\nAnd value for variable \"AtomicCsvWriter.output.bar\" is \"{{ value }}\"\n</code></pre> <p>If the file <code>features/persistent/example.json</code> (name of feature file and <code>feature</code> extension replaced with <code>json</code>) exists, and contains an entry for   the variable, the initial value will be read from the file and override the value specified in the feature file.</p> <p>Arguments:</p> <ul> <li><code>name</code> str - variable name</li> <li><code>value</code> Any - initial value</li> </ul>"},{"location":"framework/usage/steps/utils/","title":"Utils","text":"<p> This package contains steps that can be useful during development or troubleshooting of a feature file, but should not be included in a finished, testable, feature.</p> <p></p> <p></p>"},{"location":"framework/usage/steps/utils/#step_utils_fail","title":"step_utils_fail","text":"<pre><code>@then(u'fail')\ndef step_utils_fail(context: Context) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Force a failed scenario. Can be useful when writing a new scenario.</p> <pre><code>Then fail\n</code></pre>"},{"location":"framework/usage/steps/background/","title":"Background Steps","text":"<p> This package contains step implementations that only is allowed in the <code>Background</code> section in a <code>Feature</code>. The steps in <code>Background</code> is only executed once. The feature will fail if they are added into any other section.</p> <pre><code>Feature: Example\nBackground:\n        # Here\n    Scenario:\n        # Not here!\n</code></pre> <p>They are only allowed in the <code>Background</code>-section since they modify parts of the context that are used for all scenarios, which can translate to basic <code>locust</code> configuration.</p>"},{"location":"framework/usage/steps/background/setup/","title":"Setup","text":"<p> This module contains step implementations that configures the load test scenario with parameters applicable for all scenarios.</p> <p></p> <p></p>"},{"location":"framework/usage/steps/background/setup/#step_setup_save_statistics","title":"step_setup_save_statistics","text":"<pre><code>@given(u'save statistics to \"{url}\"')\ndef step_setup_save_statistics(context: Context, url: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Sets an URL where locust statistics should be sent.</p> <p>It has support for InfluxDB and Azure Application Insights endpoints.</p> <p>For InfluxDB the following format must be used:</p> <p>For Azure Application Insights the following format must be used:</p> <p><pre><code>influxdb://[&lt;username&gt;:&lt;password&gt;@]&lt;hostname&gt;[:&lt;port&gt;]/&lt;database&gt;?TargetEnviroment=&lt;target environment&gt;[&amp;Testplan=&lt;test plan&gt;]\n[&amp;TargetEnvironment=&lt;target environment&gt;][&amp;ProfileName=&lt;profile name&gt;][&amp;Description=&lt;description&gt;]\n</code></pre> <pre><code>insights://?InstrumentationKey=&lt;instrumentation key&gt;&amp;IngestionEndpoint=&lt;ingestion endpoint&gt;[&amp;Testplan=&lt;test plan&gt;]\ninsights://&lt;ingestion endpoint&gt;/?InstrumentationKey=&lt;instrumentation key&gt;[&amp;Testplan=&lt;test plan&gt;]\n</code></pre> <pre><code>And save statistics to \"influxdb://grizzly:secret-password@influx.example.com/grizzly-statistics\"\nAnd save statistics to \"insights://?IngestionEndpoint=https://insights.example.com&amp;Testplan=grizzly-statistics&amp;InstrumentationKey=asdfasdfasdf=\"\nAnd save statistics to \"insights://insights.example.com/?Testplan=grizzly-statistics&amp;InstrumentationKey=asdfasdfasdf=\"\nAnd save statistics to \"influxdb://$conf::statistics.username$:$conf::statistics.password$@influx.example.com/$conf::statistics.database$\"\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>url</code> str - URL for statistics endpoint</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/background/setup/#step_setup_log_level","title":"step_setup_log_level","text":"<pre><code>@given(u'log level is \"{log_level}\"')\ndef step_setup_log_level(context: Context, log_level: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Configure log level for <code>grizzly</code>.</p> <p>Default value is <code>INFO</code>, by changing to <code>DEBUG</code> there is more information what <code>grizzly</code> is doing behind the curtains.</p> <pre><code>And log level is \"DEBUG\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>log_level</code> str - allowed values <code>INFO</code>, <code>DEBUG</code>, <code>WARNING</code> och <code>ERROR</code></li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/background/setup/#step_setup_run_time","title":"step_setup_run_time","text":"<pre><code>@given(u'run for maximum \"{timespan}\"')\ndef step_setup_run_time(context: Context, timespan: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Configures the time period a headless test should run for. If available test data is infinite, the test will run forever if this step is not used.</p> <pre><code>And run for maximum \"1h\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>timespan</code> str - description of how long the test should run for, e.g. 10s, 1h, 40m etc.</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/background/setup/#step_setup_set_global_context_variable","title":"step_setup_set_global_context_variable","text":"<pre><code>@given(u'set global context variable \"{variable}\" to \"{value}\"')\ndef step_setup_set_global_context_variable(context: Context, variable: str,\n                                           value: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Create a global variable in the context. Depending on which type of user a scenario is configured for, different variables are available. Check <code>grizzly.users</code> documentation for which context variables are available for each user.</p> <p>This step can be used if the feature file has multiple scenarios and all of them have the same context variables.</p> <p>Variable names can contain (one ore more) dot (<code>.</code>) or slash (<code>/</code>) to indicate that the variable is in a structure. All names will also be converted to lower case.</p> <p>E.g. <code>token.url</code> and <code>token/URL</code> results in:</p> <p>Space in variable names is also allowed and will then be translated to an underscore (<code>_</code>)</p> <p>E.g. <code>Client ID</code> results in <code>client_id</code>.</p> <p>Data type of values will be guessed, if not explicitly specified by the type of variable used (<code>Atomic*</code>). E.g. the last two examples above will result in:</p> <p><pre><code>{\n'token': {\n'url': '&lt;value&gt;'\n}\n}\n</code></pre> <pre><code>And set global context variable \"token.url\" to \"http://example.com/api/auth\"\nAnd set global context variable \"token/client_id\" to \"aaaa-bbbb-cccc-dddd\"\nAnd set global context variable \"token/client secret\" to \"aasdfasdfasdf==\"\nAnd set global context variable \"token.resource\" to \"0000-aaaaaaa-1111-1111-1111\"\nAnd set global context variable \"log_all_requests\" to \"True\"\nAnd set global context variable \"validate_certificates\" to \"False\"\nAnd set global context variable \"run_id\" to \"13\"\n</code></pre> <pre><code>{\n'validate_certificates': False,\n'run_id': 13\n}\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>variable</code> str - variable name, as used in templates</li> <li><code>value</code> str - variable value</li> </ul>"},{"location":"framework/usage/steps/background/shapes/","title":"Shapes","text":"<p> This module contains step implementations that describes how the load for all scenarios in a feature will look like.</p> <p></p> <p></p>"},{"location":"framework/usage/steps/background/shapes/#step_shapes_user_count","title":"step_shapes_user_count","text":"<pre><code>@given(u'\"{value}\" {grammar:UserGramaticalNumber}')\ndef step_shapes_user_count(context: Context, value: str,\n                           **kwargs: Dict[str, Any]) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Set number of users that will generate load.</p> <pre><code>Given \"5\" users\nGiven \"1\" user\nGiven \"{{ user_count }}\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>user_count</code> int - Number of users locust should create</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/background/shapes/#step_shapes_spawn_rate","title":"step_shapes_spawn_rate","text":"<pre><code>@given(u'spawn rate is \"{value}\" {grammar:UserGramaticalNumber} per second')\ndef step_shapes_spawn_rate(context: Context, value: str,\n                           **kwargs: Dict[str, Any]) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Set rate in which locust shall swarm new user instances.</p> <pre><code>And spawn rate is \"5\" users per second\nAnd spawn rate is \"1\" user per second\nAnd spawn rate is \"0.1\" users per second\n</code></pre> <p>Arguments:</p> <ul> <li><code>spawn_rate</code> float - number of users per second</li> </ul>"},{"location":"framework/usage/steps/scenario/","title":"Scenario Steps","text":"<p> This package contains step implementations that only is allowed in the <code>Scenario</code> section in a feature file.</p> <pre><code>Feature: Example\nBackground:\n        # Not here!\n    Scenario:\n        # Here\n</code></pre> <p>The steps in the <code>Scenario</code> section modifies the context only for the scenario that they are defined in.</p>"},{"location":"framework/usage/steps/scenario/response/","title":"Response","text":"<p> This module contains step implementations that handles Request responses.</p>"},{"location":"framework/usage/steps/scenario/response/#arguments","title":"Arguments","text":""},{"location":"framework/usage/steps/scenario/response/#expression","title":"<code>expression</code>","text":"<p>Valid for: step_response_save_matches, step_response_save, step_response_validate</p> <ul> <li> <p><code>expected_matches</code> int (optional): number of expected matches that <code>expression</code> should get, a value of <code>-1</code> means <code>Any</code> number of matches (default: <code>1</code>)</p> </li> <li> <p><code>as_json</code> bool (optional): always return matches as a JSON list, by default if there's a single match it will be returned as a string (default: <code>False</code>)</p> </li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/response/#step_response_save_matches","title":"step_response_save_matches","text":"<pre><code>@then(\n    u'save response {target:ResponseTarget} \"{expression}\" that matches \"{match_with}\" in variable \"{variable}\"'\n)\ndef step_response_save_matches(context: Context, target: ResponseTarget,\n                               expression: str, match_with: str,\n                               variable: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Save specified parts of a response, either from meta data (header) or payload (body), in a variable.</p> <p>With this step it is possible to change variable values and as such use values from a response later on in the load test.</p> <p>The Request task preceded by this step will fail if the specified <code>expression</code> has no or more than one match.</p> <p>Example:</p> <pre><code># only token is matched and saved in TOKEN, by using regexp match groups\nAnd value for variable \"TOKEN\" is \"none\"\nThen save response metadata \"$.Authentication\" that matches \"Bearer (.*)$\" in variabel \"TOKEN\"\n\n# the whole value is saved, as long as Authentication starts with \"Bearer\"\nAnd value for variable \"HEADER_AUTHENTICATION\" is \"none\"\nThen save response metadata \"$.Authentication\" that matches \"^Bearer .*$\" in variable \"HEADER_AUTHENTICATION\"\n\n# only the numerical suffix is saved in the variable\nAnd value for variable \"AtomicIntegerIncrementer.measurermentId\" is \"1\"\nThen save response payload \"$.measurement.id\" that matches \"^cpu([\\d]+)$\" in \"measurementId\"\n\n# the whole value is saved, as long as the value starts with \"cpu\"\nAnd value for variable \"measurementId\" is \"0\"\nThen save response payload \"$.measurement.id\" that matches \"^cpu[\\d]+$\" in \"measurementId\"\n\n# xpath example\nAnd value for variable \"xmlMeasurementId\" is \"none\"\nThen save response payload \"//measurement[0]/id/text() | content_type=xml\" that matches \"^cpu[\\d]+$\" in \"xmlMeasurementId\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>target</code> enum - \"metadata\" or \"payload\", depending on which part of the response should be used</li> <li><code>expression</code> str - JSON path or XPath expression for finding the property</li> <li><code>match_with</code> str - static value or a regular expression</li> <li><code>variable</code> str - name of the already initialized variable to save the value in</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/response/#step_response_save","title":"step_response_save","text":"<pre><code>@then(\n    u'save response {target:ResponseTarget} \"{expression}\" in variable \"{variable}\"'\n)\ndef step_response_save(context: Context, target: ResponseTarget,\n                       expression: str, variable: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Save metadata (header) or payload (body) value from a response in a variable.</p> <p>This step expression is the same as step_response_save_matches if <code>match_with</code> is set to <code>.*</code>.</p> <p>With this step it is possible to change variable values and as such use values from a response later on in the load test.</p> <p>The Request task preceded by this step will fail if the specified <code>expression</code> has no or more than one match.</p> <p>Example:</p> <pre><code>Then save response metadata \"$.Authentication\" in variable \"HEADER_AUTHENTICATION\"\n\nThen save response payload \"$.Result.ShipmentId\" in variable \"ShipmentId\"\n\nThen save response payload \"//measurement[0]/id/text()\" in \"xmlMeasurementId\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>target</code> enum - \"metadata\" or \"payload\", depending on which part of the response should be used</li> <li><code>expression</code> str - JSON path or XPath expression for finding the property</li> <li><code>variable</code> str - name of the already initialized variable to save the value in</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/response/#step_response_validate","title":"step_response_validate","text":"<pre><code>@when(\n    u'response {target:ResponseTarget} \"{expression}\" {condition:Condition} \"{match_with}\" fail request'\n)\ndef step_response_validate(context: Context, target: ResponseTarget,\n                           expression: str, condition: bool,\n                           match_with: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Fails the request based on the value of a response meta data (header) or payload (body).</p> <p>Example:</p> <pre><code>And restart scenario on failure\nWhen response metadata \"$.['content-type']\" is not \".*application/json.*\" fail request\nWhen response metadata \"$.['x-test-command']\" is \"abort\" fail request\nWhen response metadata \"$.Authentication\" is not \"Bearer .*$\" fail request\n\nAnd stop user on failure\nWhen response payload \"$.measurement.id\" is not \"cpu[0-9]+\" fail request\nWhen response payload \"$.success\" is \"false\" fail request\nWhen response payload \"/root/measurement[@id=\"cpu\"]/success/text()\" is \"'false'\" fail request\n</code></pre> <p>Arguments:</p> <ul> <li><code>target</code> enum - \"metadata\" or \"payload\", depending on which part of the response should be used</li> <li><code>expression</code> str - JSON path or XPath expression for finding the property</li> <li><code>condition</code> enum - \"is\" or \"is not\" depending on negative or postive matching</li> <li><code>match_with</code> str - static value or a regular expression</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/response/#step_response_allow_status_codes","title":"step_response_allow_status_codes","text":"<pre><code>@then(u'allow response status codes \"{status_list}\"')\ndef step_response_allow_status_codes(context: Context,\n                                     status_list: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Set allowed response status codes for the latest defined request in the scenario.</p> <p>By default <code>200</code> is the only allowed respoonse status code. By prefixing a code with minus (<code>-</code>), it will be removed from the list of allowed response status codes.</p> <p>Example:</p> <pre><code>Then get request with name \"test-get-1\" from endpoint \"/api/test\"\nAnd allow response status \"200,302\"\n\nThen get request with name \"test-failed-get-2\" from endpoint \"/api/non-existing\"\nAnd allow response status \"-200,404\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>status_list</code> str - comma separated list of integers</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/response/#step_response_allow_status_codes_table","title":"step_response_allow_status_codes_table","text":"<pre><code>@then(u'allow response status codes')\ndef step_response_allow_status_codes_table(context: Context) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Set allowed response status codes for the latest defined requests based on a data table.</p> <p>Specifies a comma separeated list of allowed return codes for the latest requests in a data table.</p> <p>By default <code>200</code> is the only allowed respoonse status code. By prefixing a code with minus (<code>-</code>), it will be removed from the list of allowed response status codes.</p> <p>Number of rows in the table specifies which of the latest defined requests the allowed response status codes should map to.</p> <p>The table must have the column header <code>status</code>.</p> <p>Example:</p> <pre><code>Then get request with name \"test-get-1\" from endpoint \"/api/test\"\nThen get request with name \"test-get-2\" from endpoint \"/api/test\"\nAnd allow response status\n | status   |\n | 200, 302 |\n | 200,404  |\n</code></pre> <p>Allowed response status codes for <code>test-get-1</code> is now <code>200</code> and <code>302</code>, and for <code>test-get-2</code> is   now <code>200</code> and <code>404</code>.</p> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/response/#step_response_content_type","title":"step_response_content_type","text":"<pre><code>@then(u'set response content type to \"{content_type:ContentType}\"')\ndef step_response_content_type(context: Context,\n                               content_type: TransformerContentType) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Set the content type of a response, instead of guessing it.</p> <p>This is applicable when there is a <code>step_response_validate</code> or <code>step_response_save</code> is included in the scenario, and is valid only for the latest defined request.</p> <p>Example:</p> <pre><code>And set response content type to \"json\"\nAnd set response content type to \"application/json\"\nAnd set response content type to \"xml\"\nAnd set response content type to \"application/xml\"\nAnd set response content type to \"plain\"\nAnd set response content type to \"text/plain\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>content_type</code> TransformerContentType - expected content type of response</li> </ul>"},{"location":"framework/usage/steps/scenario/results/","title":"Results","text":"<p> This module contains step implementations that validates the total response results for all Tasks in a scenario, based on locust statistics like response time and failures.</p> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/results/#step_results_fail_ratio","title":"step_results_fail_ratio","text":"<pre><code>@when(u'fail ratio is greater than \"{fail_ratio:d}\"% fail scenario')\ndef step_results_fail_ratio(context: Context, fail_ratio: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Sets how many percentages of requests that are allowed to fail before the whole scenario will be set as failed.</p> <p>This step cannot be used in combination with:</p> <ul> <li> <p>step_setup_stop_user_on_failure</p> </li> <li> <p>step_setup_restart_scenario_on_failure</p> </li> </ul> <p>Default behavior is not to validate the result for a scenario based on failed requests.</p> <p>Example:</p> <pre><code>When fail ratio is greater than \"8\"% fail scenario\n</code></pre> <p>Arguments:</p> <ul> <li><code>fail_ratio</code> int - percentage of requests that are allowed to fail</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/results/#step_results_avg_response_time","title":"step_results_avg_response_time","text":"<pre><code>@when(\n    u'average response time is greater than \"{avg_response_time:d}\" milliseconds fail scenario'\n)\ndef step_results_avg_response_time(context: Context,\n                                   avg_response_time: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Sets the average response time (milliseconds) that all requests in a scenario must be below for it to pass.</p> <p>Default behavior is not to validate the result for a scenario based on average response time.</p> <p>Example:</p> <pre><code>When average response time is greater than \"200\" milliseconds fail scenario\n</code></pre> <p>Arguments:</p> <ul> <li><code>avg_response_time</code> int - allowed average response time in milliseconds</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/results/#step_results_response_time_percentile","title":"step_results_response_time_percentile","text":"<pre><code>@when(\n    u'response time percentile \"{percentile:d}\"% is greater than \"{response_time:d}\" milliseconds fail scenario'\n)\ndef step_results_response_time_percentile(context: Context, percentile: float,\n                                          response_time: int) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Sets the response time that a specified percentile of the requests needs to be below for the scenario to pass.</p> <p>Default behavior is not to validate the result for a scenario based on percetile response times.</p> <p>Example:</p> <pre><code>When response time percentile \"95\"% is greater than \"200\" milliseconds fail scenario\n</code></pre> <p>Arguments:</p> <ul> <li><code>percentile</code> int - percentile to validate (1-100)</li> <li><code>response_time</code> int - response time in milliseconds</li> </ul>"},{"location":"framework/usage/steps/scenario/setup/","title":"Setup","text":"<p>This module contains step implementations that setup the load test scenario with parameters that is going to be used in the scenario they are defined in.</p> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/setup/#step_setup_set_context_variable","title":"step_setup_set_context_variable","text":"<pre><code>@given(u'set context variable \"{variable}\" to \"{value}\"')\ndef step_setup_set_context_variable(context: Context, variable: str,\n                                    value: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Sets a variable in the scenario context.</p> <p>Variable names can contain (one or more) dot (<code>.</code>) or slash (<code>/</code>) to indicate that the variable has a nested structure. E.g. <code>token.url</code> and <code>token/url</code> results in <code>{'token': {'url': '&lt;value'&gt;}}</code></p> <p>It is also possible to have spaces in a variable names, they will then be replaced with underscore (<code>_</code>), and the name will be converted to lowercase.</p> <p>E.g. <code>Client ID</code> results in <code>client_id</code>.</p> <p>Example:</p> <pre><code>And set context variable \"token.url\" to \"https://example.com/api/auth\"\nAnd set context variable \"token/client_id\" to \"aaaa-bbbb-cccc-dddd\"\nAnd set context variable \"token/client secret\" to \"aasdfasdfasdf==\"\nAnd set context variable \"token.resource\" to \"0000-aaaaaaa-1111-1111-1111\"\nAnd set context variable \"log_all_requests\" to \"True\"\nAnd set context variable \"validate_certificates\" to \"False\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>variable</code> str - name, can contain <code>.</code> and <code>/</code></li> <li><code>value</code> str - value, data type will be guessed and casted</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/setup/#step_setup_iterations","title":"step_setup_iterations","text":"<pre><code>@given(u'repeat for \"{value}\" {iteration_number:IterationGramaticalNumber}')\ndef step_setup_iterations(context: Context, value: str,\n                          iteration_number: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Sets how many iterations of the Tasks in the scenario should execute.</p> <p>Default value is <code>1</code>. A value of <code>0</code> means to run until all test data is consumed, or that the (optional) specified runtime for the scenario is reached.</p> <p>Example:</p> <pre><code>And repeat for \"10\" iterations\nAnd repeat for \"1\" iteration\nAnd value for variable \"leveranser\" is \"100\"\nAnd repeat for \"{{ leveranser * 0.25 }}\" iterations\n</code></pre> <p>Arguments:</p> <ul> <li><code>value</code> str - number of iterations of the scenario, can be a templatning string or a environment configuration variable</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/setup/#step_setup_pace","title":"step_setup_pace","text":"<pre><code>@given(u'set iteration time to \"{pace_time}\" milliseconds')\ndef step_setup_pace(context: Context, pace_time: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Sets to minimum time one iterations of the Tasks in the scenario should take. E.g. if <code>pace</code> is set to <code>2000</code> ms and the time since it last ran was <code>300</code> ms, this task will sleep for <code>1700</code> ms. If the time of all tasks is greater than the specified time, there will be an error, but the scenario will continue.</p> <p>This is useful to be able to control the intensity towards the loadtesting target.</p> <p>Example:</p> <pre><code>Then set iteration time to \"2000\" milliseconds\nThen set iteration time to \"{{ pace }}\" milliseconds\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/setup/#step_setup_set_variable_alias","title":"step_setup_set_variable_alias","text":"<pre><code>@given(u'set alias \"{alias}\" for variable \"{variable}\"')\ndef step_setup_set_variable_alias(context: Context, alias: str,\n                                  variable: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an alias for a variable that points to another structure in the context.</p> <p>This is useful if you have test data that somehow should change the behavior for a user, e.g. username and password.</p> <p>Example:</p> <pre><code>And value for variable \"AtomicCsvReader.users\" is \"users.csv | repeat=True\"\nAnd set alias \"auth.user.username\" for variable \"AtomicCsvReader.users.username\"\nAnd set alias \"auth.user.password\" for variable \"AtomicCsvReader.users.password\"\n</code></pre> <p>Variables in payload templates are not allowed to have an alias.</p> <p>Arguments:</p> <ul> <li><code>alias</code> str - which node in the context that should get the value of <code>variable</code></li> <li><code>variable</code> str - an already initialized variable that should be renamed</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/setup/#step_setup_log_all_requests","title":"step_setup_log_all_requests","text":"<pre><code>@given(u'log all requests')\ndef step_setup_log_all_requests(context: Context) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Sets if all requests should be logged to a file.</p> <p>By default only failed requests (and responses) will be logged.</p> <p>Example:</p> <pre><code>And log all requests\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/setup/#step_setup_stop_user_on_failure","title":"step_setup_stop_user_on_failure","text":"<pre><code>@given(u'stop user on failure')\ndef step_setup_stop_user_on_failure(context: Context) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Stop user if a request fails.</p> <p>Default behavior is to continue the scenario if a request fails.</p> <p>Example:</p> <pre><code>And stop user on failure\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/setup/#step_setup_restart_scenario_on_failure","title":"step_setup_restart_scenario_on_failure","text":"<pre><code>@given(u'restart scenario on failure')\ndef step_setup_restart_scenario_on_failure(context: Context) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Restart scenario, from first task, if a request fails.</p> <p>Default behavior is to continue the scenario if a request fails.</p> <p>Example:</p> <pre><code>And restart scenario on failure\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/setup/#step_setup_metadata","title":"step_setup_metadata","text":"<pre><code>@then(u'metadata \"{key}\" is \"{value}\"')\n@given(u'metadata \"{key}\" is \"{value}\"')\ndef step_setup_metadata(context: Context, key: str, value: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Set a metadata (header) value to be used by the user when sending requests.</p> <p>When step expression is used before any tasks has been added in the scenario the metadata will be used for all requests the specified loadtesting user executes in the scenario.</p> <p>If used after a Request task, the metadata will be added and only used for that request.</p> <p>If used after a task that implements <code>grizzly.auth.GrizzlyHttpAuthClient</code> (e.g. HTTP), the metadata will be added and only used when that task executes.</p> <p>Example:</p> <pre><code>And metadata \"Content-Type\" is \"application/xml\"\nAnd metadata \"Ocp-Apim-Subscription-Key\" is \"9asdf00asdf00adsf034\"\n</code></pre> <p>Or, for use in one request only, specify metadata after the request: <pre><code>Then post request ...\nAnd metadata \"x-header\" is \"{{ value }}\"\n\nThen get \"https://{{ client_url }}\" with name \"client-http\" and save response payload in \"payload\"\nAnd metadata \"Ocp-Apim-Subscription-Key\" is \"deadbeefb00f\"\n</code></pre></p>"},{"location":"framework/usage/steps/scenario/tasks/","title":"Tasks","text":"<p>This module contains step implementations that creates requests executed by the specified Load User in the scenario.</p> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_request_with_name_endpoint_until","title":"step_task_request_with_name_endpoint_until","text":"<pre><code>@then(\n    u'{method:Method} request with name \"{name}\" from endpoint \"{endpoint}\" until \"{condition}\"'\n)\ndef step_task_request_with_name_endpoint_until(context: Context,\n                                               method: RequestMethod,\n                                               name: str, endpoint: str,\n                                               condition: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Until task, see task documentation for more information.</p> <p>Example:</p> <pre><code>Then get request with name \"test-get\" from endpoint \"/api/test | content_type=json\" until \"$.`this`[?success==true]\"\nThen receive request with name \"test-receive\" from endpoint \"queue:receive-queue | content_type=xml\" until \"/header/success[. == 'True']\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>method</code> RequestMethod - type of request</li> <li><code>name</code> str - name of the requests in logs, can contain variables</li> <li><code>direction</code> RequestDirection - one of <code>to</code> or <code>from</code> depending on the value of <code>method</code></li> <li><code>endpoint</code> str - URI relative to <code>host</code> in the scenario, can contain variables and in certain cases <code>user_class_name</code> specific parameters</li> <li><code>condition</code> str - JSON or XPath expression for specific value in response payload</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_request_text_with_name_endpoint","title":"step_task_request_text_with_name_endpoint","text":"<pre><code>@then(\n    u'{method:Method} request with name \"{name}\" {direction:Direction} endpoint \"{endpoint}\"'\n)\ndef step_task_request_text_with_name_endpoint(context: Context,\n                                              method: RequestMethod, name: str,\n                                              direction: RequestDirection,\n                                              endpoint: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Request task, where optional payload is defined directly in the feature file. See Request task documentation for more information about arguments.</p> <ul> <li> <p>If <code>method</code> in the expression is <code>get</code> or <code>receive</code>; the <code>direction</code> must be <code>from</code>.</p> </li> <li> <p>If <code>method</code> in the expression is <code>post</code>, <code>pust</code>, or <code>send</code>; the <code>direction</code> must be <code>to</code>, and payload defined in the feature file.</p> </li> </ul> <p>Example:</p> <pre><code>Then post request with name \"test-post\" to endpoint \"/api/test\"\n\"\"\"\n    {\n        \"test\": \"hello world\"\n    }\n\"\"\"\nThen put request with name \"test-put\" to endpoint \"/api/test\"\n\"\"\"\n    {\n        \"test\": \"hello world\"\n    }\n\"\"\"\nThen get request with name \"test-get\" from endpoint \"/api/test\"\n\nThen send request with name \"test-send\" to endpoint \"queue:receive-queue\"\n\"\"\"\n    {\n        \"value\": \"do something\"\n    }\n\"\"\"\nThen receive request with name \"test-receive\" from endpoint \"queue:receive-queue\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>method</code> RequestMethod - type of request</li> <li><code>name</code> str - name of the requests in logs, can contain variables</li> <li><code>direction</code> RequestDirection - one of <code>to</code> or <code>from</code> depending on the value of <code>method</code></li> <li><code>endpoint</code> str - URI relative to <code>host</code> in the scenario, can contain variables and in certain cases <code>user_class_name</code> specific parameters</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_request_file_with_name_endpoint","title":"step_task_request_file_with_name_endpoint","text":"<pre><code>@then(\n    u'{method:Method} request \"{source}\" with name \"{name}\" to endpoint \"{endpoint}\"'\n)\ndef step_task_request_file_with_name_endpoint(context: Context,\n                                              method: RequestMethod,\n                                              source: str, name: str,\n                                              endpoint: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Request task, where the payload is defined in a template file.</p> <p>See Request task documentation for more information about arguments.</p> <p>Example:</p> <pre><code>Then send request \"test/request.j2.json\" with name \"test-send\" to endpoint \"queue:receive-queue\"\nThen post request \"test/request.j2.json\" with name \"test-post\" to endpoint \"/api/test\"\nThen put request \"test/request.j2.json\" with name \"test-put\" to endpoint \"/api/test\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>method</code> RequestMethod - type of request</li> <li><code>source</code> str - path to a template file relative to the directory <code>requests/</code>, which must exist in the directory the feature file is located</li> <li><code>name</code> str - name of the requests in logs, can contain variables</li> <li><code>endpoint</code> str - URI relative to <code>host</code> in the scenario, can contain variables and in certain cases <code>user_class_name</code> specific parameters</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_request_file_with_name","title":"step_task_request_file_with_name","text":"<pre><code>@then(u'{method:Method} request \"{source}\" with name \"{name}\"')\ndef step_task_request_file_with_name(context: Context, method: RequestMethod,\n                                     source: str, name: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Request task, with the same <code>endpoint</code> as the previous Request task, where the payload is defined in a template file.</p> <p>See Request task documentation for more information about arguments.</p> <p>Example:</p> <pre><code>Then post request \"test/request1.j2.json\" with name \"test-post1\" to endpoint \"/api/test\"\nThen post request \"test/request2.j2.json\" with name \"test-post2\"\n\n# same as\nThen post request \"test/request1.j2.json\" with name \"test-post1\" to endpoint \"/api/test\"\nThen post request \"test/request2.j2.json\" with name \"test-post2\" to endpoint \"/api/test\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>method</code> RequestMethod - type of request</li> <li><code>source</code> str - path to a template file relative to the directory <code>requests/</code>, which must exist in the directory the feature file is located</li> <li><code>name</code> str - name of the requests in logs, can contain variables</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_request_text_with_name","title":"step_task_request_text_with_name","text":"<pre><code>@then(u'{method:Method} request with name \"{name}\"')\ndef step_task_request_text_with_name(context: Context, method: RequestMethod,\n                                     name: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Request task, where optional payload is defined directly in the feature file.</p> <p>See Request task documentation for more information about arguments.</p> <p>If <code>method</code> in the expression is <code>post</code>, <code>put</code> or <code>send</code> the payload in the request must be defined directly in the feature file after the step. This step is useful if <code>method</code> and <code>endpoint</code> are the same as previous request, but the payload should be different.</p> <p>Example:</p> <pre><code># example-1\nThen post request with name \"test-post-1\" to endpoint \"/api/test\"\n\"\"\"\n    {\n        \"value\": \"hello world!\"\n    }\n\"\"\"\nThen post request with name \"test-post-2\"\n\"\"\"\n    {\n        \"value\": \"i have good news!\"\n    }\n\"\"\"\n\n# same as example-1\nThen post request with name \"test-post-1\" to endpoint \"/api/test\"\n\"\"\"\n    {\n        \"value\": \"hello world!\"\n    }\n\"\"\"\nThen post request with name \"test-post-2\" to endpoint \"/api/test\"\n\"\"\"\n    {\n        \"value\": \"i have good news!\"\n    }\n\"\"\"\n\n# example-2\nThen get request with name \"test-get-1\" from endpoint \"/api/test\"\nThen get request with name \"test-get-2\"\n\n# same as example-2\nThen get request with name \"test-get-1\" from endpoint \"/api/test\"\nThen get request with name \"test-get-2\" from endpoint \"/api/test\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>method</code> RequestMethod - type of request</li> <li><code>name</code> str - name of the requests in logs, can contain variables</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_wait_seconds","title":"step_task_wait_seconds","text":"<pre><code>@then(u'wait for \"{wait_time_expression}\" seconds')\ndef step_task_wait_seconds(context: Context,\n                           wait_time_expression: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instace of the Wait task. The scenario will wait the specified time (seconds) in additional to the wait time specified by Task Wait.</p> <p>See Wait task documentation for more information about the task.</p> <p>Example:</p> <pre><code>And ask for value of variable \"wait_time\"\nAnd wait \"1.5..2.5\" seconds between tasks\n...\nThen wait for \"1.5\" seconds\n...\nThen wait for \"{{ wait_time }}\" seconds\n</code></pre> <p>Above combinations of steps will result in a wait time between 3 and 4 seconds for the first Tasks that is defined after the   <code>Then wait for...</code>-step.</p> <p>Arguments:</p> <ul> <li><code>wait_time</code> float - wait time in seconds</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_log_message","title":"step_task_log_message","text":"<pre><code>@then(u'log message \"{message}\"')\ndef step_task_log_message(context: Context, message: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Log Message task. Prints a log message in the console, useful for troubleshooting values of variables or set markers in log files.</p> <p>The message supports Templating. See Log Message task documentation for more information about the task.</p> <p>Example:</p> <pre><code>And log message \"context_variable='{{ context_variable }}'\n</code></pre> <p>Arguments:</p> <ul> <li><code>message</code> str - message to print</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_transform","title":"step_task_transform","text":"<pre><code>@then(\n    u'parse \"{content}\" as \"{content_type:ContentType}\" and save value of \"{expression}\" in variable \"{variable}\"'\n)\ndef step_task_transform(context: Context, content: str,\n                        content_type: TransformerContentType, expression: str,\n                        variable: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Transformer task. Transforms the specified <code>content</code> with <code>content_type</code> to an object that an transformer can extract information from with the specified <code>expression</code>.</p> <p>See Transformer task documentation for more information about the task.</p> <p>Example:</p> <pre><code>And value for variable \"document_id\" is \"None\"\nAnd value for variable \"document_title\" is \"None\"\nAnd value for variable \"document\" is \"{\"document\": {\"id\": \"DOCUMENT_8843-1\", \"title\": \"TPM Report 2021\"}}\"\n...\nThen parse \"{{ document }}\" as \"json\" and save value of \"$.document.id\" in variable \"document_id\"\nThen parse \"{{ document }}\" as \"json\" and save value of \"$.document.title\" in variable \"document_title\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>contents</code> str - contents to parse, supports Templating or a static string</li> <li><code>content_type</code> TransformerContentType - MIME type of <code>contents</code></li> <li><code>expression</code> str - JSON or XPath expression for specific value in <code>contents</code></li> <li><code>variable</code> str - name of variable to save value to, must have been initialized</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_client_get_endpoint_payload_metadata","title":"step_task_client_get_endpoint_payload_metadata","text":"<pre><code>@then(\n    u'get \"{endpoint}\" with name \"{name}\" and save response payload in \"{payload_variable}\" and metadata in \"{metadata_variable}\"'\n)\ndef step_task_client_get_endpoint_payload_metadata(\n        context: Context, endpoint: str, name: str, payload_variable: str,\n        metadata_variable: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of a Clients task, actual implementation of the task is determined based on the URL scheme specified in <code>endpoint</code>. Gets information from another host or endpoint than the scenario is load testing and saves the response in a variable.</p> <p>See Clients task documentation for more information about client tasks.</p> <p>Example:</p> <pre><code>Then get \"https://www.example.org/example.json\" with name \"example-1\" and save response payload in \"example_openapi\" and metadata in \"example_metadata\"\nThen get \"http://{{ endpoint }}\" with name \"example-2\" and save response payload in \"endpoint_result\" and metadata in \"result_metadata\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>endpoint</code> str - information about where to get information, see the specific getter task implementations for more information</li> <li><code>name</code> str - name of the request, used in request statistics</li> <li><code>payload_variable</code> str - name of, initialized, variable where response payload will be saved in</li> <li><code>metadata_variable</code> str - name of, initialized, variable where response metadata will be saved in</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_client_get_endpoint_payload","title":"step_task_client_get_endpoint_payload","text":"<pre><code>@then(\n    u'get \"{endpoint}\" with name \"{name}\" and save response payload in \"{variable}\"'\n)\ndef step_task_client_get_endpoint_payload(context: Context, endpoint: str,\n                                          name: str, variable: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of a Clients task, actual implementation of the task is determined based on the URL scheme specified in <code>endpoint</code>. Gets information from another host or endpoint than the scenario is load testing and saves the response in a variable.</p> <p>See Clients task documentation for more information about client tasks.</p> <p>Example:</p> <pre><code>Then get \"https://www.example.org/example.json\" with name \"example-1\" and save response payload in \"example_openapi\"\nThen get \"http://{{ endpoint }}\" with name \"example-2\" and save response payload in \"endpoint_result\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>endpoint</code> str - information about where to get information, see the specific getter task implementations for more information</li> <li><code>name</code> str - name of the request, used in request statistics</li> <li><code>variable</code> str - name of, initialized, variable where response payload will be saved in</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_client_get_endpoint_until","title":"step_task_client_get_endpoint_until","text":"<pre><code>@then(u'get \"{endpoint}\" with name \"{name}\" until \"{condition}\"')\ndef step_task_client_get_endpoint_until(context: Context, endpoint: str,\n                                        name: str, condition: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of a Clients task, actual implementation of the task is determined based on the URL scheme specified in <code>endpoint</code>. Gets information, repeated from another host or endpoint than the scenario is load testing until the response matches <code>expression</code>.</p> <p>See Clients task documentation for more information about client tasks.</p> <p>Example:</p> <pre><code>Then get \"https://www.example.org/example.json\" with name \"example-1\" until \"$.response[status='Success']\nThen get \"http://{{ endpoint }}\" with name \"example-2\" until \"//*[@status='Success']\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>endpoint</code> str - information about where to get information, see the specific getter task implementations for more information</li> <li><code>name</code> str - name of the request, used in request statistics</li> <li><code>condition</code> str - JSON or XPath expression for specific value in response payload</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_client_put_endpoint_file_destination","title":"step_task_client_put_endpoint_file_destination","text":"<pre><code>@then(u'put \"{source}\" to \"{endpoint}\" with name \"{name}\" as \"{destination}\"')\ndef step_task_client_put_endpoint_file_destination(context: Context,\n                                                   source: str, endpoint: str,\n                                                   name: str,\n                                                   destination: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of a Clients task, actual implementation of the task is determined based on the URL scheme specified in <code>endpoint</code>. Puts information, source being a file, to another host or endpoint than the scenario is load testing and saves the response in a variable</p> <p>See Clients task documentation for more information about client tasks.</p> <p>Example:</p> <pre><code>Then put \"test-file.json\" to \"bs://my-storage?AccountKey=aaaabbb=&amp;Container=my-container\" with name \"upload-file\" as \"uploaded-test-file.json\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>source</code> str - relative path to file in <code>feature/requests</code>, supports Templating</li> <li><code>endpoint</code> str - information about where to get information, see the specific getter task implementations for more information</li> <li><code>name</code> str - name of the request, used in request statistics</li> <li><code>destination</code> str - name of source on the destination</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_client_put_endpoint_file","title":"step_task_client_put_endpoint_file","text":"<pre><code>@then(u'put \"{source}\" to \"{endpoint}\" with name \"{name}\"')\ndef step_task_client_put_endpoint_file(context: Context, source: str,\n                                       endpoint: str, name: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of a Clients task, actual implementation of the task is determined based on the URL scheme specified in <code>endpoint</code>. Puts information, source being a file, to another host or endpoint than the scenario is load testing and saves the response in a variable</p> <p>See Clients task documentation for more information about client tasks.</p> <p>Example:</p> <pre><code>Then put \"test-file.json\" to \"bs://my-storage?AccountKey=aaaabbb=&amp;Container=my-container\" with name \"upload-file\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>source</code> str - relative path to file in <code>feature/requests</code>, supports Templating</li> <li><code>endpoint</code> str - information about where to get information, see the specific getter task implementations for more information</li> <li><code>name</code> str - name of the request, used in request statistics</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_date","title":"step_task_date","text":"<pre><code>@then(u'parse date \"{value}\" and save in variable \"{variable}\"')\ndef step_task_date(context: Context, value: str, variable: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Date task. Parses a datetime string and transforms it according to specified arguments.</p> <p>See Date task documentation for more information about arguments.</p> <p>This step is useful when changes has to be made to a datetime representation during an iteration of a scenario.</p> <p>Example:</p> <pre><code>...\nAnd value for variable \"date1\" is \"none\"\nAnd value for variable \"date2\" is \"none\"\nAnd value for variable \"date3\" is \"none\"\nAnd value for variable \"AtomicDate.test\" is \"now\"\n\nThen parse date \"2022-01-17 12:21:37 | timezone=UTC, format=\"%Y-%m-%dT%H:%M:%S.%f\", offset=1D\" and save in variable \"date1\"\nThen parse date \"{{ AtomicDate.test }} | offset=-1D\" and save in variable \"date2\"\nThen parse date \"{{ datetime.now() }} | offset=1Y\" and save in variable \"date3\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>value</code> str - datetime string and arguments</li> <li><code>variable</code> str - name of, initialized, variable where response will be saved in</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_async_group_start","title":"step_task_async_group_start","text":"<pre><code>@given(u'an async request group with name \"{name}\"')\ndef step_task_async_group_start(context: Context, name: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Async Group task. All Request tasks created after this step will be added to the request group, until the group is closed.</p> <p>See Async Group task documentation for more information.</p> <p>Example:</p> <pre><code>Given an async request group with name \"async-group-1\"\nThen post request with name \"test-post-2\" to endpoint \"/api/test\"\n\"\"\"\n    {\n        \"value\": \"i have good news!\"\n    }\n\"\"\"\n\nThen get request with name \"test-get-1\" from endpoint \"/api/test\"\nAnd close async request group\n</code></pre> <p>In this example, the <code>put</code> and <code>get</code> requests will run asynchronously, and both requests will block following requests until both are finished.</p> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_async_group_close","title":"step_task_async_group_close","text":"<pre><code>@then(u'close async request group')\ndef step_task_async_group_close(context: Context) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Closes the instance created in step_task_async_group_start, and adds the Async Group task to the list of tasks that the scenario is going to execute.</p> <p>See Async Group task documentation for more information.</p> <p>Example:</p> <pre><code>Given an async request group with name \"async-group-1\"\nThen post request with name \"test-post-2\" to endpoint \"/api/test\"\n\"\"\"\n    {\n        \"value\": \"i have good news!\"\n    }\n\"\"\"\n\nThen get request with name \"test-get-1\" from endpoint \"/api/test\"\nAnd close async request group\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_timer_start","title":"step_task_timer_start","text":"<pre><code>@then(u'start timer with name \"{name}\"')\ndef step_task_timer_start(context: Context, name: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Timer task. Starts a timer to measure the \"request time\" for all tasks between the start and stop of the timer.</p> <p>See Timer task documentation for more information.</p> <p>Example:</p> <pre><code>Then start timer with name \"parsing-xml\"\n...\nAnd stop timer with name \"parsing-xml\"\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_timer_stop","title":"step_task_timer_stop","text":"<pre><code>@then(u'stop timer with name \"{name}\"')\ndef step_task_timer_stop(context: Context, name: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Adds the instance created by step_task_timer_start to the list of scenario tasks.</p> <p>See Timer task documentation for more information.</p> <p>Example:</p> <pre><code>Then start timer with name \"parsing-xml\"\n...\nAnd stop timer with name \"parsing-xml\"\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_wait_between","title":"step_task_wait_between","text":"<pre><code>@given(u'wait \"{min_time:g}..{max_time:g}\" seconds between tasks')\ndef step_task_wait_between(context: Context, min_time: float,\n                           max_time: float) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Task Wait task. Sets number of, randomly, seconds the Load User will wait between executing each task.</p> <p>See Task Wait task documentation for more information.</p> <p>Example:</p> <pre><code>And wait \"1.4..1.7\" seconds between tasks\n# wait between 1.4 and 1.7 seconds\nThen get request with name \"test-get-1\" from endpoint \"...\"\n# wait between 1.4 and 1.7 seconds\nThen get request with name \"test-get-2\" from endpoint \"...\"\n# wait between 1.4 and 1.7 seconds\nAnd wait \"0.1\" seconds between tasks\n# wait 0.1 seconds\nThen get request with name \"test-get-3\" from endpoint \"...\"\n# wait 0.1 seconds\n...\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_wait_constant","title":"step_task_wait_constant","text":"<pre><code>@given(u'wait \"{time:g}\" seconds between tasks')\ndef step_task_wait_constant(context: Context, time: float) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Task Wait task. Sets number of, constant, seconds the Load User will wait between executing each task.</p> <p>See Task Wait task documentation for more information.</p> <p>Example:</p> <pre><code>And wait \"1.4\" seconds between tasks\n# wait 1.4 seconds\nThen get request with name \"test-get-1\" from endpoint \"...\"\n# wait 1.4 seconds\nThen get request with name \"test-get-2\" from endpoint \"...\"\n# wait 1.4 seconds\nAnd wait \"0.1\" seconds between tasks\n# wait 0.1 seconds\nThen get request with name \"test-get-3\" from endpoint \"...\"\n# wait 0.1 seconds\n...\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_conditional_if","title":"step_task_conditional_if","text":"<pre><code>@when(\n    u'condition \"{condition}\" with name \"{name}\" is true, execute these tasks')\ndef step_task_conditional_if(context: Context, condition: str,\n                             name: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Conditional task which executes different sets of task depending on <code>condition</code>. Also sets the task in a state that any following tasks will be run when <code>condition</code> is true.</p> <p>See Conditional task documentation for more information.</p> <p>Example:</p> <pre><code>When condition \"{{ value | int &gt; 0 }}\" with name \"value-conditional\" is true, execute these tasks\nThen get request with name \"get-when-true\" from endpoint \"/api/true\"\nThen parse date \"2022-01-17 12:21:37 | timezone=UTC, format=\"%Y-%m-%dT%H:%M:%S.%f\", offset=1D\" and save in variable \"date1\"\nBut if condition is false, execute these tasks\nThen get request with name \"get-when-false\" from endpoint \"/api/false\"\nThen end condition\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_conditional_else","title":"step_task_conditional_else","text":"<pre><code>@then(u'if condition is false, execute these tasks')\ndef step_task_conditional_else(context: Context) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Changes the state of Conditional task instance created by step_task_conditional_if so that any following tasks will be run when <code>condition</code> is false.</p> <p>See Conditional task documentation for more information.</p> <p>Example:</p> <pre><code>When condition \"{{ value | int &gt; 0 }}\" with name \"value-conditional\" is true, execute these tasks\nThen get request with name \"get-when-true\" from endpoint \"/api/true\"\nThen parse date \"2022-01-17 12:21:37 | timezone=UTC, format=\"%Y-%m-%dT%H:%M:%S.%f\", offset=1D\" and save in variable \"date1\"\nBut if condition is false, execute these tasks\nThen get request with name \"get-when-false\" from endpoint \"/api/false\"\nThen end condition\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_conditional_end","title":"step_task_conditional_end","text":"<pre><code>@then(u'end condition')\ndef step_task_conditional_end(context: Context) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Closes the Conditional task instance created by step_task_conditional_if. This means that any following tasks specified will not be part of the conditional.</p> <p>See Conditional task documentation for more information.</p> <p>Example:</p> <pre><code>When condition \"{{ value | int &gt; 0 }}\" with name \"value-conditional\" is true, execute these tasks\nThen get request with name \"get-when-true\" from endpoint \"/api/true\"\nThen parse date \"2022-01-17 12:21:37 | timezone=UTC, format=\"%Y-%m-%dT%H:%M:%S.%f\", offset=1D\" and save in variable \"date1\"\nBut if condition is false, execute these tasks\nThen get request with name \"get-when-false\" from endpoint \"/api/false\"\nThen end condition\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_loop_start","title":"step_task_loop_start","text":"<pre><code>@then(u'loop \"{values}\" as variable \"{variable}\" with name \"{name}\"')\ndef step_task_loop_start(context: Context, values: str, variable: str,\n                         name: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Creates an instance of the Loop tasks which executes all wrapped tasks with a value from the list <code>values</code>. <code>values</code> must be a valid JSON list and supports Templating.</p> <p>See Loop task documentation for more information.</p> <p>Example:</p> <pre><code>Then loop \"{{ loop_values }}\" as variable \"loop_value\" with name \"test-loop\"\nThen log message \"loop_value={{ loop_value }}\"\nThen end loop\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_loop_end","title":"step_task_loop_end","text":"<pre><code>@then(u'end loop')\ndef step_task_loop_end(context: Context) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Closes the Loop task created by step_task_loop_start. This means that any following tasks specified will not be part of the loop.</p> <p>See Loop task documentation for more information.</p> <p>Example:</p> <pre><code>Then loop \"{{ loop_values }}\" as variable \"loop_value\" with name \"test-loop\"\nThen log message \"loop_value={{ loop_value }}\"\nThen end loop\n</code></pre> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/tasks/#step_task_keystore_get_default","title":"step_task_keystore_get_default","text":"<pre><code>@then(\n    u'get \"{key}\" from keystore and save in variable \"{variable}\", with default value \"{default_value}\"'\n)\ndef step_task_keystore_get_default(context: Context, key: str, variable: str,\n                                   default_value: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Get a value for <code>key</code> using the Tasks, if <code>key</code> does not exist in the keystore <code>default_value</code> will be used and will be set in the keystore to next iteration. <code>default_value</code> must be JSON serializable (string values must be single-quoted).</p> <p>See Keystore task task documentation for more information.</p> <p>Example:</p> <pre><code>And value for variable \"foobar\" is \"none\"\nThen get \"foobar\" from keystore and save in variable \"foobar\", with default value \"{'hello': 'world'}\"\n\n&lt;a id=\"grizzly.steps.scenario.tasks.step_task_keystore_get\"&gt;&lt;/a&gt;\n\n&lt;a id=\"pydoc:grizzly.steps.scenario.tasks.step_task_keystore_get\"&gt;&lt;/a&gt;\n## step\\_task\\_keystore\\_get\n\n```python\n@then(u'get \"{key}\" from keystore and save in variable \"{variable}\"')\ndef step_task_keystore_get(context: Context, key: str, variable: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Get a value for <code>key</code> using the Keystore task task.</p> <p>See Keystore task task documentation for more information.</p> <p>Example:</p> <pre><code>And value for variable \"foobar\" is \"none\"\nThen get \"foobar\" from keystore and save in variable \"foobar\"\n\n&lt;a id=\"grizzly.steps.scenario.tasks.step_task_keystore_set\"&gt;&lt;/a&gt;\n\n&lt;a id=\"pydoc:grizzly.steps.scenario.tasks.step_task_keystore_set\"&gt;&lt;/a&gt;\n## step\\_task\\_keystore\\_set\n\n```python\n@then(u'set \"{key}\" in keystore with value \"{value}\"')\ndef step_task_keystore_set(context: Context, key: str, value: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Set a value for <code>key</code> using the Keystore task task. <code>value</code> must be JSON serializable (string values must be single-quoted).</p> <p>See Keystore task task documentation for more information.</p> <p>Example:</p> <pre><code>And value for variable \"foobar\" is \"{'hello': 'world'}\"\nThen set \"foobar\" in keystore with value \"{{ foobar }}\"\n</code></pre>"},{"location":"framework/usage/steps/scenario/user/","title":"User","text":"<p> This module contains step implementations that describes a Load User.</p> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/user/#step_user_type_with_weight","title":"step_user_type_with_weight","text":"<pre><code>@given(\n    u'a user of type \"{user_class_name}\" with weight \"{weight_value}\" load testing \"{host}\"'\n)\ndef step_user_type_with_weight(context: Context, user_class_name: str,\n                               weight_value: str, host: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Sets which type of Load User the scenario should use and which <code>host</code> is the target, together with <code>weight</code> of the user (how many instances of this user should spawn relative to others).</p> <p>Example:</p> <pre><code>Given a user of type \"RestApi\" with weight \"2\" load testing \"...\"\nGiven a user of type \"MessageQueue\" with weight \"1\" load testing \"...\"\nGiven a user of type \"ServiceBus\" with weight \"1\" load testing \"...\"\nGiven a user of type \"BlobStorage\" with weight \"4\" load testing \"...\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>user_class_name</code> str - name of an implementation of Load User, with or without <code>User</code>-suffix</li> <li><code>weight_value</code> str - weight value for the user, default is <code>1</code> (see writing a locustfile)</li> <li><code>host</code> str - an URL for the target host, format depends on which Load User is specified</li> </ul> <p></p> <p></p>"},{"location":"framework/usage/steps/scenario/user/#step_user_type","title":"step_user_type","text":"<pre><code>@given(u'a user of type \"{user_class_name}\" load testing \"{host}\"')\ndef step_user_type(context: Context, user_class_name: str, host: str) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Sets which type of Load User the scenario should use and which <code>host</code> is the target.</p> <p>Example:</p> <pre><code>Given a user of type \"RestApi\" load testing \"http://api.example.com\"\nGiven a user of type \"MessageQueue\" load testing \"mq://mqm:secret@mq.example.com/?QueueManager=QMGR01&amp;Channel=Channel01\"\nGiven a user of type \"ServiceBus\" load testing \"sb://sb.example.com/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=abc123def456ghi789=\"\nGiven a user of type \"BlobStorage\" load testing \"DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=examplestorage;AccountKey=xxxyyyyzzz==\"\n</code></pre> <p>Arguments:</p> <ul> <li><code>user_class_name</code> str - name of an implementation of Load User, with or without <code>User</code>-suffix</li> <li><code>host</code> str - an URL for the target host, format depends on which Load User is specified</li> </ul>"},{"location":"framework/usage/tasks/","title":"Tasks","text":"<p> Tasks are functionality that is executed by <code>locust</code> at run time as they are specified in the feature file.</p> <p>The most essential task is Request, which all Load User is using to make requests to the endpoint that is being load tested.</p> <p>All other tasks are helper tasks for things that needs to happen after or before a Request, stuff like extracting information from a previous response or fetching additional test data from a different endpoint (\"Clients\").</p>"},{"location":"framework/usage/tasks/#custom","title":"Custom","text":"<p>It is possible to implement custom tasks, the only requirement is that they inherit <code>grizzly.tasks.GrizzlyTask</code>. To get them to be executed by <code>grizzly</code>, a step implementation is also needed.</p> <p>Boilerplate example of a custom task:</p> <pre><code>from typing import Any, cast\n\nfrom grizzly.context import GrizzlyContext\nfrom grizzly.tasks import GrizzlyTask, grizzlytask\nfrom grizzly.scenarios import GrizzlyScenario\nfrom grizzly.types.behave import Context, then\n\n\nclass TestTask(GrizzlyTask):\n    def __call__(self) -&gt; grizzlytask:\n        @grizzlytask\n        def task(parent: GrizzlyScenario) -&gt; Any:\n            print(f'{self.__class__.__name__}::task called')\n\n        @task.on_start\n        def on_start() -&gt; None:\n            print(f'{self.__class__.__name__}::on_start called')\n\n        @task.on_stop\n        def on_stop() -&gt; None:\n            print(f'{self.__class__.__name__}::on_stop called')\n\n        return task\n\n\n@then(u'run `TestTask`')\ndef step_run_testtask(context: Context) -&gt; None:\n    grizzly = cast(GrizzlyContext, context.grizzly)\n    grizzly.scenario.tasks.add(TestTask())\n</code></pre> <p>There are examples of this in the Example.</p>"},{"location":"framework/usage/tasks/async_group/","title":"Async Group","text":"<p> This task runs all requests in the group asynchronously.</p> <p>The name of requests added to the group will be prefixed with async group <code>&lt;name&gt;:</code></p> <p>Enable <code>gevent</code> debugging for this task by running with argument <code>--verbose</code> and setting environment variable <code>GEVENT_MONITOR_THREAD_ENABLE</code>.</p>"},{"location":"framework/usage/tasks/async_group/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_async_group_start</p> </li> <li> <p>step_task_async_group_close</p> </li> </ul> <p>Requests are added to the group with the same step implementations as Request task.</p>"},{"location":"framework/usage/tasks/async_group/#statistics","title":"Statistics","text":"<p>Executions of this task will be visible in <code>locust</code> request statistics with request type <code>ASYNC</code>. <code>name</code> will be suffixed with <code>(&lt;n&gt;)</code>, where <code>&lt;n&gt;</code> is the number of requests in the group. Each request in the group will have its own entry in the statistics as an ordinary Request task.</p>"},{"location":"framework/usage/tasks/async_group/#arguments","title":"Arguments","text":"<ul> <li><code>name</code> (str): name of the group of asynchronously requests</li> </ul>"},{"location":"framework/usage/tasks/conditional/","title":"Conditional","text":"<p> This task executes one or more other tasks based on <code>condition</code>.</p> <p>This is useful when a set of tasks should be executed if <code>condition</code> is <code>True</code>, and another set of tasks if <code>condition</code> is <code>False</code>.</p> <p>All tasks created between step_task_conditional_if and step_task_conditional_end will be wrapped in this instance and executed conditionally. If the task has its own <code>name</code> attribute, it will be prefixed with this tasks <code>name</code>.</p> <p>The step_task_conditional_else step expression is optional, if not used no additional tasks will be executed if <code>condition</code> is false.</p>"},{"location":"framework/usage/tasks/conditional/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_conditional_if</p> </li> <li> <p>step_task_conditional_else (optional)</p> </li> <li> <p>step_task_conditional_end</p> </li> </ul>"},{"location":"framework/usage/tasks/conditional/#statistics","title":"Statistics","text":"<p>Executions of this task will be visible in <code>locust</code> request statistics with request type <code>COND</code>. <code>name</code> is suffixed with <code>&lt;condition&gt; (&lt;n&gt;)</code>, where <code>&lt;condition&gt;</code> is the runtime resolved condition and <code>&lt;n&gt;</code> is the number of tasks that is executed for the resolved condition. Each task in the set for <code>condition</code> will have its own entry in the statistics, see respective Tasks documentation.</p>"},{"location":"framework/usage/tasks/conditional/#arguments","title":"Arguments","text":"<ul> <li> <p><code>name</code> str: name of the conditional, used in <code>locust</code> statistics</p> </li> <li> <p><code>condition</code> str: Templating string that must render <code>True</code> or <code>False</code></p> </li> </ul>"},{"location":"framework/usage/tasks/date/","title":"Date","text":"<p> This task parses a string representation of a date/time and allows transformation of it, such as specifying an offset or changing the format, and saves the result as a date/time string in an variable.</p>"},{"location":"framework/usage/tasks/date/#step-implementations","title":"Step implementations","text":"<ul> <li>step_task_date</li> </ul>"},{"location":"framework/usage/tasks/date/#arguments","title":"Arguments","text":"<ul> <li> <p><code>variable</code> str - name of, initialized, variable the parsed date should be saved in</p> </li> <li> <p><code>value</code> str - value</p> </li> </ul>"},{"location":"framework/usage/tasks/date/#format","title":"Format","text":""},{"location":"framework/usage/tasks/date/#value","title":"<code>value</code>","text":"<pre><code>&lt;date&gt; [| format=&lt;format&gt;][, timezone=&lt;timezone&gt;][, offset=&lt;offset&gt;]\n</code></pre> <ul> <li> <p><code>date</code> str/datetime - string representation of a date and/or time or a <code>datetime</code> object, e.g. <code>datetime.now()</code></p> </li> <li> <p><code>format</code> str - a python <code>strftime</code> format string or <code>ISO-8601:[DateTime|Time][:ms][:no-sep]</code>, this argument is required</p> </li> <li> <p><code>timezone</code> str (optional) - a valid timezone name</p> </li> <li> <p><code>offset</code> str (optional) - a time span string describing the offset, Y = years, M = months, D = days, h = hours, m = minutes, s = seconds, e.g. <code>1Y-2M10D</code></p> </li> </ul>"},{"location":"framework/usage/tasks/date/#iso-8601","title":"<code>ISO-8601</code>","text":"<p>See wikipedia ISO 8601 for information about the format. Specifying <code>DateTime</code> would result in \"Date and time with the offset\" and <code>Time</code> results in everything after \"T\" in the same example.</p> <p>In addition to this it is also possible to append milliseconds with <code>:ms</code> and remove all the seperators in the date and time with <code>:no-sep</code>.</p>"},{"location":"framework/usage/tasks/keystore/","title":"Keystore","text":"<p> This tasks sets and gets values from a distributed keystore. This makes is possible to share values between scenarios.</p> <p>Retreived (get) values are rendered before setting the variable. Stored (set) values are not rendered, so it is possible to store templates.</p> <p>The whole keystore is persistent, so anything stored will be loaded the next time the scenario runs.</p>"},{"location":"framework/usage/tasks/keystore/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_keystore_get</p> </li> <li> <p>step_task_keystore_get_default</p> </li> <li> <p>step_task_keystore_set</p> </li> </ul>"},{"location":"framework/usage/tasks/keystore/#statistics","title":"Statistics","text":"<p>This task only has request statistics entry, of type <code>KEYS</code>, if a key (without <code>default_value</code>) that does not have a value set is retrieved.</p>"},{"location":"framework/usage/tasks/keystore/#arguments","title":"Arguments","text":"<ul> <li> <p><code>key</code> str: name of key in keystore</p> </li> <li> <p><code>action</code> Action: literal <code>set</code> or <code>get</code></p> </li> <li> <p><code>action_context</code> str | Any: when <code>action</code> is <code>get</code> it must be a <code>str</code> (variable name), for <code>set</code> any goes (as long as it is json serializable and not <code>None</code>)</p> </li> <li> <p><code>default_value</code> Any (Optional): used when <code>action</code> is <code>get</code> and <code>key</code> does not exist in the keystore</p> </li> </ul>"},{"location":"framework/usage/tasks/log_message/","title":"Log Message","text":"<p> This task calls the <code>grizzly</code> logger to print a log message at level <code>INFO</code>. It can be used to visualize values for Templating variables.</p>"},{"location":"framework/usage/tasks/log_message/#step-implementations","title":"Step implementations","text":"<ul> <li>step_task_log_message</li> </ul>"},{"location":"framework/usage/tasks/log_message/#statistics","title":"Statistics","text":"<p>This task does not have any request statistics entries.</p>"},{"location":"framework/usage/tasks/log_message/#arguments","title":"Arguments","text":"<ul> <li><code>message</code> str - message to log at <code>INFO</code> level, can be a template</li> </ul>"},{"location":"framework/usage/tasks/loop/","title":"Loop","text":"<p> This task executes the wraped tasks for all values in provided list.</p> <p>All task created between step_task_loop_start and step_task_loop_end will be wrapped in this instance and executed for all values in the provided list (must be in JSON format).</p>"},{"location":"framework/usage/tasks/loop/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_loop_start</p> </li> <li> <p>step_task_loop_end</p> </li> </ul>"},{"location":"framework/usage/tasks/loop/#statistics","title":"Statistics","text":"<p>Executions of this task will be visible in <code>locust</code> request statistics with request type <code>LOOP</code> and <code>name</code> is suffixed with <code>(&lt;n&gt;)</code>, where <code>n</code> is the number of wrapped tasks. Each wrapped task will have its own entry in the statistics, see respective Tasks documentation.</p>"},{"location":"framework/usage/tasks/loop/#arguments","title":"Arguments","text":"<ul> <li> <p><code>name</code> str: name of the for loop, used in <code>locust</code> statistics</p> </li> <li> <p><code>values</code> str: Templating string which must be valid json and render to a list of values</p> </li> <li> <p><code>variable</code> str: name of variable that a value from <code>input_list</code> will be accessible in</p> </li> </ul>"},{"location":"framework/usage/tasks/request/","title":"Request","text":"<p> This task calls the <code>request</code> method of a <code>grizzly.users</code> implementation.</p> <p>This is the most essential task in <code>grizzly</code>, it defines requests that the specified load user is going to execute against the target under test.</p> <p>Optionally, the MIME type of the response can be set, this has to be done if any of the Response steps is going to be used.</p>"},{"location":"framework/usage/tasks/request/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_request_text_with_name_endpoint</p> </li> <li> <p>step_task_request_file_with_name_endpoint</p> </li> <li> <p>step_task_request_file_with_name</p> </li> <li> <p>step_task_request_text_with_name</p> </li> </ul>"},{"location":"framework/usage/tasks/request/#statistics","title":"Statistics","text":"<p>Executions of this task will be visible in <code>locust</code> request statistics with request type <code>method</code>.</p>"},{"location":"framework/usage/tasks/request/#arguments","title":"Arguments","text":"<ul> <li> <p><code>method</code> RequestMethod - method used for the request, e.g. <code>GET</code> or <code>POST</code>, also includes the direction (to or from)</p> </li> <li> <p><code>name</code> str - name of the request, used in <code>locust</code> statistics</p> </li> <li> <p><code>endpoint</code> str - endpoint on the load testing target, have different meaning depending on the specified Load User</p> </li> <li> <p><code>source</code> str (optional) - payload data sent to <code>endpoint</code>, can be a file path</p> </li> </ul>"},{"location":"framework/usage/tasks/request/#format","title":"Format","text":""},{"location":"framework/usage/tasks/request/#endpoint","title":"<code>endpoint</code>","text":"<p>All arguments will be removed from <code>endpoint</code> before creating the task instance.</p> <pre><code>&lt;endpoint&gt; [| content_type=&lt;content_type&gt;]\n</code></pre> <ul> <li> <p><code>endpoint</code> str - endpoint in format that the specified Load User understands</p> </li> <li> <p><code>content_type</code> TransformerContentType (optional) - MIME type of response from <code>endpoint</code></p> </li> </ul> <p>Specifying MIME/content type as an argument to <code>endpoint</code> is the same as using step_response_content_type.</p> <pre><code>Then put request \"test/request.j2.json\" with name \"test-put\" to endpoint \"/api/test | content_type=json\"\n\n# same as\nThen put request \"test/request.j2.json\" with name \"test-put\" to endpoint \"/api/test\"\nAnd set response content type to \"application/json\"\n</code></pre>"},{"location":"framework/usage/tasks/set_variable/","title":"Set Variable","text":"<p> This task sets a testdata variable during runtime.</p>"},{"location":"framework/usage/tasks/set_variable/#step-implementations","title":"Step implementations","text":"<ul> <li>step_setup_variable_value</li> </ul>"},{"location":"framework/usage/tasks/set_variable/#statistics","title":"Statistics","text":"<p>This task does not have any request statistics entries.</p>"},{"location":"framework/usage/tasks/set_variable/#arguments","title":"Arguments","text":"<ul> <li> <p><code>variable</code> str - name of the variable that should be set</p> </li> <li> <p><code>value</code> value - value of the variable being set, must be a template</p> </li> </ul>"},{"location":"framework/usage/tasks/task_wait/","title":"Task Wait","text":"<p> This task sets the wait time between tasks in a scenario.</p> <p>The default is to wait <code>0</code> seconds between each task.</p> <p>This is useful in a scenario with many tasks that should have some wait time between them, but there are a group of tasks (e.g. Transform, Date or Log Messages) that should execute as fast as possible.</p> <p>If <code>max_time</code> is not provided, the wait between tasks is constant <code>min_time</code>. If both are provided there will be a random wait between (and including) <code>min_time</code> and <code>max_time</code> between tasks.</p>"},{"location":"framework/usage/tasks/task_wait/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_wait_constant</p> </li> <li> <p>step_task_wait_between</p> </li> </ul>"},{"location":"framework/usage/tasks/task_wait/#statistics","title":"Statistics","text":"<p>This task does not have any request statistics entries.</p>"},{"location":"framework/usage/tasks/task_wait/#arguments","title":"Arguments","text":"<ul> <li> <p><code>min_time</code> float - minimum time to wait</p> </li> <li> <p><code>max_time</code> float (optional) - maximum time to wait</p> </li> </ul>"},{"location":"framework/usage/tasks/timer/","title":"Timer","text":"<p> This task \"wraps\" a group of other tasks, that might not have any requests and hence no statistics, to measure how long time they took. Request content length for this task in the scenario is number of tasks between starting and stopping the timer.</p> <p>Odd executions of this task starts the timer by setting a timestamp for the task. Even executions of this task stops the timer and logs the \"response time\" in the <code>locust</code> statistics.</p>"},{"location":"framework/usage/tasks/timer/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_timer_start</p> </li> <li> <p>step_task_timer_stop</p> </li> </ul>"},{"location":"framework/usage/tasks/timer/#statistics","title":"Statistics","text":"<p>Executions of this task will be visible in <code>locust</code> statistics with request type <code>TIMR</code>. <code>name</code> will be prefixed with <code>(&lt;n&gt;)</code>, where <code>&lt;n&gt;</code> indicates how many tasks was run between the start and stop of this timer. Response time is the total time it took for the <code>&lt;n&gt;</code> tasks to run.</p>"},{"location":"framework/usage/tasks/timer/#arguments","title":"Arguments","text":"<ul> <li><code>name</code> str - name of the timer</li> </ul>"},{"location":"framework/usage/tasks/transformer/","title":"Transformer","text":"<p> This task transforms a variable value to a document of correct type, so an expression can be used to extract values from the document to be used in another variable.</p> <p>This is especially useful when used in combination with other variables variables containing a lot of information, where many parts of a message can be useful to re-use.</p> <p>Instances of this task is created with the step expression:</p>"},{"location":"framework/usage/tasks/transformer/#step-implementations","title":"Step implementations","text":"<ul> <li>step_task_transform</li> </ul>"},{"location":"framework/usage/tasks/transformer/#statistics","title":"Statistics","text":"<p>Executions of this task will not be visible in <code>locust</code> request statistics, unless something goes wrong. It will then have the request type <code>TRNSF</code>.</p>"},{"location":"framework/usage/tasks/transformer/#arguments","title":"Arguments","text":"<ul> <li> <p><code>contents</code> str - text to parse, supports Templating or a static string</p> </li> <li> <p><code>content_type</code> TransformerContentType - MIME type of <code>contents</code>, which transformer to use</p> </li> <li> <p><code>expression</code> str - JSON- or XPath expression to extract specific values in <code>contents</code></p> </li> <li> <p><code>variable</code> str - name of variable to save value to, must have been intialized</p> </li> </ul>"},{"location":"framework/usage/tasks/until/","title":"Until","text":"<p> This task calls the <code>request</code> method of a <code>grizzly.users</code> implementation, until condition matches the payload returned for the request.</p>"},{"location":"framework/usage/tasks/until/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_request_with_name_endpoint_until</p> </li> <li> <p>step_task_client_get_endpoint_until</p> </li> </ul>"},{"location":"framework/usage/tasks/until/#statistics","title":"Statistics","text":"<p>Executions of this task will be visible in <code>locust</code> request statistics with request type <code>UNTL</code> indicating how long time it took to finish the task. <code>name</code> will be suffixed with <code>r=&lt;retries&gt;, w=&lt;wait&gt;, em=&lt;expected_matches&gt;</code>.</p> <p>The request task that is being repeated until <code>condition</code> is true will have it's own entry in the statistics as an ordinary Request or Clients task.</p>"},{"location":"framework/usage/tasks/until/#arguments","title":"Arguments","text":"<ul> <li> <p><code>request</code> Request / Clients - request that is going to be repeated</p> </li> <li> <p><code>condition</code> str - condition expression that specifies how <code>request</code> should be repeated</p> </li> </ul>"},{"location":"framework/usage/tasks/until/#format","title":"Format","text":""},{"location":"framework/usage/tasks/until/#condition","title":"<code>condition</code>","text":"<pre><code>&lt;expression&gt; [| [retries=&lt;retries&gt;][, wait=&lt;wait&gt;][, expected_matches=&lt;expected_matches&gt;]]\n</code></pre> <ul> <li> <p><code>expression</code> str - JSON- or Xpath expression</p> </li> <li> <p><code>retries</code> int (optional) - maximum number of times to repeat the request if <code>condition</code> is not met (default <code>3</code>)</p> </li> <li> <p><code>wait</code> float (optional) - number of seconds to wait between retries (default <code>1.0</code>)</p> </li> <li> <p><code>expected_matches</code> int (optional): number of matches that the expression should match (default <code>1</code>)</p> </li> </ul>"},{"location":"framework/usage/tasks/wait/","title":"Wait","text":"<p> This task executes a <code>gevent.sleep</code> and is used to manually create delays between steps in a scenario.</p>"},{"location":"framework/usage/tasks/wait/#step-implementations","title":"Step implementations","text":"<ul> <li>step_task_wait_seconds</li> </ul>"},{"location":"framework/usage/tasks/wait/#arguments","title":"Arguments","text":"<ul> <li><code>time_expression</code> str - float as string or a {@pydocfractions of seconds to excplicitly sleep in the scenario</li> </ul>"},{"location":"framework/usage/tasks/clients/","title":"Clients","text":"<p> Client tasks is functionality that is executed by locust and is registred to an URL scheme. These tasks is used to make a request to another host than the scenario is actually load testing.</p>"},{"location":"framework/usage/tasks/clients/#statistics","title":"Statistics","text":"<p>Executions of all client tasks will be visible with request type <code>CLNT</code>.</p>"},{"location":"framework/usage/tasks/clients/#arguments","title":"Arguments","text":"<ul> <li><code>endpoint</code> str - describes the request</li> </ul> <p>If <code>endpoint</code> is a template variable which includes the scheme, the scheme for the request must be specified so the correct <code>grizzly.tasks.client</code> implementation is used. The additional scheme will be removed when the request is performed.</p> <p></p> <p></p>"},{"location":"framework/usage/tasks/clients/#class-clienttask","title":"Class ClientTask","text":"<pre><code>@template('endpoint', 'destination', 'source', 'name', 'variable_template')\nclass ClientTask(GrizzlyMetaRequestTask)\n</code></pre> <p>[view_source]</p> <p></p> <p></p>"},{"location":"framework/usage/tasks/clients/#execute","title":"execute","text":"<pre><code>def execute(parent: GrizzlyScenario) -&gt; GrizzlyResponse\n</code></pre> <p>[view_source]</p> <p>This method is sometimes called directly when wrapped in another task, so the grizzlytask-decorated method above might not execute at all.</p>"},{"location":"framework/usage/tasks/clients/blobstorage/","title":"Blobstorage","text":"<p>This task performs Azure Blob Storage put operations to a specified endpoint.</p> <p>This is useful if the scenario is another user type than <code>BlobStorageUser</code>, but the scenario still requires an action towards a blob container.</p> <p>Only supports <code>RequestDirection.TO</code>.</p>"},{"location":"framework/usage/tasks/clients/blobstorage/#step-implementations","title":"Step implementations","text":"<ul> <li>step_task_client_put_endpoint_file_destination</li> </ul>"},{"location":"framework/usage/tasks/clients/blobstorage/#arguments","title":"Arguments","text":"<ul> <li> <p><code>direction</code> RequestDirection - if the request is upstream or downstream</p> </li> <li> <p><code>endpoint</code> str - specifies details to be able to perform the request, e.g. account and container information</p> </li> <li> <p><code>name</code> str - name used in <code>locust</code> statistics</p> </li> <li> <p><code>destination</code> str (optional) - name of the file when uploaded, if not specified the basename of <code>source</code> will be used</p> </li> <li> <p><code>source</code> str (optional) - file path of local file that should be saved in <code>Container</code></p> </li> </ul>"},{"location":"framework/usage/tasks/clients/blobstorage/#format","title":"Format","text":""},{"location":"framework/usage/tasks/clients/blobstorage/#endpoint","title":"<code>endpoint</code>","text":"<pre><code>bs[s]://&lt;AccountName&gt;?AccountKey=&lt;AccountKey&gt;&amp;Container=&lt;Container&gt;[&amp;Overwrite=&lt;bool&gt;]\n</code></pre> <ul> <li> <p><code>AccountName</code> str - name of storage account</p> </li> <li> <p><code>AccountKey</code> str - secret key to be able to \"connect\" to the storage account</p> </li> <li> <p><code>Container</code> str - name of the container to perform the request on</p> </li> <li> <p><code>Overwrite</code> bool - if files should be overwritten if they already exists in <code>Container</code> (default: <code>False</code>)</p> </li> </ul>"},{"location":"framework/usage/tasks/clients/blobstorage/#destination","title":"<code>destination</code>","text":"<p>The MIME type of an uploaded file will automagically be guessed based on the [rendered] destination file extension.</p>"},{"location":"framework/usage/tasks/clients/http/","title":"HTTP","text":"<p> This task performs a HTTP request to a specified endpoint.</p> <p>This is useful if the scenario is using a non-HTTP user or a request to a URL other than the one under testing is needed, e.g. for testdata.</p> <p>Only supports <code>RequestDirection.FROM</code>.</p>"},{"location":"framework/usage/tasks/clients/http/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_client_get_endpoint_payload</p> </li> <li> <p>step_task_client_get_endpoint_payload_metadata</p> </li> </ul>"},{"location":"framework/usage/tasks/clients/http/#arguments","title":"Arguments","text":"<ul> <li> <p><code>direction</code> RequestDirection - only <code>RequestDirection.FROM</code> is implemented</p> </li> <li> <p><code>endpoint</code> str - URL to perform GET request from</p> </li> <li> <p><code>name</code> str - name used in <code>locust</code> statistics</p> </li> </ul>"},{"location":"framework/usage/tasks/clients/http/#authentication","title":"Authentication","text":"<p>To enable authentication for <code>HttpClientTask</code> the <code>auth</code> context tree has to be correctly set. This is done by using step_setup_set_context_variable where the branches are prefixed with <code>&lt;host&gt;/</code>, e.g.:</p> <pre><code>And value for variable \"foobar\" is \"none\"\nAnd value for variable \"url\" is \"https://www.example.com/api/test\"\nAnd set context variable \"www.example.com/auth.user.username\" to \"bob\"\nAnd set context variable \"www.example.com/auth.user.password\" to \"password\"\nAnd set context variable \"www.example.com/auth.user.redirect_uri\" to \"/authenticated\"\nAnd set context variable \"www.example.com/auth.provider\" to \"https://login.example.com/oauth2\"\nAnd set context variable \"www.example.com/auth.client.id\" to \"aaaa-bbbb-cccc-dddd\"\n\nThen get \"https://{{ url }}\" with name \"authenticated-get\" and save response payload in \"foobar\"\n</code></pre> <p>This will make any requests towards <code>www.example.com</code> to get a token from <code>http://login.example.com/oauth2</code> and use it in any requests towards <code>www.example.com</code>.</p> <p>For more details, see Azure Active Directory.</p>"},{"location":"framework/usage/tasks/clients/messagequeue/","title":"Messagequeue","text":"<p>This task performs IBM MQM get and put opertions to a specified queue or topic.</p> <p>This is useful if the scenario is another user type than <code>MessageQueueUser</code>, but the scenario still requires an action towards an MQ server. Use Transformer task to extract specific parts of the message.</p> <p>Grizzly must have been installed with the extra <code>mq</code> package and native IBM MQ libraries must be installed for being able to use this variable:</p> <pre><code>pip3 install grizzly-loadtester[mq]\n</code></pre>"},{"location":"framework/usage/tasks/clients/messagequeue/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_client_get_endpoint_payload</p> </li> <li> <p>step_task_client_get_endpoint_payload_metadata</p> </li> <li> <p>step_task_client_put_endpoint_file</p> </li> </ul>"},{"location":"framework/usage/tasks/clients/messagequeue/#arguments","title":"Arguments","text":"<ul> <li> <p><code>direction</code> RequestDirection - if the request is upstream or downstream</p> </li> <li> <p><code>endpoint</code> str - specifies details to be able to perform the request, e.g. account and container information</p> </li> <li> <p><code>name</code> str - name used in <code>locust</code> statistics</p> </li> <li> <p><code>destination</code> str (optional) - not used by this client</p> </li> <li> <p><code>source</code> str (optional) - file path of local file that should be put on <code>endpoint</code></p> </li> </ul>"},{"location":"framework/usage/tasks/clients/messagequeue/#format","title":"Format","text":""},{"location":"framework/usage/tasks/clients/messagequeue/#endpoint","title":"<code>endpoint</code>","text":"<pre><code>mq[s]://&lt;username&gt;:&lt;password&gt;@]&lt;hostname&gt;[:&lt;port&gt;]/&lt;endpoint&gt;?QueueManager=&lt;queue manager&gt;&amp;Channel=&lt;channel&gt;[&amp;wait=&lt;wait&gt;][&amp;heartbeat=&lt;heartbeat&gt;][&amp;KeyFile=&lt;key repo path&gt;[&amp;SslCipher=&lt;ssl cipher&gt;][&amp;CertLabel=&lt;certificate label&gt;]][&amp;HeaderType=&lt;header type&gt;][&amp;MaxMessageSize=&lt;number of bytes&gt;]\n</code></pre> <p>All variables in the endpoint have support for Templating.</p> <ul> <li> <p><code>mq[s]</code> str - must be specified, <code>mqs</code> implies connecting with TLS, if <code>KeyFile</code> is not set in querystring, it will look for a key repository in <code>./&lt;username&gt;</code></p> </li> <li> <p><code>username</code> str (optional) - username to authenticate with, default <code>None</code></p> </li> <li> <p><code>password</code> str (optional) - password to authenticate with, default <code>None</code></p> </li> <li> <p><code>hostname</code> str - hostname of MQ server</p> </li> <li> <p><code>port</code> int (optional) - port on MQ server, default <code>1414</code></p> </li> <li> <p><code>endpoint</code> str - prefixed with either <code>topic:</code> or <code>queue:</code> and then the name of the endpoint to perform operations on</p> </li> <li> <p><code>wait</code> int (optional) - number of seconds to wait for an message, default is to wait infinite (0 seconds)</p> </li> <li> <p><code>heartbeat</code> int (optional) - number of seconds between heartbeats, default is 300 seconds</p> </li> <li> <p><code>QueueManager</code> str - name of queue manager</p> </li> <li> <p><code>Channel</code> str - name of channel to connect to</p> </li> <li> <p><code>KeyFile</code> str (optional) - path to key repository for certificates needed to connect over TLS</p> </li> <li> <p><code>SslCipher</code> str (optional) - SSL cipher to use for connection, default <code>ECDHE_RSA_AES_256_GCM_SHA384</code></p> </li> <li> <p><code>CertLabel</code> str (optional) - label of certificate in key repository, default <code>username</code></p> </li> <li> <p><code>HeaderType</code> str (optional) - header type, can be <code>RFH2</code> for sending gzip compressed messages using RFH2 header, default <code>None</code></p> </li> <li> <p><code>MaxMessageSize</code> int (optional) - maximum number of bytes a message can be for the client to accept it, default is <code>None</code> which implies that the client will throw <code>MQRC_TRUNCATED_MSG_FAILED</code>, adjust buffer and try again.</p> </li> </ul>"},{"location":"framework/usage/tasks/clients/servicebus/","title":"Servicebus","text":"<p>This task performs Azure SerciceBus operations to a specified endpoint.</p>"},{"location":"framework/usage/tasks/clients/servicebus/#step-implementations","title":"Step implementations","text":"<ul> <li> <p>step_task_client_get_endpoint_payload</p> </li> <li> <p>step_task_client_get_endpoint_payload_metadata</p> </li> <li> <p>step_task_client_put_endpoint_file</p> </li> </ul>"},{"location":"framework/usage/tasks/clients/servicebus/#arguments","title":"Arguments","text":"<ul> <li> <p><code>direction</code> RequestDirection - if the request is upstream or downstream</p> </li> <li> <p><code>endpoint</code> str - specifies details to be able to perform the request, e.g. Service Bus resource, queue, topic, subscription etc.</p> </li> <li> <p><code>name</code> str - name used in <code>locust</code> statistics</p> </li> <li> <p><code>destination</code> str (optional) - not used by this client</p> </li> <li> <p><code>source</code> str (optional) - file path of local file that should be put on <code>endpoint</code></p> </li> </ul>"},{"location":"framework/usage/tasks/clients/servicebus/#format","title":"Format","text":""},{"location":"framework/usage/tasks/clients/servicebus/#endpoint","title":"<code>endpoint</code>","text":"<p>Value of this is basically the \"Connection String\" from Azure (without <code>Endpoint=</code> prefix), with some additional information.</p> <pre><code>sb://&lt;sbns resource name&gt;.servicebus.windows.net/[queue:&lt;queue name&gt;|topic:&lt;topic name&gt;[/subscription:&lt;subscription name&gt;]][/expression:&lt;expression&gt;];SharedAccessKeyName=&lt;policy name&gt;;SharedAccessKey=&lt;access key&gt;[#[Consume=&lt;consume&gt;][&amp;][MessageWait=&lt;wait&gt;][&amp;][ContentType&lt;content type&gt;]]\n</code></pre> <p>All variables in the endpoint have support for Templating.</p> <p>Network location:</p> <ul> <li><code>&lt;sbns resource name&gt;</code> str - must be specfied, Azure Service Bus Namespace name</li> </ul> <p>Path:</p> <ul> <li> <p><code>&lt;queue name&gt;</code> str - name of queue, prefixed with <code>queue:</code> of an existing queue (mutual exclusive<sup>1</sup>)</p> </li> <li> <p><code>&lt;topic name&gt;</code> str - name of topic, prefixed with <code>topic:</code> of an existing topic (mutual exclusive<sup>1</sup>)</p> </li> <li> <p><code>&lt;subscription name&gt;</code> str - name of an subscription on <code>topic name</code>, either an existing, or one to be created (if step text containing SQL Filter rule is specified), the actual subscription name will be suffixed with unique id related to the user instance</p> </li> <li> <p><code>&lt;expression&gt;</code> str - JSON or XPath expression to filter out message on payload, only applicable when receiving messages</p> </li> </ul> <p><sup>1</sup> Either specify <code>queue:</code> or <code>topic</code>, not both</p> <p>Query:</p> <ul> <li> <p><code>&lt;policy name&gt;</code> str - name of the Service Bus policy to be used</p> </li> <li> <p><code>&lt;access key&gt;</code> str - secret access key for specified <code>policy name</code></p> </li> </ul> <p>Fragment:</p> <ul> <li> <p><code>&lt;consume&gt;</code> bool - if messages should be consumed (removed from endpoint), or only peeked at (left on endpoint) (default: <code>True</code>)</p> </li> <li> <p><code>&lt;wait&gt;</code> int - how many seconds to wait for a message to arrive on the endpoint (default: <code>\u221e</code>)</p> </li> <li> <p><code>&lt;content type&gt;</code> str - content type of response payload, should be used in combination with <code>&lt;expression&gt;</code></p> </li> </ul>"},{"location":"framework/usage/variables/environment-configuration/","title":"Environment configuration","text":"<p>It is possible to make the feature file environment agnostic by providing a <code>yaml</code> file containing a dictionary with a root node named <code>configuration</code>. The environment configuration file can also be used to store credentials and other sensitive information that should not be under version control.</p> <p>Internally <code>grizzly</code> will check if the environment variable <code>GRIZZLY_CONFIGURATION_FILE</code> is set and contains a valid environment configuration file. When using <code>grizzly-cli</code> you specify the file with <code>-e/--environment-file</code> which then will be set as a value for <code>GRIZZLY_CONFIGURATION_FILE</code>.</p>"},{"location":"framework/usage/variables/environment-configuration/#format","title":"Format","text":"<p>An example environment configuration file:</p> <pre><code>configuration:\nfrontend:\nhost: https://www.example.com\nbackend:\nhost: https://backend.example.com\nauth:\nuser:\nusername: bob\npassword: Who-the-f-is-alice\n</code></pre> <p>The only rule for any nodes under <code>configuration</code> is that it must be a dictionary, since the path to a value will be flattened.</p>"},{"location":"framework/usage/variables/environment-configuration/#usage","title":"Usage","text":"<p>In a feature file the dictionary can then be used by prefixing the path of a node under <code>configuration</code> with <code>$conf::&lt;tree path to variable&gt;$</code>.</p> <p>Example:</p> <pre><code>Feature: application test\nBackground: common configuration\n    Given \"1\" users\nAnd spawn rate is \"1\" user per second\nAnd stop on first failure\n\nScenario: frontend\n    Given a user of type \"RestApi\" load testing \"$conf::frontend.host$\"\n    ...\n\nScenario: backend\n    Given a user of type \"RestApi\" load testing \"$conf::backend.host$\"\nAnd set context variable \"auth.user.username\" to \"$conf::backend.auth.user.username$\"\nAnd set context variable \"auth.user.password\" to \"$conf::backend.auth.user.password$\"\n</code></pre> <p>This feature can now be run against a different environment just by creating a new environment configuration file with different values.</p>"},{"location":"framework/usage/variables/templating/","title":"Templating","text":""},{"location":"framework/usage/variables/templating/#templating","title":"Templating","text":"<p><code>grizzly</code> has support for templating in both step expression variables (most) and request payload, with the templating backend Jinja2, and also <code>grizzly</code> specific templating variables from environment variables or environment configuration files. The later is resolved before a test is started, while the former is resolved during run time. See Environment configuration on how to use <code>$conf::</code>-variables.</p>"},{"location":"framework/usage/variables/templating/#request-payload","title":"Request payload","text":"<p>Request payload is treated as complete Jinja2 templates and has full support for any Jinja2 features. Request payload files must be stored in <code>./features/requests</code> and are referenced in a feature file as a relative path to that directory.</p> <pre><code>.\n\u2514\u2500\u2500 features\n    \u251c\u2500\u2500 load-test.feature\n    \u2514\u2500\u2500 requests\n        \u2514\u2500\u2500 load-test\n            \u2514\u2500\u2500 request.j2.json\n</code></pre> <p>Consider that <code>load-test.feature</code> contains the following steps:</p> <pre><code>Feature: templating example\nBackground: common settings for all scenarios\n    Given \"1\" user\nAnd spawn rate is \"1\" user per second\nAnd stop on first failure\n\nScenario: example\n    Given a user of type \"RestApi\" load testing \"https://localhost\"\nAnd repeat for \"3\" iterations\nAnd value for variable \"AtomicIntegerIncrementer.items\" is \"1 | step=3\"\nThen post request \"load-test/request.j2.json\" with name \"template-request\" to endpoint \"/api/v1/test\"\n</code></pre> <p><code>request.j2.json</code> is a full Jinja2 template which will be rendered before the request is sent. The reason for this is that testdata variables can be used in the template, and these can change for each request.</p> <p>If <code>request.j2.json</code> contains the following:</p> <pre><code>[\n{%- for n in range(AtomicIntegerIncrementer.items) %}\n{\n\"item\": {{ n }},\n\"name\": \"item-{{ n }}\"\n}\n{%- if n &lt; AtomicIntegerIncrementer.items - 1 %},{%- endif %}\n{%- endfor %}\n]\n</code></pre> <p>Since the scenario has been setup to run for <code>3</code> iterations with <code>1</code> user and assumed that we run it locally, or distributed with one worker node, the scenario will run three times.</p> <p>The first post request to <code>/api/v1/test</code> will have the following payload:</p> <pre><code>[\n{\n\"item\": 0,\n\"name\": \"item-0\"\n}\n]\n</code></pre> <p>The second post request:</p> <pre><code>[\n{\n\"item\": 0,\n\"name\": \"item-0\"\n},\n{\n\"item\": 1,\n\"name\": \"item-1\"\n},\n{\n\"item\": 2,\n\"name\": \"item-2\"\n},\n{\n\"item\": 3,\n\"name\": \"item-3\"\n}\n]\n</code></pre> <p>The third post request:</p> <pre><code>[\n{\n\"item\": 0,\n\"name\": \"item-0\"\n},\n{\n\"item\": 1,\n\"name\": \"item-1\"\n},\n{\n\"item\": 2,\n\"name\": \"item-2\"\n},\n{\n\"item\": 3,\n\"name\": \"item-3\"\n},\n{\n\"item\": 4,\n\"name\": \"item-4\"\n},\n{\n\"item\": 5,\n\"name\": \"item-5\"\n},\n{\n\"item\": 6,\n\"name\": \"item-6\"\n}\n]\n</code></pre>"},{"location":"framework/usage/variables/templating/#step-expression","title":"Step expression","text":"<p>Most step expressions also support templating for their variables, for example:</p> <pre><code>And set context variable \"auth.user.username\" to \"$conf::backend.auth.user.username$\"\nAnd set context variable \"auth.refresh_time\" to \"{{ AtomicIntegerIncrementer.refresh_time }}\"\nAnd repeat for \"{{ iterations * 0.25 }}\"\nAnd save statistics to \"influxdb://$conf::statistics.username$:$conf::statistics.password$@{{ influxdb_host }}/$conf::statistics.database$\"\nAnd ask for value of variable \"initial_id\"\nAnd value for variable \"AtomicIntegerIncrementer.id1\" is \"{{ initial_id }}\"\nAnd value for variable \"AtomicIntegerIncrementer.id2\" is \"{{ initial_id }}\"\nThen put request with name \"example-{{ initial_id }}\" to \"/api/v{{ initial_id }}/test\"\n\"\"\"\n    {\n        \"test\": {\n            \"value\": \"{{ initial_id }}\"\n        }\n    }\n\"\"\"\n</code></pre>"},{"location":"framework/usage/variables/templating/#custom-filters","title":"Custom filters","text":"<p>It is possible to implement custom jinja2 filters by decorating them with <code>grizzly.testdata.utils.templatingfilter</code>.</p> <pre><code>from grizzly.testdata.utils import templatingfilter\n\n\n@templatingfilter\ndef touppercase(value: str) -&gt; str:\n    return value.upper()\n</code></pre> <p>The name of the filter will be the same as the function name. By using the decorator it will be added to the default filters and can be used in templating expressions, such as:</p> <pre><code>And value for variable \"foo\" is \"bar\"\nAnd value for variable \"bar\" is \"{{ foo | touppercase }}\"\n\nThen log message \"foo={{ foo | touppercase }}, bar={{ bar }}\"\n</code></pre> <p>A good place to define your filters is in your projects <code>features/environment.py</code> file. If you define it in any file containing step implementation the filter might be registered twice, and you'll get an error that an filter already exists with the name.</p>"},{"location":"framework/usage/variables/testdata/","title":"Testdata","text":"<p> This package contains special variables that can be used in a feature file and is synchronized between locust workers.</p>"},{"location":"framework/usage/variables/testdata/#custom","title":"Custom","text":"<p>It is possible to implement custom testdata variables, the only requirement is that they inherit <code>grizzly.testdata.variables.AtomicVariable</code>. When initializing the variable, the full namespace has to be specified as <code>name</code> in the scenario step_setup_variable_value step.</p> <p>There are examples of this in the Example.</p>"},{"location":"framework/usage/variables/testdata/csv_reader/","title":"CSV Reader","text":"<p> This variable reads a CSV file and provides a new row from the CSV file each time it is accessed.</p> <p>The CSV files must have headers for each column, since these are used to reference the value.</p>"},{"location":"framework/usage/variables/testdata/csv_reader/#format","title":"Format","text":"<p>Value is the path, relative to <code>requests/</code>, of an file ending with <code>.csv</code>.</p>"},{"location":"framework/usage/variables/testdata/csv_reader/#arguments","title":"Arguments","text":"<ul> <li><code>repeat</code> bool (optional) - whether values should be reused, e.g. when reaching the end it should start from the beginning again (default: <code>False</code>)</li> <li><code>random</code> bool (optional) - if rows should be selected by random, instead of sequential from first to last (default: <code>False</code>)</li> </ul>"},{"location":"framework/usage/variables/testdata/csv_reader/#example","title":"Example","text":"<p><code>requests/example.csv</code>:</p> <pre><code>username,password\nbob1,some-password\nalice1,some-other-password\nbob2,password\n</code></pre> <pre><code>And value for variable \"AtomicCsvReader.example\" is \"example.csv | random=False, repeat=True\"\nThen post request with name \"authenticate\" to endpoint \"/api/v1/authenticate\"\n\"\"\"\n  {\n      \"username\": \"{{ AtomicCsvReader.example.username }}\",\n      \"password\": \"{{ AtomicCsvReader.example.password }}\"\n  }\n\"\"\"\n</code></pre> <p>First request the payload will be:</p> <pre><code>{\n\"username\": \"bob1\",\n\"password\": \"some-password\"\n}\n</code></pre> <p>Second request:</p> <pre><code>{\n\"username\": \"alice1\",\n\"password\": \"some-other-password\"\n}\n</code></pre> <p>etc.</p>"},{"location":"framework/usage/variables/testdata/csv_writer/","title":"CSV Writer","text":"<p> This variable writes to a CSV file.</p> <p>The CSV files must have headers for each column, since these are used to reference the value.</p> <p>When setting the value of the variable there must be one value per specified header.</p>"},{"location":"framework/usage/variables/testdata/csv_writer/#format","title":"Format","text":"<p>Value is the path, relative to <code>requests/</code>, of an file ending with <code>.csv</code>.</p>"},{"location":"framework/usage/variables/testdata/csv_writer/#arguments","title":"Arguments","text":"<ul> <li><code>headers</code> List[str] - comma seperated list of headers to be used in destination file</li> <li><code>overwrite</code> bool (optional) - if destination file exists and should be overwritten (default: <code>False</code>)</li> </ul>"},{"location":"framework/usage/variables/testdata/csv_writer/#example","title":"Example","text":"<pre><code>And value for variable \"AtomicCsvWriter.output\" is \"output.csv | headers='foo,bar'\"\n...\nAnd value for variable \"AtomicCsvWriter.output\" is \"{{ foo_value }}, {{ bar_value }}\"\n</code></pre>"},{"location":"framework/usage/variables/testdata/date/","title":"Date","text":"<p> This variable is used to format and use dates.</p>"},{"location":"framework/usage/variables/testdata/date/#format","title":"Format","text":"<p>Initial value can, other than a parseable datetime string, be <code>now</code>. Each time the variable is accessed the value will represent that date and time at the time of access.</p>"},{"location":"framework/usage/variables/testdata/date/#arguments","title":"Arguments","text":"<ul> <li><code>format</code> str - a python <code>strftime</code> format string, this argument is required</li> <li><code>timezone</code> str (optional) - a valid timezone name</li> <li><code>offset</code> str (optional) - a time span string describing the offset, Y = years, M = months, D = days, h = hours, m = minutes, s = seconds, e.g. <code>1Y-2M10D</code></li> </ul>"},{"location":"framework/usage/variables/testdata/date/#example","title":"Example","text":"<pre><code>And value for variable \"AtomicDate.arrival\" is \"now | format='%Y-%m-%dT%H:%M:%S.000Z', timezone=UTC\"\n</code></pre> <p>This can then be used in a template:</p> <pre><code>{\n\"arrival\": \"{{ AtomicDate.arrival }}\",\n\"location\": \"Port of Shanghai\"\n}\n</code></pre>"},{"location":"framework/usage/variables/testdata/directory_contents/","title":"Directory Contents","text":"<p> This variable provides a list of files in the specified directory.</p>"},{"location":"framework/usage/variables/testdata/directory_contents/#format","title":"Format","text":"<p>Relative path of a directory under <code>requests/</code>.</p>"},{"location":"framework/usage/variables/testdata/directory_contents/#arguments","title":"Arguments","text":"<ul> <li><code>repeat</code> bool (optional) - wether values should be reused, e.g. when reaching the end it should start from the beginning again (default: <code>False</code>)</li> <li><code>random</code> bool (optional) - if files should be selected by random, instead of sequential from first to last (default: <code>False</code>)</li> </ul>"},{"location":"framework/usage/variables/testdata/directory_contents/#example","title":"Example","text":"<p>With the following directory structure:</p> <pre><code>.\n\u2514\u2500\u2500 requests\n    \u2514\u2500\u2500 files\n        \u251c\u2500\u2500 file1.bin\n        \u251c\u2500\u2500 file2.bin\n        \u251c\u2500\u2500 file3.bin\n        \u251c\u2500\u2500 file4.bin\n        \u2514\u2500\u2500 file5.bin\n</code></pre> <pre><code>And value for variable \"AtomicDirectoryContents.files\" is \"files/ | repeat=True, random=False\"\nAnd put request \"{{ AtomicDirectoryContents.files }}\" with name \"put-file\" to endpoint \"/tmp\"\n</code></pre> <p>First request will provide <code>file1.bin</code>, second <code>file2.bin</code> etc.</p>"},{"location":"framework/usage/variables/testdata/integer_incrementer/","title":"Integer Incrementer","text":"<p> This variable provides an unique integer each time it is accessed.</p> <p>Useful to generate unique ID for each request.</p>"},{"location":"framework/usage/variables/testdata/integer_incrementer/#format","title":"Format","text":"<p>The first value of an integer that is going to be used.</p>"},{"location":"framework/usage/variables/testdata/integer_incrementer/#arguments","title":"Arguments","text":"<ul> <li> <p><code>step</code> int, (optional) - how much the value should increment each time (default <code>1</code>)</p> </li> <li> <p><code>persist</code> bool, (optional) - if the initial value should be persist and loaded from file (default <code>False</code>)</p> </li> </ul>"},{"location":"framework/usage/variables/testdata/integer_incrementer/#example","title":"Example","text":"example.feature<pre><code>And value for variable \"AtomicIntegerIncrementer.unique_id\" is \"100 | step=10\"\nAnd value for variable \"AtomicIntegerIncrementer.persistent\" is \"10 | step=5, persist=True\"\n</code></pre> <p>This can then be used in a template:</p> <pre><code>{\n\"id\": {{ AtomicIntegerIncrementer.unique_id }}\n}\n</code></pre> <p>Values of <code>AtomicIntegerIncrementer.unique_id</code>, per run and iteration:</p> <ol> <li> <p>Run</p> <ol> <li> <p><code>100</code></p> </li> <li> <p><code>110</code></p> </li> <li> <p><code>120</code></p> </li> <li> <p>...</p> </li> </ol> </li> <li> <p>Run</p> <ol> <li> <p><code>100</code></p> </li> <li> <p><code>110</code></p> </li> <li> <p><code>120</code></p> </li> <li> <p>...</p> </li> </ol> </li> </ol> <p>Values of <code>AtomicIntegerIncrementer.persistent</code>, per run and iteration:</p> <ol> <li> <p>Run (<code>features/persistent/example.json</code> missing)</p> <ol> <li> <p><code>5</code></p> </li> <li> <p><code>15</code></p> </li> <li> <p><code>20</code></p> </li> <li> <p>...</p> </li> </ol> </li> <li> <p>Run (<code>features/persistent/example.json</code> created by Run 1, due to <code>persistent=True</code>), initial value <code>35 | step=5, persist=True</code> will be read from the file and override what is written in <code>example.feature</code></p> <ol> <li> <p><code>25</code></p> </li> <li> <p><code>30</code></p> </li> <li> <p><code>35</code></p> </li> <li> <p>...</p> </li> </ol> </li> </ol>"},{"location":"framework/usage/variables/testdata/random_integer/","title":"Random Integer","text":"<p> This variable provides an random integer between specified interval.</p>"},{"location":"framework/usage/variables/testdata/random_integer/#format","title":"Format","text":"<p>Interval from which the integer should be generated from, in the format <code>&lt;min&gt;..&lt;max&gt;</code>.</p>"},{"location":"framework/usage/variables/testdata/random_integer/#arguments","title":"Arguments","text":"<p>This variable does not have any arguments.</p>"},{"location":"framework/usage/variables/testdata/random_integer/#example","title":"Example","text":"<pre><code>And value for variable \"AtomicRandomInteger.weight\" is \"10..30\"\n</code></pre> <p>This can then be used in a template: <pre><code>{\n\"weight_tons\": {{ AtomicRandomInteger.weight }}\n}\n</code></pre></p> <p><code>AtomicRandomInteger.weight</code> will then be anything between, and including, <code>10</code> and <code>30</code>.</p>"},{"location":"framework/usage/variables/testdata/random_string/","title":"Random String","text":"<p> This variable generates a specified number of unique strings, based on a string format pattern.</p> <p>The list is pre-populated to ensure that each string is unique.</p>"},{"location":"framework/usage/variables/testdata/random_string/#format","title":"Format","text":"<p>Initial value is a string pattern specified with <code>%s</code> and <code>%d</code>, or <code>%g</code>.</p> <ul> <li><code>%s</code> represents one ASCII letter</li> <li><code>%d</code> represents one digit between <code>0</code> and <code>9</code></li> <li><code>%g</code> represents one complete UUID, cannot be combined with other string patterns</li> </ul> <p>Parts of the string can be static, e.g. not random.</p>"},{"location":"framework/usage/variables/testdata/random_string/#arguments","title":"Arguments","text":"<ul> <li><code>count</code> int (optional) - number of unique strings to generate (default: <code>1</code>)</li> <li><code>upper</code> bool (optional) - if the strings should be in upper case (default: <code>False</code>)</li> </ul>"},{"location":"framework/usage/variables/testdata/random_string/#example","title":"Example","text":"<pre><code>And value for variable \"AtomicRandomString.registration_plate_number\" is \"%s%sZ%d%d0 | upper=True, count=100\"\nAnd value for variable \"AtomicRandomString.uuid\" is \"%g | count=100\"\n</code></pre> <p>This can then be used in a template: <pre><code>{\n\"registration_plate_number\": \"{{ AtomicRandomString.registration_plate_number }}\"\n}\n</code></pre></p> <p><code>AtomicRandomString.registration_plate_number</code> will then be a string in the format <code>[A-Z][A-Z]Z[0-9][0-9]0</code> and there will be <code>100</code> unique values for disposal.</p>"}]}