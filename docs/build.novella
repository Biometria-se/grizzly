from pathlib import Path

template "mkdocs"

action "mkdocs-update-config" {
    site_name = "Grizzly"
    profile = "material"
    update '$.theme.logo' set: 'assets/logo/grizzly_grasshopper_orange_64px.png'
    update '$.theme.favicon' set: 'assets/favicon.ico'
    update '$.theme.palette' set: {'scheme': 'slate', 'primary': 'brown', 'accent': 'deep orange'}
    update_with config -> {
        def config_nav_tasks = config['nav'][2]['Framework'][0]['Usage'][1]['Tasks']
        def config_nav_tasks_clients = config_nav_tasks.pop()
        def tasks = Path.cwd() / '..' / 'grizzly' / 'tasks'

        def nav_tasks = []
        for task in tasks.iterdir():
            if task.is_file() and (task.stem == '__init__' or not task.stem.startswith('_')):
                if task.stem == '__init__':
                    nav_tasks.insert(0, 'framework/usage/tasks/index.md')
                else:
                    nav_tasks.append('framework/usage/tasks/{}.md'.format(task.stem))
        config_nav_tasks.extend(nav_tasks)

        def tasks_clients = tasks / 'clients'
        def nav_tasks_clients = []
        for task_client in tasks_clients.iterdir():
            if task_client.is_file() and (task_client.stem == '__init__' or not task_client.stem.startswith('_')):
                if task_client.stem == '__init__':
                    nav_tasks_clients.insert(0, 'framework/usage/tasks/clients/index.md')
                else:
                    nav_tasks_clients.append('framework/usage/tasks/clients/{}.md'.format(task_client.stem))
        config_nav_tasks_clients['Clients'] = nav_tasks_clients
        config_nav_tasks.append(config_nav_tasks_clients)

        def config_nav_testdata = config['nav'][2]['Framework'][0]['Usage'][2]['Variables'][1]
        def nav_testdata = []
        def variables = Path.cwd() / '..' / 'grizzly' / 'testdata' / 'variables'
        for variable in variables.iterdir():
            if variable.is_file() and (variable.stem == '__init__' or not variable.stem.startswith('_')):
                if variable.stem == '__init__':
                    nav_testdata.insert(0, 'framework/usage/variables/testdata/index.md')
                else:
                    nav_testdata.append('framework/usage/variables/testdata/{}.md'.format(variable.stem))
        config_nav_testdata['Testdata'] = nav_testdata

        def config_nav_steps = config['nav'][2]['Framework'][0]['Usage'][3]['Steps']
        def steps = Path.cwd() / '..' / 'grizzly' / 'steps'
        for step in steps.iterdir():
            if step.is_file() and (step.stem == '__init__' or not step.stem.startswith('_')):
                if step.stem == '__init__':
                    config_nav_steps.insert(0, 'framework/usage/steps/index.md')
                else:
                    config_nav_steps.append('framework/usage/steps/{}.md'.format(step.stem))

        def config_nav_steps_background = config_nav_steps[1]
        def steps_background = steps / 'background'
        def nav_steps_background = []
        for step in steps_background.iterdir():
            if step.is_file() and (step.stem == '__init__' or not step.stem.startswith('_')):
                if step.stem == '__init__':
                    nav_steps_background.insert(0, 'framework/usage/steps/background/index.md')
                else:
                    nav_steps_background.append('framework/usage/steps/background/{}.md'.format(step.stem))

        config_nav_steps_background['Background'] = nav_steps_background

        def config_nav_steps_scenario = config_nav_steps[2]
        def steps_scenario = steps / 'scenario'
        def nav_steps_scenario = []
        for step in steps_scenario.iterdir():
            if step.is_file() and (step.stem == '__init__' or not step.stem.startswith('_')):
                if step.stem == '__init__':
                    nav_steps_scenario.insert(0, 'framework/usage/steps/scenario/index.md')
                else:
                    nav_steps_scenario.append('framework/usage/steps/scenario/{}.md'.format(step.stem))

        config_nav_steps_scenario['Scenario'] = nav_steps_scenario

        def config_nav_users = config['nav'][2]['Framework'][0]['Usage'][4]
        def users = Path.cwd() / '..' / 'grizzly' / 'users'
        def nav_users = []
        for user in users.iterdir():
            if user.is_file() and (user.stem == '__init__' or not user.stem.startswith('_')):
                if user.stem == '__init__':
                    nav_users.insert(0, 'framework/usage/load-users/index.md')
                else:
                    nav_users.append('framework/usage/load-users/{}.md'.format(user.stem))

        config_nav_users['Load Users'] = nav_users
    }
}

action "preprocess-markdown" {
    use "pydoc"
}

do
    name: "generate-dynamic-pages"
    closure: {
        precedes "preprocess-markdown"
    }
    action: {
        def tasks = Path.cwd() / '..' / 'grizzly' / 'tasks'
        for task in tasks.iterdir():
            if task.is_file() and (task.stem == '__init__' or not task.stem.startswith('_')):
                def filename = task.stem
                if task.stem == '__init__':
                    filename = 'index'

                def file = directory / 'content' / 'framework' / 'usage' / 'tasks' / (filename + '.md')
                file.parent.mkdir(parents=True, exist_ok=True)

                if task.stem == '__init__':
                    file.write_text('---\ntitle: Tasks\n---\n@pydoc grizzly.tasks\n')
                else:
                    file.write_text('---\ntitle: {task}\n---\n@pydoc grizzly.tasks.{task}\n'.format(task=task.stem))

        def tasks_clients = tasks / 'clients'
        for task_client in tasks_clients.iterdir():
            if task_client.is_file() and (task_client.stem == '__init__' or not task_client.stem.startswith('_')):
                def filename = task_client.stem
                if task_client.stem == '__init__':
                    filename = 'index'

                def file = directory / 'content' / 'framework' / 'usage' / 'tasks' / 'clients' / (filename + '.md')
                file.parent.mkdir(parents=True, exist_ok=True)
                if task_client.stem == '__init__':
                    file.write_text('---\ntitle: Clients\n---\n@pydoc grizzly.tasks.clients\n')
                else:
                    file.write_text('---\ntitle: {task}\n---\n@pydoc grizzly.tasks.clients.{task}\n'.format(task=task_client.stem))

        def variables = Path.cwd() / '..' / 'grizzly' / 'testdata' / 'variables'
        for variable in variables.iterdir():
            if variable.is_file() and (variable.stem == '__init__' or not variable.stem.startswith('_')):
                def filename = variable.stem
                if variable.stem == '__init__':
                    filename = 'index'

                def file = directory / 'content' / 'framework' / 'usage' / 'variables' / 'testdata' / (filename + '.md')
                file.parent.mkdir(parents=True, exist_ok=True)
                if variable.stem == '__init__':
                    file.write_text('---\ntitle: Testdata\n---\n@pydoc grizzly.testdata.variables\n')
                else:
                    file.write_text('---\ntitle: {variable}\n---\n@pydoc grizzly.testdata.variables.{variable}\n'.format(variable=filename))

        def steps = Path.cwd() / '..' / 'grizzly' / 'steps'
        for step in steps.iterdir():
            if step.is_file() and (step.stem == '__init__' or not step.stem.startswith('_')):
                def filename = step.stem
                if step.stem == '__init__':
                    filename = 'index'

                def file = directory / 'content' / 'framework' / 'usage' / 'steps' / (filename + '.md')
                file.parent.mkdir(parents=True, exist_ok=True)
                if step.stem == '__init__':
                    file.write_text('---\ntitle: Steps\n---\n@pydoc grizzly.steps\n')
                else:
                    file.write_text('---\ntitle: {step}\n---\n@pydoc grizzly.steps.{step}\n'.format(step=filename))

        def steps_background = steps / 'background'
        for step in steps_background.iterdir():
            if step.is_file() and (step.stem == '__init__' or not step.stem.startswith('_')):
                def filename = step.stem
                if step.stem == '__init__':
                    filename = 'index'

                def file = directory / 'content' / 'framework' / 'usage' / 'steps' / 'background' / (filename + '.md')
                file.parent.mkdir(parents=True, exist_ok=True)
                if step.stem == '__init__':
                    file.write_text('---\ntitle: Background Steps\n---\n@pydoc grizzly.steps.background\n')
                else:
                    file.write_text('---\ntitle: {step}\n---\n@pydoc grizzly.steps.background.{step}\n'.format(step=filename))

        def steps_scenario = steps / 'scenario'
        for step in steps_scenario.iterdir():
            if step.is_file() and (step.stem == '__init__' or not step.stem.startswith('_')):
                def filename = step.stem
                if step.stem == '__init__':
                    filename = 'index'

                def file = directory / 'content' / 'framework' / 'usage' / 'steps' / 'scenario' / (filename + '.md')
                file.parent.mkdir(parents=True, exist_ok=True)
                if step.stem == '__init__':
                    file.write_text('---\ntitle: Scenario Steps\n---\n@pydoc grizzly.steps.scenario\n')
                else:
                    file.write_text('---\ntitle: {step}\n---\n@pydoc grizzly.steps.scenario.{step}\n'.format(step=filename))

        def users = Path.cwd() / '..' / 'grizzly' / 'users'
        for user in users.iterdir():
            if user.is_file() and (user.stem == '__init__' or not user.stem.startswith('_')):
                def filename = user.stem
                if user.stem == '__init__':
                    filename = 'index'

                def file = directory / 'content' / 'framework' / 'usage' / 'load-users' / (filename + '.md')
                file.parent.mkdir(parents=True, exist_ok=True)
                if user.stem == '__init__':
                    file.write_text('---\ntitle: Load Users\n---\n@pydoc grizzly.users\n')
                else:
                    file.write_text('---\ntitle: {user}\n---\n@pydoc grizzly.users.{user}\n'.format(user=filename))
    }
