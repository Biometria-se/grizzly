name: release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '0.0.0'
      level:
        description: 'Version level increment'
        required: true
        default: 'patch'
      dry-run:
        description: 'Test release workflow'
        required: true
        default: 'true'

defaults:
  run:
    shell: bash

jobs:
  release:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        python-version: [3.8]

    steps:
    - name: input sanity check
      run: |
        if ! [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "version must be matching <major>.<minor>.<patch>, e.g. 1.3.15, not \"${{ github.event.inputs.version }}\""
          exit 1
        fi

        if [[ "${{ github.event.inputs.level }}" != "major" && "${{ github.event.inputs.level }}" != "minor" && "${{ github.event.inputs.level }}" != "patch" ]]; then
          echo "level must be one of major, minor or patch, not \"${{ github.event.inputs.level }}\""
          exit 1
        fi

        if [[ "${{ github.event.inputs.dry-run }}" != "true" && "${{ github.event.inputs.dry-run }}" != "false" ]]; then
          echo "dry-run must be one of true or false, not \"${{ github.event.inputs.dry-run }}\""
          exit 1
        fi

    - name: setup python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: checkout
      uses: actions/checkout@v2

    - name: get last released version
      if: github.event.inputs.version == '0.0.0'
      id: last-version
      run: |
        last_version=$(git tag | awk '$1 ~ /^v[0-9]+\.[0-9]+\.[0-9]+$/ {print $1}' | sort -r | head -1 | sed -r 's|^v||')
        if [[ -z "${last_version}" ]]; then
          last_version="0.0.0"
          echo "::set-output name=level::major"
        fi

        echo "::set-output name=version::${last_version}"

    - name: autobump version
      if: github.event.inputs.version == '0.0.0'
      uses: actions-ecosystem/action-bump-semver@v1
      id: autobump
      with:
        current_version: ${{ steps.last-version.outputs.version }}
        level: ${{ steps.last-version.outputs.level || github.event.inputs.level }}

    - name: version check
      id: version
      run: |
        if [[ "${{ github.event.inputs.version }}" != "0.0.0" ]]; then
          next_version="${{ github.event.inputs.version }}"
        else
          next_version="${{ steps.autobump.outputs.new_version || steps.last-version.outputs.version }}"
        fi

        echo "github.event.inputs.version=${{ github.event.inputs.version }}"
        echo "steps.autobump.outputs.new_version=${{ steps.autobump.outputs.new_version }}"
        echo "next_version=${next_version}"

        if [[ -z "${next_version}" || "${next_version}" == "0.0.0" ]]; then
          echo "could not set next version"
          exit 1
        fi

        if ! git tag | awk '$1 ~ /^v'"${next_version}"'$/ { exit 1 }'; then
          echo "${next_version} already exists"
          exit 1
        fi

        echo "::set-output name=version::${next_version}"

    - name: setup environment
      run: |
        sudo ln -fs /usr/share/zoneinfo/Europe/Stockholm /etc/localtime
        sudo ln -fs /usr/share/zoneinfo/Europe/Stockholm /etc/timezone
        echo $HOME/.local/bin >> $GITHUB_PATH

    - name: cache python environment
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('requirements-dev.txt')}}

    - name: install python dependencies
      run: |
        pip install --upgrade wheel twine
        pip install --upgrade --upgrade-strategy eager -r <(cat requirements.txt requirements-dev.txt)

    - name: build and publish package
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        TWINE_NON_INTERACTIVE: true
      run: |
        PLACEHOLDER="__version__ = 'develop'"
        VERSION_FILE='grizzly/__init__.py'
        VERSION_INFORMATION="__version__ = '${{ steps.version.outputs.version }}'"

        if ! grep -q "${PLACEHOLDER}" "${VERSION_FILE}"; then
          echo "did not find ${PLACEHOLDER} in ${VERSION_FILE}"
          exit 1
        fi

        sed -i "s/${PLACEHOLDER}/${VERSION_INFORMATION}/g" "${VERSION_FILE}"

        python setup.py sdist bdist_wheel
        ls -l dist/grizzly?loadtester-${{ steps.version.outputs.version }}*
        if [[ "${{ github.event.inputs.dry-run }}" != "true" ]]; then
          ls -l dist/grizzly?loadtester-${{ steps.version.outputs.version }}*
          # @TODO: still testing...
          # twine upload dist/grizzly?loadtester-${{ steps.version.outputs.version }}*
        else
          echo "!! dry-run, does not upload package to pypi"
        fi

    - name: create and push release tag
      uses: actions-ecosystem/action-push-tag@v1
      if: github.event.inputs.dry-run != 'true'
      with:
        tag: v${{ steps.version.outputs.version }}
        message: 'Release ${{ steps.version.outputs.version }}'

    - name: build documentation
      run: |
        pydoc-markdown --build --site-dir "$PWD/build/html"

    - name: deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        publish_branch: gh-pages
        publish_dir: build/html
        destination_dir: docs/
        enable_jekyll: false
        # cname: <a better domain>
        allow_empty_commit: true
        commit_message: 'Documentation for release ${{ steps.version.outputs.version }}'

