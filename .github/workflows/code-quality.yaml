name: code quality

on:
  pull_request:
    branches:
    - main

jobs:
  linting:
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: .

    steps:
    - name: checkout
      id: checkout
      uses: actions/checkout@v2

    - name: setup python (with cache)
      if: ${{ !env.ACT }}
      id: setup-python-with-cache
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        cache: 'pip'
        cache-dependency-path: '**/requirements-ci.txt'

    - name: setup python (without cache)
      if: ${{ env.ACT }}
      id: setup-python-without-cache
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: install python dependencies
      id: pip
      run: |
        python -m pip install --upgrade pip-tools
        python -m piptools sync requirements-ci.txt --pip-args '--disable-pip-version-check --no-cache-dir --user --no-warn-script-location --no-deps'

    - name: run pylint
      id: pylint
      run: python -m pylint --jobs=0 --fail-under=10 grizzly/ grizzly_extras/ tests/ example/

    - name: run mypy
      id: mypy
      run: python -m mypy grizzly/ grizzly_extras/ tests/ example/

    - name: run flake8
      id: flake8
      run: python -m flake8

#    - name: run sonar-scanner-cli
#      uses: docker://sonarsource/sonar-scanner-cli:latest
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  test-and-coverage:
    name: "test-and-coverage / ${{ matrix.runs-on }} / python-${{ matrix.python-version }}"
    runs-on: ${{ matrix.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        runs-on: ['ubuntu-latest']
        include:
          - python-version: '3.10'
            runs-on: windows-latest

    env:
      PYTHONPATH: .

    steps:
    - name: timezone
      id: timezone
      if: ${{ !env.ACT }}
      uses: szenius/set-timezone@v1.0
      with:
        timezoneLinux: "Europe/Stockholm"
        timezoneWindows: "W. Europe Standard Time"

    - name: timezone (linux only)
      id: timezone-linux
      if: ${{ env.ACT }}
      run: |
        sudo ln -fs /usr/share/zoneinfo/Europe/Stockholm /etc/localtime
        sudo ln -fs /usr/share/zoneinfo/Europe/Stockholm /etc/timezone

    - name: checkout
      id: checkout
      uses: actions/checkout@v2

    - name: setup python (with cache)
      if: ${{ !env.ACT }}
      id: setup-python-with-cache
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: '**/requirements-ci.txt'

    - name: setup python (without cache)
      if: ${{ env.ACT }}
      id: setup-python-without-cache
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: install python dependencies
      id: pip
      run: |
        python -m pip install --upgrade pip-tools
        python -m piptools sync requirements-ci.txt --pip-args '--disable-pip-version-check --no-cache-dir --user --no-warn-script-location --no-deps'

    - name: pytest
      id: pytest
      run: python -m pytest --ignore=tests/e2e

    - name: coverage
      id: coverage
      run: python -m coverage report --omit=**/*messagequeue*,**/*mq.py --fail-under=95

  test-e2e:
    needs: test-and-coverage
    runs-on: ubuntu-latest

    env:
      PYTHONPATH: .

    steps:
    - name: checkout
      id: checkout
      uses: actions/checkout@v2

    - name: setup python (with cache)
      if: ${{ !env.ACT }}
      id: setup-python-with-cache
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        cache: 'pip'
        cache-dependency-path: '**/requirements-ci.txt'

    - name: setup python (without cache)
      if: ${{ env.ACT }}
      id: setup-python-without-cache
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: install python dependencies
      id: pip
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        python -m pip install --upgrade pip-tools
        python -m piptools sync requirements-ci.txt --pip-args '--disable-pip-version-check --no-cache-dir --user --no-warn-script-location --no-deps'
        python -m pip install .

    - name: pytest (e2e)
      id: pytest-e2e
      run: python -m pytest tests/e2e

  pre-documentation-scripts:
    runs-on: 'ubuntu-latest'

    steps:
    - name: checkout
      id: checkout
      uses: actions/checkout@v2

    - name: create script matrix
      id: create-script-matrix
      run: |
        echo "::set-output name=matrix::$(ls -1 script/docs-* | awk 'BEGIN {printf "["} {printf "\""$0"\", "} END {print "]"}' | sed -r 's|", \]$|"\]|')"

    - name: validate script matrix
      run: |
        echo '${{ steps.create-script-matrix.outputs.matrix }}'

    outputs:
      matrix: ${{ steps.create-script-matrix.outputs.matrix }}

  documentation-scripts:
    name: "documentation / ${{ matrix.script }}"
    runs-on: 'ubuntu-latest'
    needs: pre-documentation-scripts

    strategy:
      fail-fast: false
      matrix:
        script: ${{ fromJson(needs.pre-documentation-scripts.outputs.matrix) }}
#        script:
#        - script/docs-generate-changelog.py
#        - script/docs-generate-cli.bash
#        - script/docs-generate-licenses.py

    steps:
    - name: checkout
      id: checkout
      uses: actions/checkout@v2

    - name: setup python (with cache)
      if: ${{ !env.ACT }}
      id: setup-python-with-cache
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        cache: 'pip'
        cache-dependency-path: '**/requirements-script.txt'

    - name: setup python (without cache)
      if: ${{ env.ACT }}
      id: setup-python-without-cache
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: install python dependencies
      id: pip
      run: |
        python -m pip install --upgrade pip-tools
        python -m piptools sync requirements-script.txt --pip-args '--disable-pip-version-check --no-cache-dir --user --no-warn-script-location --no-deps'

    - name: exists
      run: test -e ${{ matrix.script }}

    - name: executable
      run: test -x ${{ matrix.script }}

    - name: runnable
      run: ./${{ matrix.script }}
